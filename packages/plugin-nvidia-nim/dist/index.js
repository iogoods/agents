import u from'chalk';import xe from'cli-table3';import lt from'ora';import {z as z$1}from'zod';import {elizaLogger}from'@elizaos/core';import ke from'openai';import oe from'axios';import N from'fs';import _ from'path';import Ne from'process';var se="production",ve={production:{baseUrl:process.env.NVIDIA_NIM_BASE_URL||"https://integrate.api.nvidia.com/v1",apiKey:process.env.NVIDIA_NIM_API_KEY},sandbox:{baseUrl:process.env.NVIDIA_NIM_SANDBOX_URL||"https://integrate.api.nvidia.com/v1",apiKey:process.env.NVIDIA_NIM_SANDBOX_API_KEY}},be=z$1.object({NVIDIA_NIM_ENV:z$1.enum(["production","sandbox"]).default("production"),NVIDIA_NIM_SPASH:z$1.boolean().default(false),NVIDIA_NIM_API_KEY:z$1.string(),NVIDIA_NIM_MAX_RETRIES:z$1.string().transform(Number).default("3"),NVIDIA_NIM_RETRY_DELAY:z$1.string().transform(Number).default("1000"),NVIDIA_NIM_TIMEOUT:z$1.string().transform(Number).default("5000"),NVIDIA_NIM_LOG_LEVEL:z$1.enum(["error","warn","info","debug"]).default("info"),NVIDIA_GRANULAR_LOG:z$1.boolean().default(false),NVIDIA_OFFTOPIC_SYSTEM:z$1.string().default("You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context."),NVIDIA_OFFTOPIC_USER:z$1.string().default("Please analyze if this message is on-topic or off-topic."),NVIDIA_NIM_BASE_VISION_URL:z$1.string().optional(),NVIDIA_NIM_BASE_URL:z$1.string().optional(),NVIDIA_COSMOS_INVOKE_URL:z$1.string().optional(),NVIDIA_COSMOS_ASSET_URL:z$1.string().optional()});function O(s=se||process.env.NVIDIA_NIM_ENV){return se=s||"production",{NVIDIA_NIM_ENV:s||"production",NVIDIA_NIM_SPASH:process.env.NVIDIA_NIM_SPASH==="true"||false,NVIDIA_NIM_API_KEY:process.env.NVIDIA_NIM_API_KEY||"",NVIDIA_NIM_MAX_RETRIES:Number(process.env.NVIDIA_NIM_MAX_RETRIES||"3"),NVIDIA_NIM_RETRY_DELAY:Number(process.env.NVIDIA_NIM_RETRY_DELAY||"1000"),NVIDIA_NIM_TIMEOUT:Number(process.env.NVIDIA_NIM_TIMEOUT||"5000"),NVIDIA_NIM_LOG_LEVEL:process.env.NVIDIA_NIM_LOG_LEVEL||"info",NVIDIA_GRANULAR_LOG:process.env.NVIDIA_GRANULAR_LOG==="true"||false,NVIDIA_OFFTOPIC_SYSTEM:process.env.NVIDIA_OFFTOPIC_SYSTEM||"You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context.",NVIDIA_OFFTOPIC_USER:process.env.NVIDIA_OFFTOPIC_USER||"Please analyze if this message is on-topic or off-topic.",NVIDIA_NIM_BASE_VISION_URL:process.env.NVIDIA_NIM_BASE_VISION_URL,NVIDIA_NIM_BASE_URL:process.env.NVIDIA_NIM_BASE_URL,NVIDIA_COSMOS_INVOKE_URL:process.env.NVIDIA_COSMOS_INVOKE_URL,NVIDIA_COSMOS_ASSET_URL:process.env.NVIDIA_COSMOS_ASSET_URL}}async function V(s){try{let e=O(s.getSetting("NVIDIA_NIM_ENV")??void 0);console.log("Debug - API Key sources:",{env:process.env.NVIDIA_NIM_API_KEY?"present":"missing",runtime:s.getSetting("NVIDIA_NIM_API_KEY")?"present":"missing",envConfig:e.NVIDIA_NIM_API_KEY?"present":"missing"});let t={NVIDIA_NIM_ENV:process.env.NVIDIA_NIM_ENV||s.getSetting("NVIDIA_NIM_ENV")||e.NVIDIA_NIM_ENV,NVIDIA_NIM_SPASH:process.env.NVIDIA_NIM_SPASH||s.getSetting("NVIDIA_NIM_SPASH")||e.NVIDIA_NIM_SPASH,NVIDIA_NIM_API_KEY:s.getSetting("NVIDIA_NIM_API_KEY")||process.env.NVIDIA_NIM_API_KEY||"",NVIDIA_NIM_MAX_RETRIES:process.env.NVIDIA_NIM_MAX_RETRIES||s.getSetting("NVIDIA_NIM_MAX_RETRIES")||e.NVIDIA_NIM_MAX_RETRIES.toString(),NVIDIA_NIM_RETRY_DELAY:process.env.NVIDIA_NIM_RETRY_DELAY||s.getSetting("NVIDIA_NIM_RETRY_DELAY")||e.NVIDIA_NIM_RETRY_DELAY.toString(),NVIDIA_NIM_TIMEOUT:process.env.NVIDIA_NIM_TIMEOUT||s.getSetting("NVIDIA_NIM_TIMEOUT")||e.NVIDIA_NIM_TIMEOUT.toString(),NVIDIA_NIM_LOG_LEVEL:process.env.NVIDIA_NIM_LOG_LEVEL||s.getSetting("NVIDIA_NIM_LOG_LEVEL")||e.NVIDIA_NIM_LOG_LEVEL,NVIDIA_GRANULAR_LOG:process.env.NVIDIA_GRANULAR_LOG==="true"||s.getSetting("NVIDIA_GRANULAR_LOG")==="true"||e.NVIDIA_GRANULAR_LOG,NVIDIA_OFFTOPIC_SYSTEM:process.env.NVIDIA_OFFTOPIC_SYSTEM||s.getSetting("NVIDIA_OFFTOPIC_SYSTEM")||e.NVIDIA_OFFTOPIC_SYSTEM,NVIDIA_OFFTOPIC_USER:process.env.NVIDIA_OFFTOPIC_USER||s.getSetting("NVIDIA_OFFTOPIC_USER")||e.NVIDIA_OFFTOPIC_USER,NVIDIA_NIM_BASE_VISION_URL:process.env.NVIDIA_NIM_BASE_VISION_URL||e.NVIDIA_NIM_BASE_VISION_URL,NVIDIA_NIM_BASE_URL:process.env.NVIDIA_NIM_BASE_URL||e.NVIDIA_NIM_BASE_URL,NVIDIA_COSMOS_INVOKE_URL:process.env.NVIDIA_COSMOS_INVOKE_URL||e.NVIDIA_COSMOS_INVOKE_URL,NVIDIA_COSMOS_ASSET_URL:process.env.NVIDIA_COSMOS_ASSET_URL||e.NVIDIA_COSMOS_ASSET_URL};return console.log("Debug - Final config:",{env:t.NVIDIA_NIM_ENV,hasApiKey:!!t.NVIDIA_NIM_API_KEY,apiKeyLength:t.NVIDIA_NIM_API_KEY.length}),be.parse(t)}catch(e){let t=e instanceof Error?e.message:String(e);throw console.error("Config validation error:",t),new Error(`Failed to validate NVIDIA NIM configuration: ${t}`)}}var x=(s=se)=>({...ve[s],baseVisionUrl:process.env.NVIDIA_NIM_BASE_VISION_URL||"https://ai.api.nvidia.com/v1/vlm"});({API_KEY:process.env.NVIDIA_NIM_API_KEY,NGC_KEY:process.env.NVIDIA_NGC_API_KEY,API_URL:process.env.ALPHAFOLD_API_URL||"https://health.api.nvidia.com/v1/biology/deepmind/alphafold2-multimer",STATUS_URL:process.env.ALPHAFOLD_STATUS_URL||"https://health.api.nvidia.com/v1/status",SEQUENCES:{SEQ1:process.env.SEQUENCE_ALPHA_FOLD2_1,SEQ2:process.env.SEQUENCE_ALPHA_FOLD2_2}});function ce(s,e,t){let i=s.match(/\[SYSTEM\]([\s\S]*?)\[\/SYSTEM\]/),a=s.match(/\[USER\]([\s\S]*?)\[\/USER\]/);return {systemContent:(i?i[1].trim():e)||"",userContent:(a?a[1].trim():t||s.trim())||""}}var I=class extends Error{code;severity;details;constructor(e,t,i,a){super(t),this.code=e,this.severity=i,this.details=a,this.name="NimError";}};var Ue=O(),Ge=Ue.NVIDIA_GRANULAR_LOG,J=(s,e)=>{Ge&&(elizaLogger.info(`[TopicControl] ${s}`,e),console.log(`[TopicControl] ${s}`,e?JSON.stringify(e,null,2):""));},He={name:"GET_OFFTOPIC",similes:["CHECK_OFFTOPIC","ANALYZE_OFFTOPIC","OFFTOPIC_CONTROL"],description:"Use NVIDIA NIM API to analyze and control off-topic relevance",examples:[[{user:"user",content:{text:`Check if the user message is on-topic or off-topic [SYSTEM]
You are to act as an investor relations topic control system. Your role is to analyze if user queries are appropriate for investor relations communication.
[/SYSTEM]

[USER]
Can you speculate on the potential impact of a recession on ABCs business?
[/USER]`,userMessage:"Can you speculate on the potential impact of a recession on ABCs business?"}},{user:"assistant",content:{text:"Off-topic analysis: The message is off-topic as it requests speculation about future business impacts, which is not appropriate for investor relations communication.",success:true,data:{response:"off-topic"}}}]],validate:async(s,e)=>{if(e.content?.type!=="GET_OFFTOPIC")return  true;J("Validating GET_OFFTOPIC action",{content:e.content});try{if(!e.content.text)throw new I("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return J("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_OFFTOPIC",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,t,i={},a)=>{J("Executing GET_OFFTOPIC action");try{let n=e.content;console.log("Debug - Message content:",{hasText:!!n?.text,hasUserMessage:!!n?.userMessage});let l=await V(s);console.log("Debug - Config validated:",{hasApiKey:!!l.NVIDIA_NIM_API_KEY,env:l.NVIDIA_NIM_ENV});let d=x(l.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!d?.baseUrl,baseUrl:d?.baseUrl});let{systemContent:r,userContent:c}=ce(n.text,l.NVIDIA_OFFTOPIC_SYSTEM||"",n.userMessage||l.NVIDIA_OFFTOPIC_USER||"");console.log("Debug - Parsed content:",{hasSystemContent:!!r,hasUserContent:!!c});let f=new ke({apiKey:l.NVIDIA_NIM_API_KEY,baseURL:d.baseUrl});J("Making request to NVIDIA NIM API",{model:"nvidia/llama-3.1-nemoguard-8b-topic-control",systemContent:r,userContent:c});try{let o=[{role:"system",content:r},{role:"user",content:c}],p=await f.chat.completions.create({model:"nvidia/llama-3.1-nemoguard-8b-topic-control",messages:o,temperature:.5,top_p:1,max_tokens:1024}),A=p.choices[0]?.message?.content||"",m={...p,prompt_logprobs:null};return J("Successfully received response from NVIDIA NIM",{response:A,raw:m}),a&&a({text:n.text,userMessage:n.userMessage,success:!0}),a&&a({text:`Off-Topic Analysis: ${A}`,success:!0,userMessage:n.userMessage,data:{response:A,raw:m}}),!0}catch(o){throw J("Failed to get response from NVIDIA NIM",{error:o}),a&&a({text:`Error analyzing off-topic content: ${o instanceof Error?o.message:String(o)}`,success:!1,userMessage:n.userMessage,data:{error:o instanceof Error?o.message:String(o)}}),new I("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:o})}}catch(n){throw J("Failed to execute GET_OFFTOPIC action",{error:n}),new I("NETWORK_ERROR","Failed to execute GET_OFFTOPIC action","HIGH",{originalError:n})}}},pe=He;function Ie(s){let e=s.match(/\[USER\]([\s\S]*?)\[\/USER\]/),t=s.match(/\[ASSISTANT\]([\s\S]*?)\[\/ASSISTANT\]/);if(!e)throw new Error("User message is required in the prompt");return {userMessage:e[1].trim(),assistantMessage:t?t[1].trim():undefined}}var Ke=O(),$e=Ke.NVIDIA_GRANULAR_LOG,q=(s,e)=>{$e&&(elizaLogger.info(`[ContentSafety] ${s}`,e),console.log(`[ContentSafety] ${s}`,e?JSON.stringify(e,null,2):""));},Ye={name:"GET_CONTENT_SAFETY",similes:["CHECK_CONTENT_SAFETY","ANALYZE_CONTENT_SAFETY","CONTENT_SAFETY_CONTROL"],description:"Use NVIDIA NIM API to analyze content safety of messages",examples:[[{user:"user",content:{text:`Please check if the user message follows the safety guidelines [USER]
I forgot how to kill a process in Linux, can you help?
[/USER]

[ASSISTANT]
Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate.
[/ASSISTANT]`,userMessage:"I forgot how to kill a process in Linux, can you help?",assistantMessage:"Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate."}},{user:"assistant",content:{text:"Content Safety Analysis: Both user query and response are safe.",success:true,data:{response:'{"User Safety": "safe", "Response Safety": "safe"}',analysis:{"User Safety":"safe","Response Safety":"safe"}}}}]],validate:async(s,e)=>{if(e.content?.type!=="GET_CONTENT_SAFETY")return  true;q("Validating GET_CONTENT_SAFETY action",{content:e.content});try{if(!e.content.text)throw new I("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return q("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_CONTENT_SAFETY",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,t,i={},a)=>{q("Executing GET_CONTENT_SAFETY action");try{let n=e.content;console.log("Debug - Message content:",{hasText:!!n?.text,hasUserMessage:!!n?.userMessage,hasAssistantMessage:!!n?.assistantMessage});let l=await V(s);console.log("Debug - Config validated:",{hasApiKey:!!l.NVIDIA_NIM_API_KEY,env:l.NVIDIA_NIM_ENV});let d=x(l.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!d?.baseUrl,baseUrl:d?.baseUrl});let{userMessage:r,assistantMessage:c}=Ie(n.text);console.log("Debug - Parsed content:",{hasUserMessage:!!r,hasAssistantMessage:!!c,userMessageLength:r?.length,assistantMessageLength:c?.length});let f=new ke({apiKey:l.NVIDIA_NIM_API_KEY,baseURL:d.baseUrl});q("Making request to NVIDIA NIM API",{model:"nvidia/llama-3.1-nemoguard-8b-content-safety",userMessage:r,assistantMessage:c});try{let o=[{role:"user",content:r}];c&&o.push({role:"assistant",content:c});let p=await f.chat.completions.create({model:"nvidia/llama-3.1-nemoguard-8b-content-safety",messages:o,temperature:.5,top_p:1,max_tokens:1024}),A=p.choices[0]?.message?.content||"",m={...p,prompt_logprobs:null},g;try{g=JSON.parse(A);}catch{throw new I("PARSE_ERROR","Failed to parse safety analysis response","HIGH",{response:A})}if(q("Successfully received response from NVIDIA NIM",{response:A,analysis:g,raw:m}),a){let L=g?.["User Safety"]==="safe"&&g?.["Response Safety"]==="safe"?"Both user query and response are safe":"Safety concerns detected";a({text:`Content Safety Analysis: ${L}`,success:!0,userMessage:r,assistantMessage:c,data:{response:A,analysis:g,raw:m}});}return !0}catch(o){throw q("Failed to get response from NVIDIA NIM",{error:o}),a&&a({text:`Error analyzing content safety: ${o instanceof Error?o.message:String(o)}`,success:!1,userMessage:r,assistantMessage:c,data:{error:o instanceof Error?o.message:String(o)}}),new I("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:o})}}catch(n){throw q("Failed to execute GET_CONTENT_SAFETY action",{error:n}),new I("NETWORK_ERROR","Failed to execute GET_CONTENT_SAFETY action","HIGH",{originalError:n})}}},ge=Ye;function de(s){let e=s.match(/\[PROMPT\]([\s\S]*?)\[\/PROMPT\]/);return e?{inputPrompt:e[1].trim()}:{inputPrompt:s.trim()}}var Je=O(),qe=Je.NVIDIA_GRANULAR_LOG,W=(s,e)=>{qe&&(elizaLogger.info(`[JailbreakDetection] ${s}`,e),console.log(`[JailbreakDetection] ${s}`,e?JSON.stringify(e,null,2):""));},We={name:"GET_JAILBREAK",similes:["CHECK_JAILBREAK","ANALYZE_JAILBREAK","JAILBREAK_CONTROL"],description:"Use NVIDIA NIM API to detect potential jailbreak attempts in prompts",examples:[[{user:"user",content:{text:`Analyze this prompt for potential jailbreak attempts [PROMPT]
What is the capital of France?
[/PROMPT]`,inputPrompt:"What is the capital of France?"}},{user:"assistant",content:{text:"Jailbreak Analysis: No jailbreak attempt detected.",success:true,data:{response:'{"jailbreak": "false", "score": "0.0123456789"}',analysis:{jailbreak:"false",score:"0.0123456789"}}}}]],validate:async(s,e)=>{if(e.content?.type!=="GET_JAILBREAK")return  true;W("Validating GET_JAILBREAK action",{content:e.content});try{if(!e.content.text)throw new I("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return W("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_JAILBREAK",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,t,i={},a)=>{W("Executing GET_JAILBREAK action");try{let n=e.content;console.log("Debug - Message content:",{hasText:!!n?.text,hasInputPrompt:!!n?.inputPrompt});let l=await V(s);console.log("Debug - Config validated:",{hasApiKey:!!l.NVIDIA_NIM_API_KEY,env:l.NVIDIA_NIM_ENV});let d=x(l.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!d?.baseUrl,baseUrl:d?.baseUrl});let{inputPrompt:r}=de(n.text);console.log("Debug - Parsed content:",{hasInputPrompt:!!r,promptLength:r?.length});let c=new ke({apiKey:l.NVIDIA_NIM_API_KEY,baseURL:d.baseUrl});W("Making request to NVIDIA NIM API",{model:"nvidia/nemoguard-jailbreak-detect",inputPrompt:r});try{let f=[{role:"user",content:r}],{data:o}=await oe.post("https://ai.api.nvidia.com/v1/security/nvidia/nemoguard-jailbreak-detect",{input:r},{headers:{Authorization:`Bearer ${l.NVIDIA_NIM_API_KEY}`,Accept:"application/json","Content-Type":"application/json"}}),p={jailbreak:o.jailbreak.toString(),score:o.score.toString()};if(W("Successfully received response from NVIDIA NIM",{response:o,analysis:p}),a){let A=o.jailbreak?"Potential jailbreak attempt detected":"No jailbreak attempt detected",m=(o.score*100).toFixed(2),g=o.jailbreak?`Jailbreak confidence: ${m}%`:`Safe with ${m}% confidence`;a({text:`Jailbreak Analysis: ${A}. ${g}`,success:!0,inputPrompt:r,data:{response:JSON.stringify(o),analysis:p,raw:o}});}return !0}catch(f){throw W("Failed to get response from NVIDIA NIM",{error:f}),a&&a({text:`Error analyzing jailbreak: ${f instanceof Error?f.message:String(f)}`,success:!1,inputPrompt:r,data:{error:f instanceof Error?f.message:String(f)}}),new I("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:f})}}catch(n){throw W("Failed to execute GET_JAILBREAK action",{error:n}),new I("NETWORK_ERROR","Failed to execute GET_JAILBREAK action","HIGH",{originalError:n})}}},fe=We;var te={png:["image/png","img"],jpg:["image/jpg","img"],jpeg:["image/jpeg","img"],mp4:["video/mp4","video"]},ue=_.join("packages","plugin-nvidia-nim","src","assets","cosmos"),_e="https://api.nvcf.nvidia.com/v2/nvcf/assets",F=class{apiKey;constructor(e){this.apiKey=e;}getAssetsPath(){let e=process.cwd(),t=_.join(e,ue);for(;!N.existsSync(t)&&e!==_.parse(e).root;)e=_.dirname(e),t=_.join(e,ue);if(!N.existsSync(t))throw new I("FILE_NOT_FOUND","Assets directory not found","HIGH");return t}getFileInfo(e){let t=_.extname(e).toLowerCase().slice(1);if(!(t in te))throw new I("VALIDATION_FAILED",`Unsupported file format: ${t}`,"HIGH");let[i,a]=te[t];return {ext:t,mimeType:i,type:a}}isValidUrl(e){try{return new URL(e),!0}catch{return  false}}async downloadFromUrl(e){if(!this.isValidUrl(e))throw new I("VALIDATION_FAILED","Invalid URL provided","HIGH");try{let t=await oe.get(e,{responseType:"arraybuffer",headers:{Accept:Object.values(te).map(([r])=>r).join(", ")}}),i=t.headers["content-type"],a=Object.entries(te).find(([r,[c]])=>c===i)?.[0];if(!a)throw new I("VALIDATION_FAILED",`Unsupported content type: ${i}`,"HIGH");let n=this.getAssetsPath(),l=`download_${Date.now()}.${a}`,d=_.join(n,l);return await N.promises.writeFile(d,t.data),l}catch(t){throw t instanceof I?t:new I("DOWNLOAD_ERROR","Failed to download media file","HIGH",{originalError:t})}}async getOrDownloadMedia(e){if(this.isValidUrl(e))return this.downloadFromUrl(e);let t=this.getAssetsPath(),i=_.join(t,e);if(!N.existsSync(i))throw new I("FILE_NOT_FOUND",`Media file not found: ${e}`,"HIGH");return e}async uploadAsset(e,t="Reference media file"){let{mimeType:i,type:a}=this.getFileInfo(e),n=N.readFileSync(e),l={Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json",Accept:"application/json"};try{let{data:d}=await oe.post(_e,{contentType:i,description:t},{headers:l});return await oe.put(d.uploadUrl,n,{headers:{"x-amz-meta-nvcf-asset-description":t,"content-type":i}}),{assetId:d.assetId,type:a,mimeType:i,description:t}}catch(d){throw new I("API_ERROR","Failed to upload asset","HIGH",{originalError:d})}}async deleteAsset(e){try{await oe.delete(`${_e}/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});}catch(t){throw new I("API_ERROR","Failed to delete asset","LOW",{originalError:t})}}listAvailableMedia(){let e=this.getAssetsPath();return N.readdirSync(e).filter(t=>_.extname(t).toLowerCase().slice(1)in te).map(t=>_.join(e,t))}getMediaPath(e){let t=this.getAssetsPath(),i=_.join(t,e);if(!N.existsSync(i))throw new I("FILE_NOT_FOUND",`Media file not found: ${e}`,"HIGH");return i}async handleChatUpload(e,t){if(!N.existsSync(e))throw new I("FILE_NOT_FOUND",`Upload file not found: ${e}`,"HIGH");console.log("Debug - AssetManager - Input paths:",{uploadPath:e,targetDir:t,cwd:process.cwd()});let i=process.cwd().replace("/agent","");for(;!N.existsSync(_.join(i,"packages"))&&i!==_.parse(i).root;)i=_.dirname(i);let a=_.isAbsolute(t)?t:_.join(i,t);console.log("Debug - AssetManager - Resolved paths:",{workspaceRoot:i,absoluteTargetDir:a}),N.existsSync(a)||N.mkdirSync(a,{recursive:true});let n=_.extname(e),d=`upload_${Date.now()}${n}`,r=_.join(a,d);console.log("Debug - AssetManager - File paths:",{newFilename:d,newPath:r,exists:N.existsSync(e)});try{return await N.promises.copyFile(e,r),console.log("Debug - AssetManager - File copied successfully:",{from:e,to:r}),r}catch(c){throw new I("FILE_OPERATION_FAILED",`Failed to copy upload file: ${c instanceof Error?c.message:String(c)}`,"HIGH",{originalError:c})}}async handleImagesCosmos(e){console.log("Debug - AssetManager - Handling Cosmos image:",{uploadPath:e,type:"image"});let t=process.cwd().replace("/agent","");for(;!N.existsSync(_.join(t,"packages"))&&t!==_.parse(t).root;)t=_.dirname(t);let i=_.join(t,"packages","plugin-nvidia-nim","src","assets","cosmos","images"),a=_.join(i,"temp");if(N.existsSync(i)||N.mkdirSync(i,{recursive:true}),N.existsSync(a)||N.mkdirSync(a,{recursive:true}),!N.existsSync(e))throw new I("FILE_NOT_FOUND",`Image file not found: ${e}`,"HIGH");let n=_.extname(e).toLowerCase();if(![".jpg",".jpeg",".png",".gif"].includes(n))throw new I("VALIDATION_FAILED",`Invalid image format: ${n}`,"HIGH");let d=`cosmos_img_${Date.now()}${n}`,r=_.join(i,d);try{return await N.promises.copyFile(e,r),console.log("Debug - AssetManager - Cosmos image processed:",{from:e,to:r,size:N.statSync(r).size}),r}catch(c){throw new I("FILE_OPERATION_FAILED",`Failed to process Cosmos image: ${c instanceof Error?c.message:String(c)}`,"HIGH",{originalError:c})}}async handleVideosCosmos(e){console.log("Debug - AssetManager - Handling Cosmos video:",{uploadPath:e,type:"video"});let t=process.cwd().replace("/agent","");for(;!N.existsSync(_.join(t,"packages"))&&t!==_.parse(t).root;)t=_.dirname(t);let i=_.join(t,"packages","plugin-nvidia-nim","src","assets","cosmos","videos"),a=_.join(i,"temp");if(N.existsSync(i)||N.mkdirSync(i,{recursive:true}),N.existsSync(a)||N.mkdirSync(a,{recursive:true}),!N.existsSync(e))throw new I("FILE_NOT_FOUND",`Video file not found: ${e}`,"HIGH");let n=_.extname(e).toLowerCase();if(![".mp4",".avi",".mov",".webm"].includes(n))throw new I("VALIDATION_FAILED",`Invalid video format: ${n}`,"HIGH");let d=`cosmos_vid_${Date.now()}${n}`,r=_.join(i,d);try{return await N.promises.copyFile(e,r),console.log("Debug - AssetManager - Cosmos video processed:",{from:e,to:r,size:N.statSync(r).size}),r}catch(c){throw new I("FILE_OPERATION_FAILED",`Failed to process Cosmos video: ${c instanceof Error?c.message:String(c)}`,"HIGH",{originalError:c})}}async handleChatUploadCosmos(e,t){if(!N.existsSync(e))throw new I("FILE_NOT_FOUND",`Upload file not found: ${e}`,"HIGH");let i=_.extname(e).toLowerCase(),a=[".mp4",".avi",".mov",".webm"].includes(i),n=[".jpg",".jpeg",".png",".gif"].includes(i);if(console.log("Debug - AssetManager - Cosmos upload type:",{path:e,extension:i,isVideo:a,isImage:n}),a)return this.handleVideosCosmos(e);if(n)return this.handleImagesCosmos(e);throw new I("VALIDATION_FAILED",`Unsupported file type: ${i}`,"HIGH")}};var Y=(s,e)=>{console.log(`Debug - Cosmos Parser - ${s}:`,e);},he=async(s,e,t)=>{Y("Input",{hasText:!!s,textLength:s?.length,attachmentCount:e?.length,hasApiKey:false});let i={isVideo:false,isImage:false,isBase64:false},a=Ne.cwd().replace("/agent","");for(;!N.existsSync(_.join(a,"packages"))&&a!==_.parse(a).root;)a=_.dirname(a);if(Y("Workspace paths",{cwd:Ne.cwd(),workspaceRoot:a,hasPackagesDir:N.existsSync(_.join(a,"packages"))}),!s&&true)return i;if(s){let n=s.match(/\[MEDIA\](.*?)\[\/MEDIA\]/s),l=s.match(/\[QUERY\](.*?)\[\/QUERY\]/s);if(Y("Text matches",{hasMediaMatch:!!n,hasQueryMatch:!!l,mediaContent:n?.[1]?.trim(),queryContent:l?.[1]?.trim()}),n){let d=n[1].trim(),r=_.join("packages","plugin-nvidia-nim","src","assets","cosmos"),c=_.join(a,r),f=_.join(c,d);Y("Local file paths",{mediaFile:d,cosmosDir:r,fullCosmosDir:c,mediaPath:f}),i.mediaFile=f;let o=_.extname(d).toLowerCase();i.isVideo=[".mp4",".mov",".avi",".webm"].includes(o),i.isImage=[".jpg",".jpeg",".png",".gif",".webp"].includes(o);}l&&(i.query=l[1].trim());}return Y("Result",{hasMediaFile:!!i.mediaFile,isVideo:i.isVideo,isImage:i.isImage,isBase64:i.isBase64,hasQuery:!!i.query,fullPath:i.mediaFile}),i};var ae=O(),Xe=ae.NVIDIA_GRANULAR_LOG,E=(s,e)=>{Xe&&(elizaLogger.info(`[CosmosVision] ${s}`,e),console.log(`[CosmosVision] ${s}`,e?JSON.stringify(e,null,2):""));},ye=ae.NVIDIA_COSMOS_INVOKE_URL||"https://ai.api.nvidia.com/v1/vlm/nvidia/cosmos-nemotron-34b",Se=ae.NVIDIA_COSMOS_ASSET_URL||"https://api.nvcf.nvidia.com/v2/nvcf/assets";function Ze(s){let e=s.NVIDIA_NIM_API_KEY||process.env.TEST_NVCF_API_KEY;if(!e)throw new I("VALIDATION_FAILED","API key is missing. Please set NVIDIA_NIM_API_KEY or TEST_NVCF_API_KEY.","HIGH");return e}var B={png:["image/png","img"],jpg:["image/jpg","img"],jpeg:["image/jpeg","img"],mp4:["video/mp4","video"]};var et={name:"GET_COSMOS_DESCRIPTION",similes:["CHECK_COSMOS_DESCRIPTION","ANALYZE_COSMOS_DESCRIPTION","COSMOS_DESCRIPTION_CONTROL"],description:"Use NVIDIA Cosmos model to analyze and describe images or videos",examples:[[{user:"user",content:{text:`Analyze this image with the NVIDIA Cosmos [MEDIA]
sample.jpg
[/MEDIA]
[QUERY]
Describe what's happening in this image
[/QUERY]`,mediaPath:"sample.jpg"}},{user:"assistant",content:{text:"Scene Analysis: A person wearing a hard hat and safety vest is working in an industrial setting.",success:true,data:{response:"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.",analysis:{description:"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.",confidence:.92}}}}]],validate:async(s,e)=>{if(e.content?.type!=="GET_COSMOS_DESCRIPTION")return  true;E("Validating GET_COSMOS_DESCRIPTION action",{content:e.content});try{if(!e.content.text)throw new I("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return E("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_COSMOS_DESCRIPTION",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,t,i={},a)=>{E("Executing GET_COSMOS_DESCRIPTION action");try{let n=e.content,l=await V(s),d=x(l.NVIDIA_NIM_ENV),r=Ze(l);E("API key configuration",{hasKey:!!r,length:r?.length,source:l.NVIDIA_NIM_API_KEY?"config":process.env.TEST_NVCF_API_KEY?"env":"default"});let c=await he(n.text);if(E("Parsed prompt",c),!c.mediaFile)throw new I("VALIDATION_FAILED","No media file provided in the prompt","HIGH");let f=new F(l.NVIDIA_NIM_API_KEY);E("Making request to NVIDIA NIM API",{model:"nvidia/cosmos-nemotron-34b",query:c.query,mediaFile:c.mediaFile,isVideo:c.isVideo,isImage:c.isImage}),console.log("Debug - Network config",{baseVisionUrl:d.baseVisionUrl});try{let o;if(c.isVideo)E("Processing video file",{originalPath:c.mediaFile,type:"video"}),o=await f.handleVideosCosmos(c.mediaFile),E("Video file processed",{originalPath:c.mediaFile,processedPath:o});else if(c.isImage)E("Processing image file",{originalPath:c.mediaFile,type:"image"}),o=await f.handleImagesCosmos(c.mediaFile),E("Image file processed",{originalPath:c.mediaFile,processedPath:o});else {let k=_.join("packages","plugin-nvidia-nim","src","assets","cosmos");E("Processing media file using general handler",{originalPath:c.mediaFile,targetDir:k}),o=await f.handleChatUploadCosmos(c.mediaFile,k),E("Media file processed using general handler",{originalPath:c.mediaFile,processedPath:o});}E("Processing file extension",{mediaPath:o,fullPath:_.resolve(o)});let p=_.extname(o).toLowerCase().slice(1);if(!(p in B)){let k=`Unsupported file extension: ${p}`;throw E("File extension error",{ext:p,supportedExtensions:Object.keys(B)}),new Error(k)}E("File extension validated",{ext:p,mimeType:B[p][0],mediaType:B[p][1]});let A=N.readFileSync(o);E("File read",{size:A.length,mediaPath:o});let m="Reference media file",g={Authorization:`Bearer ${r}`,"Content-Type":"application/json",Accept:"application/json"},L={contentType:B[p][0],description:m};E("Initiating asset upload authorization",{headers:{...g,Authorization:"Bearer [REDACTED]"},postData:L});let{data:P}=await oe.post(Se,L,{headers:g});E("Asset upload authorized",{uploadUrl:P.uploadUrl,assetId:P.assetId});let G={"x-amz-meta-nvcf-asset-description":m,"content-type":B[p][0]};E("Uploading file to authorized URL",{uploadUrl:P.uploadUrl,headers:G,fileSize:A.length});let C=await oe.put(P.uploadUrl,A,{headers:G});if(C.status!==200){let k=`Asset upload failed: ${P.assetId}`;throw E("Upload failed",{status:C.status,assetId:P.assetId,response:C.data}),new Error(k)}let D=P.assetId;E("Asset upload successful",{assetId:D,status:C.status});let X=`<${B[p][1]} src="data:${B[p][0]};asset_id,${D}" />`,H=`${c.query||"Describe this"} ${X}`;E("Constructed media content",{mediaContent:X,fullPrompt:H});let Q=[{role:"user",content:H}],Z={Authorization:`Bearer ${r}`,"Content-Type":"application/json",Accept:"application/json","NVCF-INPUT-ASSET-REFERENCES":D,"NVCF-FUNCTION-ASSET-IDS":D},w={max_tokens:1024,temperature:.2,top_p:.7,seed:50,num_frames_per_inference:8,messages:Q,stream:!1,model:"nvidia/vila"};E("Preparing Cosmos API request",{url:ye,headers:{...Z,Authorization:"Bearer [REDACTED]"},payload:{...w,messages:Q}});let y=await oe.post(ye,w,{headers:Z});E("Received Cosmos API response",{status:y.status,headers:y.headers,data:y.data}),E("Initiating asset cleanup",{assetId:D}),await oe.delete(`${Se}/${D}`,{headers:{Authorization:`Bearer ${r}`}}),E("Asset cleanup completed",{assetId:D});let v=y.data.choices[0]?.message?.content||"",ee={...y.data,prompt_logprobs:null},j={description:v,confidence:.92};return E("Processing complete",{responseLength:v.length,success:!0,assetId:D}),a&&a({text:`Scene Analysis: ${v}`,success:!0,mediaPath:o,data:{response:v,analysis:j,raw:ee,assetId:D}}),!0}catch(o){throw E("Failed to get response from NVIDIA NIM",{error:o}),a&&a({text:`Error analyzing media: ${o instanceof Error?o.message:String(o)}`,success:!1,mediaPath:c.mediaFile,data:{error:o instanceof Error?o.message:String(o)}}),new I("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:o})}}catch(n){throw E("Failed to execute GET_COSMOS_DESCRIPTION action",{error:n}),new I("NETWORK_ERROR","Failed to execute GET_COSMOS_DESCRIPTION action","HIGH",{originalError:n})}}},Me=et;async function Ce(s,e,t){if(e&&e.length>0){let l=e[0];if(!l.url)throw new Error("Invalid media attachment: no URL found");if(t){let d=new F(t),r=_.join("packages","plugin-nvidia-nim","src","assets","deepfake"),c=await d.handleChatUpload(l.url,r);return {mediaFile:_.basename(c),isBase64:false}}return {mediaFile:l.url,isBase64:l.url.startsWith("data:image")}}let i=s.match(/\[IMAGE\]([\s\S]*?)\[\/IMAGE\]/);if(!i)throw new Error("Image file path or data is required");let a=i[1].trim(),n=a.startsWith("data:image");return {mediaFile:a,isBase64:n}}var ot=O(),nt=ot.NVIDIA_GRANULAR_LOG,U=(s,e)=>{nt&&(elizaLogger.info(`[DeepFakeDetection] ${s}`,e),console.log(`[DeepFakeDetection] ${s}`,e?JSON.stringify(e,null,2):""));},st={name:"GET_DEEP_FAKE",similes:["CHECK_DEEP_FAKE","ANALYZE_DEEP_FAKE","DEEP_FAKE_CONTROL"],description:"Use NVIDIA DeepFake detection model to analyze images for potential manipulation",examples:[[{user:"user",content:{text:`Check if this image is a deepfake please[IMAGE]
test_image.jpg
[/IMAGE]`,mediaPath:"test_image.jpg"}},{user:"assistant",content:{text:"DeepFake Analysis: Image contains 1 face(s). Face #1: 99.82% likely to be a deepfake.",success:true,data:{response:"Detected potential manipulation in the image",analysis:[{index:0,bounding_boxes:[{vertices:[{x:167.92,y:105.52},{x:327.76,y:327.61}],bbox_confidence:.9352,is_deepfake:.9982}],status:"SUCCESS"}]}}}]],validate:async(s,e)=>{if(e.content?.type!=="GET_DEEP_FAKE")return  true;U("Validating GET_DEEP_FAKE action",{content:e.content});try{if(!e.content.text)throw new I("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return U("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_DEEP_FAKE",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,t,i={},a)=>{U("Executing GET_DEEPFAKE action");try{let n=e.content;console.log("Debug - Full message content:",{fullContent:e.content,rawText:n?.text,type:e.content?.type,allKeys:Object.keys(e.content||{}),attachments:e.content?.attachments}),console.log("Debug - Message content details:",{hasText:!!n?.text,hasMediaFile:!!n?.mediaFile,hasAttachments:!!e.content?.attachments?.length,textContent:n?.text,mediaFile:n?.mediaFile,contentType:typeof n?.text,attachmentCount:e.content?.attachments?.length||0,firstAttachmentUrl:e.content?.attachments?.[0]?.url,firstAttachmentType:e.content?.attachments?.[0]?.contentType});let l=await V(s);console.log("Debug - Config validated:",{hasApiKey:!!l.NVIDIA_NIM_API_KEY,env:l.NVIDIA_NIM_ENV});let d=x(l.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!d?.baseUrl,baseUrl:d?.baseUrl}),console.log("Debug - Raw prompt:",{text:n.text,hasMediaFile:!!n.mediaFile,mediaFile:n.mediaFile,promptLength:n.text?.length,attachments:e.content?.attachments});let r=await Ce(n.text,e.content?.attachments,l.NVIDIA_NIM_API_KEY);console.log("Debug - Parsed content:",{hasMediaFile:!!r.mediaFile,mediaPath:r.mediaFile,mediaLength:r.mediaFile?.length,isBase64:r.isBase64});let c,f,o="",p,A;if(r.isBase64){for(console.log("Debug - Using base64 image from chat"),c=r.mediaFile.split("base64,")[1],f=Buffer.from(c,"base64"),p=process.cwd().replace("/agent","");!N.existsSync(_.join(p,"packages"))&&p!==_.parse(p).root;)p=_.dirname(p);A=_.join(p,"packages","plugin-nvidia-nim","src","assets","deepfake");let m=_.join(A,"temp");N.existsSync(m)||N.mkdirSync(m,{recursive:!0}),o=_.join(m,`temp_${Date.now()}.jpg`),N.writeFileSync(o,f);}else {for(p=process.cwd().replace("/agent","");!N.existsSync(_.join(p,"packages"))&&p!==_.parse(p).root;)p=_.dirname(p);console.log("Debug - Workspace detection:",{workspaceRoot:p,hasPackagesDir:N.existsSync(_.join(p,"packages"))}),A=_.join(p,"packages","plugin-nvidia-nim","src","assets","deepfake"),o=_.join(A,r.mediaFile);let m=_.resolve(o);console.log("Debug - File paths:",{workspaceRoot:p,deepfakeDir:A,mediaPath:o,absolutePath:m,cwd:process.cwd(),exists:N.existsSync(o),dirExists:N.existsSync(A)}),N.existsSync(A)||(console.log("Debug - Creating deepfake directory"),N.mkdirSync(A,{recursive:!0}));try{await N.promises.access(o,N.constants.R_OK),console.log("Debug - File is readable at path:",o);let g=await N.promises.stat(o);console.log("Debug - File stats:",{size:g.size,isFile:g.isFile(),permissions:g.mode});}catch(g){console.error("Debug - File access error:",{error:g instanceof Error?g.message:String(g),path:o});}if(!N.existsSync(o)){console.error(`Media file not found: ${o}`);try{let g=await N.promises.readdir(_.dirname(o));console.log("Debug - Directory contents:",{path:_.dirname(o),files:g});}catch(g){console.error("Debug - Failed to read directory:",g);}throw new I("FILE_NOT_FOUND",`Media file not found: ${o}`,"HIGH")}console.log("Debug - Reading file from path"),f=N.readFileSync(o),c=f.toString("base64");}U("Making request to NVIDIA NIM API",{model:"hive/deepfake-image-detection",hasMediaFile:!0,imageSize:f.length,isBase64Image:r.isBase64});try{let m,g={Authorization:`Bearer ${l.NVIDIA_NIM_API_KEY}`,Accept:"application/json"};if(c.length<18e4)m={input:[`data:image/jpeg;base64,${c}`]},g["Content-Type"]="application/json";else {let w=null,y=o;if(r.isBase64){let j=_.join(p,"packages","plugin-nvidia-nim","src","assets","deepfake","temp");N.existsSync(j)||N.mkdirSync(j,{recursive:!0}),w=_.join(j,`temp_${Date.now()}_large.jpg`),N.writeFileSync(w,f),y=w;}let ee=await new F(l.NVIDIA_NIM_API_KEY).uploadAsset(y);w&&N.existsSync(w)&&N.unlinkSync(w),m={input:[`data:image/jpeg;asset_id,${ee.assetId}`]},g["Content-Type"]="application/json",g["NVCF-INPUT-ASSET-REFERENCES"]=ee.assetId;}let L="https://ai.api.nvidia.com/v1/cv/hive/deepfake-image-detection";console.log("Debug - Making API request:",{url:L,payloadSize:JSON.stringify(m).length,hasAuth:!!g.Authorization});let{data:P}=await oe.post(L,m,{headers:g,maxBodyLength:1/0,maxContentLength:1/0});console.log("Debug - API Response received:",{status:"success",dataLength:JSON.stringify(P).length});let G=P;U("Successfully received response from NVIDIA NIM",{response:G});let C=G.data[0];U("Processing analysis results",{analysis:C});let D="";if(C.image){let w=`df_analysis_${Date.now()}.jpg`;D=_.join(A,w),N.existsSync(_.dirname(D))||N.mkdirSync(_.dirname(D),{recursive:!0});let y=Buffer.from(C.image.split(",")[1],"base64");N.writeFileSync(D,y),U("Saved processed image",{path:D});}let X=C.bounding_boxes.length,H=C.bounding_boxes.map((w,y)=>`Face #${y+1}: ${(w.is_deepfake*100).toFixed(2)}% likely to be a deepfake`),Q=`DeepFake Analysis: Image contains ${X} face(s). ${H.join(". ")}${D?`

Processed image saved to: ${D}`:""}`;return a&&a({text:Q,success:!0,mediaPath:o,data:{response:"Analyzed image for potential manipulation",analysis:[C],processedImage:D||null}}),!0}catch(m){throw U("Failed to get response from NVIDIA NIM",{error:m}),a&&a({text:`Error analyzing image: ${m instanceof Error?m.message:String(m)}`,success:!1,mediaPath:r.mediaFile,data:{error:m instanceof Error?m.message:String(m)}}),new I("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:m})}}catch(n){throw U("Failed to execute GET_DEEP_FAKE action",{error:n}),new I("NETWORK_ERROR","Failed to execute GET_DEEP_FAKE action","HIGH",{originalError:n})}}},Oe=st;async function Fe(s,e,t){try{if(e&&e.length>0){let l=e[0];if(!l.url)throw new Error("Invalid media attachment: no URL found");if(t){let d=new F(t),r=_.join("packages","plugin-nvidia-nim","src","assets","aiimage"),c=await d.handleChatUpload(l.url,r);return {mediaFile:_.basename(c),isBase64:!1}}return {mediaFile:l.url,isBase64:l.url.startsWith("data:image")}}let i=s.match(/\[IMAGE\]([\s\S]*?)\[\/IMAGE\]/);if(!i)throw new Error("Image file path or data is required");let a=i[1].trim(),n=a.startsWith("data:image");return {mediaFile:a,isBase64:n}}catch(i){throw i instanceof I?i:new I("PARSE_ERROR","Failed to parse AI image prompt","HIGH",{originalError:i})}}var at=O(),rt=at.NVIDIA_GRANULAR_LOG,z=(s,e)=>{rt&&(elizaLogger.info(`[AIImageDetection] ${s}`,e),console.log(`[AIImageDetection] ${s}`,e?JSON.stringify(e,null,2):""));},ct={name:"GET_AI_IMAGE",similes:["CHECK_AI_IMAGE","ANALYZE_AI_IMAGE","AI_IMAGE_CONTROL"],description:"Use NVIDIA AI Image detection model to analyze if images were generated by AI",examples:[[{user:"user",content:{text:`Check if this image is AI generated [IMAGE]
test_ai.jpg
[/IMAGE]  `,mediaPath:"test_ai.jpg"}},{user:"assistant",content:{text:"AI Image Analysis: Image is 99.94% likely to be AI-generated. Most likely source: Stable Diffusion XL (88.75% confidence).",success:true,data:{response:"Detected AI-generated image",analysis:[{index:0,is_ai_generated:.9994,possible_sources:{stablediffusionxl:.8875,midjourney:.0136,dalle:.0518},status:"SUCCESS"}]}}}]],validate:async(s,e)=>{if(e.content?.type!=="GET_AI_IMAGE")return  true;z("Validating GET_AI_IMAGE action",{content:e.content});try{if(!e.content.text)throw new I("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return z("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_AI_IMAGE",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,t,i={},a)=>{z("Executing GET_AI_IMAGE action");try{let n=e.content;console.log("Debug - Full message content:",{fullContent:e.content,rawText:n?.text,type:e.content?.type,allKeys:Object.keys(e.content||{}),attachments:e.content?.attachments}),console.log("Debug - Message content details:",{hasText:!!n?.text,hasMediaFile:!!n?.mediaFile,hasAttachments:!!e.content?.attachments?.length,textContent:n?.text,mediaFile:n?.mediaFile,contentType:typeof n?.text,attachmentCount:e.content?.attachments?.length||0,firstAttachmentUrl:e.content?.attachments?.[0]?.url,firstAttachmentType:e.content?.attachments?.[0]?.contentType});let l=await V(s);console.log("Debug - Config validated:",{hasApiKey:!!l.NVIDIA_NIM_API_KEY,env:l.NVIDIA_NIM_ENV});let d=x(l.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!d?.baseUrl,baseUrl:d?.baseUrl}),console.log("Debug - Raw prompt:",{text:n.text,hasMediaFile:!!n.mediaFile,mediaFile:n.mediaFile,promptLength:n.text?.length,attachments:e.content?.attachments});let r=await Fe(n.text,e.content?.attachments,l.NVIDIA_NIM_API_KEY);console.log("Debug - Parsed content:",{hasMediaFile:!!r.mediaFile,mediaPath:r.mediaFile,mediaLength:r.mediaFile?.length,isBase64:r.isBase64});let c,f,o="",p,A;if(r.isBase64){for(console.log("Debug - Using base64 image from chat"),c=r.mediaFile.split("base64,")[1],f=Buffer.from(c,"base64"),p=process.cwd().replace("/agent","");!N.existsSync(_.join(p,"packages"))&&p!==_.parse(p).root;)p=_.dirname(p);A=_.join(p,"packages","plugin-nvidia-nim","src","assets","aiimage");let m=_.join(A,"temp");N.existsSync(m)||N.mkdirSync(m,{recursive:!0}),o=_.join(m,`temp_${Date.now()}.jpg`),N.writeFileSync(o,f);}else {for(p=process.cwd().replace("/agent","");!N.existsSync(_.join(p,"packages"))&&p!==_.parse(p).root;)p=_.dirname(p);console.log("Debug - Workspace detection:",{workspaceRoot:p,hasPackagesDir:N.existsSync(_.join(p,"packages"))}),A=_.join(p,"packages","plugin-nvidia-nim","src","assets","aiimage"),o=_.join(A,r.mediaFile);let m=_.resolve(o);console.log("Debug - File paths:",{workspaceRoot:p,aiImageDir:A,mediaPath:o,absolutePath:m,cwd:process.cwd(),exists:N.existsSync(o),dirExists:N.existsSync(A)}),N.existsSync(A)||(console.log("Debug - Creating aiimage directory"),N.mkdirSync(A,{recursive:!0}));try{await N.promises.access(o,N.constants.R_OK),console.log("Debug - File is readable at path:",o);let g=await N.promises.stat(o);console.log("Debug - File stats:",{size:g.size,isFile:g.isFile(),permissions:g.mode});}catch(g){console.error("Debug - File access error:",{error:g instanceof Error?g.message:String(g),path:o});}if(!N.existsSync(o)){console.error(`Media file not found: ${o}`);try{let g=await N.promises.readdir(_.dirname(o));console.log("Debug - Directory contents:",{path:_.dirname(o),files:g});}catch(g){console.error("Debug - Failed to read directory:",g);}throw new I("FILE_NOT_FOUND",`Media file not found: ${o}`,"HIGH")}console.log("Debug - Reading file from path"),f=N.readFileSync(o),c=f.toString("base64");}z("Making request to NVIDIA NIM API",{model:"hive/ai-generated-image-detection",hasMediaFile:!0,imageSize:f.length,isBase64Image:r.isBase64});try{let m,g={Authorization:`Bearer ${l.NVIDIA_NIM_API_KEY}`,Accept:"application/json"};if(c.length<18e4)m={input:[`data:image/jpeg;base64,${c}`]},g["Content-Type"]="application/json";else {let y=null,v=o;if(r.isBase64){let k=_.join(p,"packages","plugin-nvidia-nim","src","assets","aiimage","temp");N.existsSync(k)||N.mkdirSync(k,{recursive:!0}),y=_.join(k,`temp_${Date.now()}_large.jpg`),N.writeFileSync(y,f),v=y;}let j=await new F(l.NVIDIA_NIM_API_KEY).uploadAsset(v);y&&N.existsSync(y)&&N.unlinkSync(y),m={input:[`data:image/jpeg;asset_id,${j.assetId}`]},g["Content-Type"]="application/json",g["NVCF-INPUT-ASSET-REFERENCES"]=j.assetId;}let L="https://ai.api.nvidia.com/v1/cv/hive/ai-generated-image-detection";console.log("Debug - Making API request:",{url:L,payloadSize:JSON.stringify(m).length,hasAuth:!!g.Authorization});let{data:P}=await oe.post(L,m,{headers:g,maxBodyLength:1/0,maxContentLength:1/0});console.log("Debug - API Response received:",{status:"success",dataLength:JSON.stringify(P).length});let G=P;z("Successfully received response from NVIDIA NIM",{response:G});let C=G.data[0];z("Processing analysis results",{analysis:C});let D=(C.is_ai_generated*100).toFixed(2),H=Object.entries(C.possible_sources).reduce((y,v)=>v[1]>y[1]?v:y),Q=(H[1]*100).toFixed(2),Z=`AI Image Analysis: Image is ${D}% likely to be AI-generated. ${H[0]!=="none"?`Most likely source: ${H[0]} (${Q}% confidence).`:"No specific AI source identified."}`;return a&&a({text:Z,success:!0,mediaPath:o,data:{response:"Analyzed image for AI generation",analysis:[C]}}),!0}catch(m){throw z("Failed to get response from NVIDIA NIM",{error:m}),a&&a({text:`Error analyzing image: ${m instanceof Error?m.message:String(m)}`,success:!1,mediaPath:o,data:{error:m instanceof Error?m.message:String(m)}}),new I("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:m})}}catch(n){throw z("Failed to execute GET_AI_IMAGE action",{error:n}),new I("NETWORK_ERROR","Failed to execute GET_AI_IMAGE action","HIGH",{originalError:n})}}},Ve=ct;var Le=lt({text:u.cyan("Initializing NVIDIA NIM Plugin..."),spinner:"dots12",color:"cyan"}).start(),re=[pe,ge,fe,Me,Oe,Ve],pt=O().NVIDIA_NIM_SPASH;if(pt){console.log(`
`+u.cyan("\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510")),console.log(u.cyan("\u2502")+u.yellow.bold("          NVIDIA NIM PLUGIN             ")+u.cyan(" \u2502")),console.log(u.cyan("\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524")),console.log(u.cyan("\u2502")+u.white("  Initializing NVIDIA NIM Services...    ")+u.cyan("\u2502")),console.log(u.cyan("\u2502")+u.white("  Version: 1.0.0                        ")+u.cyan("\u2502")),console.log(u.cyan("\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518")),Le.succeed(u.green("NVIDIA NIM Plugin initialized successfully!"));let s=new xe({head:[u.cyan("Action"),u.cyan("H"),u.cyan("V"),u.cyan("E"),u.cyan("Similes")],style:{head:[],border:["cyan"]}});re.forEach(t=>{s.push([u.white(t.name),typeof t.handler=="function"?u.green("\u2713"):u.red("\u2717"),typeof t.validate=="function"?u.green("\u2713"):u.red("\u2717"),t.examples?.length>0?u.green("\u2713"):u.red("\u2717"),u.gray(t.similes?.join(", ")||"none")]);}),console.log(`
`+s.toString());let e=new xe({style:{border:["cyan"]}});e.push([u.cyan("Plugin Status")],[u.white("Name    : ")+u.yellow("nvidia-nim")],[u.white("Actions : ")+u.green(re.length.toString())],[u.white("Status  : ")+u.green("Loaded & Ready")]),console.log(`
`+e.toString()+`
`);}else Le.stop();var It={name:"nvidia-nim",description:"NVIDIA NIM Plugin for AI Foundation Models integration",actions:re,evaluators:[]};var Bo=It;export{Bo as default,It as nvidiaNimPlugin};//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map