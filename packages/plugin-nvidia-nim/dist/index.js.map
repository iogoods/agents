{"version":3,"sources":["../src/environment.ts","../src/utils/offTopicPromptParser.ts","../src/errors/nimErrors.ts","../src/actions/actionGetTopic.ts","../src/utils/safetyPromptParser.ts","../src/actions/actionGetSafety.ts","../src/utils/jailbreakPromptParser.ts","../src/actions/actionGetJailBreak.ts","../src/actions/actionGetCosmos.ts","../src/utils/assetManager.ts","../src/utils/cosmosPromptParser.ts","../src/actions/actionGetDeepFake.ts","../src/utils/deepfakePromptParser.ts","../src/utils/aiImagePromptParser.ts","../src/actions/actionGetAIImage.ts","../src/index.ts"],"names":["ENV","NVIDIA_NIM_NETWORKS","nvidiaEnvSchema","z","getConfig","env","validateNvidiaNimConfig","runtime","envConfig","config","error","errorMessage","getNetworkConfig","parseOffTopicPrompt","prompt","defaultSystem","defaultUser","systemMatch","userMatch","NimError","code","message","severity","details","GRANULAR_LOG","logGranular","data","elizaLogger","getTopicAction","_runtime","_state","_options","callback","messageContent","networkConfig","systemContent","userContent","openai","OpenAI","messages","completion","response","offTopicResponse","actionGetTopic_default","parseSafetyPrompt","assistantMatch","getSafetyAction","userMessage","assistantMessage","safetyResponse","analysis","safetyStatus","actionGetSafety_default","parseJailbreakPrompt","promptMatch","getJailBreakAction","inputPrompt","axios","jailbreakStatus","score","scoreText","actionGetJailBreak_default","SUPPORTED_FORMATS","ASSETS_DIR","path","NVCF_ASSET_URL","AssetManager","apiKey","currentDir","assetsPath","fs","filePath","ext","mimeType","type","urlString","url","mime","contentType","extension","_","filename","mediaInput","description","fileData","headers","authorizeRes","assetId","file","uploadPath","targetDir","workspaceRoot","absoluteTargetDir","newFilename","newPath","cosmosImageDir","cosmosTempDir","cosmosVideoDir","isVideo","isImage","debugLog","parseCosmosPrompt","text","attachments","result","process","mediaMatch","queryMatch","mediaFile","cosmosDir","fullCosmosDir","mediaPath","invoke_url","kNvcfAssetUrl","getApiKey","kSupportedList","getCosmosDescriptionAction","parsedPrompt","assetManager","dataInput","postData","uploadHeaders","uploadResponse","mediaContent","promptContent","inferHeaders","payload","responseText","cosmosResponse","actionGetCosmos_default","parseDeepFakePrompt","imageAttachment","deepfakeDir","isBase64","getDeepFakeAction","imageB64","tempDir","absolutePath","stats","dirContents","dirError","tempPath","uploadedAsset","apiUrl","deepfakeResponse","processedImagePath","imageBuffer","faceCount","faceDescriptions","box","idx","analysisText","actionGetDeepFake_default","parseAIImagePrompt","aiImageDir","getAIImageAction","aiImageResponse","aiProbability","topSource","prev","curr","sourceConfidence","actionGetAIImage_default","spinner","ora","chalk","actions","NVIDIA_NIM_SPASH","actionTable","Table","action","statusTable","nvidiaNimPlugin","index_default"],"mappings":"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","file":"index.js","sourcesContent":["import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\n// Environment Variables\r\nlet ENV: string = \"production\";\r\n\r\n// NVIDIA NIM API Configuration\r\nconst NVIDIA_NIM_NETWORKS = {\r\n    production: {\r\n        baseUrl: process.env.NVIDIA_NIM_BASE_URL || \"https://integrate.api.nvidia.com/v1\",\r\n        apiKey: process.env.NVIDIA_NIM_API_KEY\r\n    },\r\n    sandbox: {\r\n        baseUrl: process.env.NVIDIA_NIM_SANDBOX_URL || \"https://integrate.api.nvidia.com/v1\",\r\n        apiKey: process.env.NVIDIA_NIM_SANDBOX_API_KEY\r\n    }\r\n} as const;\r\n\r\nexport const nvidiaEnvSchema = z.object({\r\n    NVIDIA_NIM_ENV: z.enum([\"production\", \"sandbox\"]).default(\"production\"),\r\n    NVIDIA_NIM_SPASH: z.boolean().default(false),\r\n    NVIDIA_NIM_API_KEY: z.string(),\r\n    NVIDIA_NIM_MAX_RETRIES: z.string().transform(Number).default(\"3\"),\r\n    NVIDIA_NIM_RETRY_DELAY: z.string().transform(Number).default(\"1000\"),\r\n    NVIDIA_NIM_TIMEOUT: z.string().transform(Number).default(\"5000\"),\r\n    NVIDIA_NIM_LOG_LEVEL: z.enum([\"error\", \"warn\", \"info\", \"debug\"]).default(\"info\"),\r\n    NVIDIA_GRANULAR_LOG: z.boolean().default(false),\r\n    NVIDIA_OFFTOPIC_SYSTEM: z.string().default(\"You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context.\"),\r\n    NVIDIA_OFFTOPIC_USER: z.string().default(\"Please analyze if this message is on-topic or off-topic.\"),\r\n    NVIDIA_NIM_BASE_VISION_URL: z.string().optional(),\r\n    NVIDIA_NIM_BASE_URL: z.string().optional(),\r\n    NVIDIA_COSMOS_INVOKE_URL: z.string().optional(),\r\n    NVIDIA_COSMOS_ASSET_URL: z.string().optional()\r\n});\r\n\r\nexport type NvidiaNimConfig = z.infer<typeof nvidiaEnvSchema>;\r\n\r\nexport function getConfig(\r\n    env: string | undefined | null = ENV ||\r\n        process.env.NVIDIA_NIM_ENV\r\n): NvidiaNimConfig {\r\n    ENV = env || \"production\";\r\n\r\n    return {\r\n        NVIDIA_NIM_ENV: (env as \"production\" | \"sandbox\") || \"production\",\r\n        NVIDIA_NIM_SPASH: process.env.NVIDIA_NIM_SPASH === \"true\" || false,\r\n        NVIDIA_NIM_API_KEY: process.env.NVIDIA_NIM_API_KEY || \"\",\r\n        NVIDIA_NIM_MAX_RETRIES: Number(process.env.NVIDIA_NIM_MAX_RETRIES || \"3\"),\r\n        NVIDIA_NIM_RETRY_DELAY: Number(process.env.NVIDIA_NIM_RETRY_DELAY || \"1000\"),\r\n        NVIDIA_NIM_TIMEOUT: Number(process.env.NVIDIA_NIM_TIMEOUT || \"5000\"),\r\n        NVIDIA_NIM_LOG_LEVEL: (process.env.NVIDIA_NIM_LOG_LEVEL as \"error\" | \"warn\" | \"info\" | \"debug\") || \"info\",\r\n        NVIDIA_GRANULAR_LOG: process.env.NVIDIA_GRANULAR_LOG === \"true\" || false,\r\n        NVIDIA_OFFTOPIC_SYSTEM: process.env.NVIDIA_OFFTOPIC_SYSTEM || \"You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context.\",\r\n        NVIDIA_OFFTOPIC_USER: process.env.NVIDIA_OFFTOPIC_USER || \"Please analyze if this message is on-topic or off-topic.\",\r\n        NVIDIA_NIM_BASE_VISION_URL: process.env.NVIDIA_NIM_BASE_VISION_URL,\r\n        NVIDIA_NIM_BASE_URL: process.env.NVIDIA_NIM_BASE_URL,\r\n        NVIDIA_COSMOS_INVOKE_URL: process.env.NVIDIA_COSMOS_INVOKE_URL,\r\n        NVIDIA_COSMOS_ASSET_URL: process.env.NVIDIA_COSMOS_ASSET_URL\r\n    };\r\n}\r\n\r\nexport async function validateNvidiaNimConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<NvidiaNimConfig> {\r\n    try {\r\n        const envConfig = getConfig(\r\n            runtime.getSetting(\"NVIDIA_NIM_ENV\") ?? undefined\r\n        );\r\n\r\n        // Add debug logging\r\n        console.log(\"Debug - API Key sources:\", {\r\n            env: process.env.NVIDIA_NIM_API_KEY ? \"present\" : \"missing\",\r\n            runtime: runtime.getSetting(\"NVIDIA_NIM_API_KEY\") ? \"present\" : \"missing\",\r\n            envConfig: envConfig.NVIDIA_NIM_API_KEY ? \"present\" : \"missing\"\r\n        });\r\n\r\n        const config = {\r\n            NVIDIA_NIM_ENV: process.env.NVIDIA_NIM_ENV || runtime.getSetting(\"NVIDIA_NIM_ENV\") || envConfig.NVIDIA_NIM_ENV,\r\n            NVIDIA_NIM_SPASH: process.env.NVIDIA_NIM_SPASH || runtime.getSetting(\"NVIDIA_NIM_SPASH\") || envConfig.NVIDIA_NIM_SPASH,\r\n            NVIDIA_NIM_API_KEY: runtime.getSetting(\"NVIDIA_NIM_API_KEY\") || process.env.NVIDIA_NIM_API_KEY || \"\",\r\n            NVIDIA_NIM_MAX_RETRIES: process.env.NVIDIA_NIM_MAX_RETRIES || runtime.getSetting(\"NVIDIA_NIM_MAX_RETRIES\") || envConfig.NVIDIA_NIM_MAX_RETRIES.toString(),\r\n            NVIDIA_NIM_RETRY_DELAY: process.env.NVIDIA_NIM_RETRY_DELAY || runtime.getSetting(\"NVIDIA_NIM_RETRY_DELAY\") || envConfig.NVIDIA_NIM_RETRY_DELAY.toString(),\r\n            NVIDIA_NIM_TIMEOUT: process.env.NVIDIA_NIM_TIMEOUT || runtime.getSetting(\"NVIDIA_NIM_TIMEOUT\") || envConfig.NVIDIA_NIM_TIMEOUT.toString(),\r\n            NVIDIA_NIM_LOG_LEVEL: process.env.NVIDIA_NIM_LOG_LEVEL || runtime.getSetting(\"NVIDIA_NIM_LOG_LEVEL\") || envConfig.NVIDIA_NIM_LOG_LEVEL,\r\n            NVIDIA_GRANULAR_LOG: process.env.NVIDIA_GRANULAR_LOG === \"true\" || runtime.getSetting(\"NVIDIA_GRANULAR_LOG\") === \"true\" || envConfig.NVIDIA_GRANULAR_LOG,\r\n            NVIDIA_OFFTOPIC_SYSTEM: process.env.NVIDIA_OFFTOPIC_SYSTEM || runtime.getSetting(\"NVIDIA_OFFTOPIC_SYSTEM\") || envConfig.NVIDIA_OFFTOPIC_SYSTEM,\r\n            NVIDIA_OFFTOPIC_USER: process.env.NVIDIA_OFFTOPIC_USER || runtime.getSetting(\"NVIDIA_OFFTOPIC_USER\") || envConfig.NVIDIA_OFFTOPIC_USER,\r\n            NVIDIA_NIM_BASE_VISION_URL: process.env.NVIDIA_NIM_BASE_VISION_URL || envConfig.NVIDIA_NIM_BASE_VISION_URL,\r\n            NVIDIA_NIM_BASE_URL: process.env.NVIDIA_NIM_BASE_URL || envConfig.NVIDIA_NIM_BASE_URL,\r\n            NVIDIA_COSMOS_INVOKE_URL: process.env.NVIDIA_COSMOS_INVOKE_URL || envConfig.NVIDIA_COSMOS_INVOKE_URL,\r\n            NVIDIA_COSMOS_ASSET_URL: process.env.NVIDIA_COSMOS_ASSET_URL || envConfig.NVIDIA_COSMOS_ASSET_URL\r\n        };\r\n\r\n        // Add validation logging\r\n        console.log(\"Debug - Final config:\", {\r\n            env: config.NVIDIA_NIM_ENV,\r\n            hasApiKey: !!config.NVIDIA_NIM_API_KEY,\r\n            apiKeyLength: config.NVIDIA_NIM_API_KEY.length\r\n        });\r\n\r\n        return nvidiaEnvSchema.parse(config);\r\n    } catch (error) {\r\n        const errorMessage = error instanceof Error ? error.message : String(error);\r\n        console.error(\"Config validation error:\", errorMessage);\r\n        throw new Error(`Failed to validate NVIDIA NIM configuration: ${errorMessage}`);\r\n    }\r\n}\r\n\r\n// Export network configurations\r\nexport const getNetworkConfig = (env: string = ENV) => {\r\n    const network = NVIDIA_NIM_NETWORKS[env as keyof typeof NVIDIA_NIM_NETWORKS];\r\n    return {\r\n        ...network,\r\n        baseVisionUrl: process.env.NVIDIA_NIM_BASE_VISION_URL || 'https://ai.api.nvidia.com/v1/vlm'\r\n    };\r\n};\r\n\r\n// AlphaFold2 Configuration\r\nexport const ALPHAFOLD2_CONFIG = {\r\n    API_KEY: process.env.NVIDIA_NIM_API_KEY,\r\n    NGC_KEY: process.env.NVIDIA_NGC_API_KEY,\r\n    API_URL: process.env.ALPHAFOLD_API_URL || 'https://health.api.nvidia.com/v1/biology/deepmind/alphafold2-multimer',\r\n    STATUS_URL: process.env.ALPHAFOLD_STATUS_URL || 'https://health.api.nvidia.com/v1/status',\r\n    SEQUENCES: {\r\n        SEQ1: process.env.SEQUENCE_ALPHA_FOLD2_1,\r\n        SEQ2: process.env.SEQUENCE_ALPHA_FOLD2_2\r\n    }\r\n} as const;\r\n\r\nexport interface NetworkConfig {\r\n    baseUrl: string;\r\n    baseVisionUrl: string;\r\n}\r\n","interface OffTopicParsedPrompt {\r\n    systemContent: string;\r\n    userContent: string;\r\n}\r\n\r\n/**\r\n * Parses a prompt string to extract system and user content for off-topic analysis\r\n * Format expected:\r\n * [SYSTEM]\r\n * System content here...\r\n * [/SYSTEM]\r\n *\r\n * [USER]\r\n * User content here...\r\n * [/USER]\r\n */\r\nexport function parseOffTopicPrompt(prompt: string, defaultSystem?: string, defaultUser?: string): OffTopicParsedPrompt {\r\n    const systemMatch = prompt.match(/\\[SYSTEM\\]([\\s\\S]*?)\\[\\/SYSTEM\\]/);\r\n    const userMatch = prompt.match(/\\[USER\\]([\\s\\S]*?)\\[\\/USER\\]/);\r\n\r\n    return {\r\n        systemContent: (systemMatch ? systemMatch[1].trim() : defaultSystem) || \"\",\r\n        userContent: (userMatch ? userMatch[1].trim() : defaultUser || prompt.trim()) || \"\"\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a formatted off-topic prompt string\r\n */\r\nexport function createOffTopicPrompt(systemContent: string, userContent: string): string {\r\n    return `[SYSTEM]\r\n${systemContent}\r\n[/SYSTEM]\r\n\r\n[USER]\r\n${userContent}\r\n[/USER]`;\r\n}","export enum ErrorSeverity {\r\n    LOW = \"LOW\",\r\n    MEDIUM = \"MEDIUM\",\r\n    HIGH = \"HIGH\"\r\n}\r\n\r\nexport enum NimErrorCode {\r\n    VALIDATION_FAILED = \"VALIDATION_FAILED\",\r\n    API_ERROR = \"API_ERROR\",\r\n    NETWORK_ERROR = \"NETWORK_ERROR\",\r\n    PARSE_ERROR = \"PARSE_ERROR\",\r\n    FILE_NOT_FOUND = \"FILE_NOT_FOUND\",\r\n    DOWNLOAD_ERROR = \"DOWNLOAD_ERROR\",\r\n    FILE_OPERATION_FAILED = \"FILE_OPERATION_FAILED\"\r\n}\r\n\r\nexport class NimError extends Error {\r\n    code: NimErrorCode;\r\n    severity: ErrorSeverity;\r\n    details?: unknown;\r\n\r\n    constructor(code: NimErrorCode, message: string, severity: ErrorSeverity, details?: unknown) {\r\n        super(message);\r\n        this.code = code;\r\n        this.severity = severity;\r\n        this.details = details;\r\n        this.name = \"NimError\";\r\n    }\r\n}\r\n","import { Action, elizaLogger } from \"@elizaos/core\";\r\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\r\nimport OpenAI from 'openai';\r\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\r\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\r\nimport { parseOffTopicPrompt } from \"../utils/offTopicPromptParser.js\";\r\nimport { OffTopicContent, OffTopicResponse } from \"../types/offTopic.js\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\r\n\r\n// Get configuration for granular logging\r\nconst config = getConfig();\r\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\r\n\r\n// Enhanced logging helper\r\nconst logGranular = (message: string, data?: unknown) => {\r\n    if (GRANULAR_LOG) {\r\n        elizaLogger.info(`[TopicControl] ${message}`, data);\r\n        console.log(`[TopicControl] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n    }\r\n};\r\n// Action definition\r\nexport const getTopicAction: Action = {\r\n    name: \"GET_OFFTOPIC\",\r\n    similes: [\"CHECK_OFFTOPIC\", \"ANALYZE_OFFTOPIC\", \"OFFTOPIC_CONTROL\"],\r\n    description: \"Use NVIDIA NIM API to analyze and control off-topic relevance\",\r\n    examples: [[\r\n        {\r\n            user: \"user\",\r\n            content: {\r\n                text: \"Check if the user message is on-topic or off-topic [SYSTEM]\\nYou are to act as an investor relations topic control system. Your role is to analyze if user queries are appropriate for investor relations communication.\\n[/SYSTEM]\\n\\n[USER]\\nCan you speculate on the potential impact of a recession on ABCs business?\\n[/USER]\",\r\n                userMessage: \"Can you speculate on the potential impact of a recession on ABCs business?\"\r\n            } as OffTopicContent\r\n        } as ActionExample,\r\n        {\r\n            user: \"assistant\",\r\n            content: {\r\n                text: \"Off-topic analysis: The message is off-topic as it requests speculation about future business impacts, which is not appropriate for investor relations communication.\",\r\n                success: true,\r\n                data: {\r\n                    response: \"off-topic\"\r\n                }\r\n            } as OffTopicContent\r\n        } as ActionExample\r\n    ]],\r\n\r\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n        if (message.content?.type !== \"GET_OFFTOPIC\") {\r\n            return true;\r\n        }\r\n\r\n        logGranular(\"Validating GET_OFFTOPIC action\", {\r\n            content: message.content\r\n        });\r\n\r\n        try {\r\n            const content = message.content as OffTopicContent;\r\n\r\n            if (!content.text) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"text content is required\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            logGranular(\"Validation failed\", { error });\r\n            elizaLogger.error(\"Validation failed for GET_OFFTOPIC\", {\r\n                error: error instanceof Error ? error.message : String(error)\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        logGranular(\"Executing GET_OFFTOPIC action\");\r\n\r\n        try {\r\n            const messageContent = message.content as OffTopicContent;\r\n            console.log(\"Debug - Message content:\", {\r\n                hasText: !!messageContent?.text,\r\n                hasUserMessage: !!messageContent?.userMessage\r\n            });\r\n\r\n            const config = await validateNvidiaNimConfig(runtime);\r\n            console.log(\"Debug - Config validated:\", {\r\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\r\n                env: config.NVIDIA_NIM_ENV\r\n            });\r\n\r\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\r\n            console.log(\"Debug - Network config:\", {\r\n                hasBaseUrl: !!networkConfig?.baseUrl,\r\n                baseUrl: networkConfig?.baseUrl\r\n            });\r\n\r\n            // Parse the prompt using our helper\r\n            const { systemContent, userContent } = parseOffTopicPrompt(\r\n                messageContent.text,\r\n                config.NVIDIA_OFFTOPIC_SYSTEM || \"\",\r\n                messageContent.userMessage || config.NVIDIA_OFFTOPIC_USER || \"\"\r\n            );\r\n\r\n            console.log(\"Debug - Parsed content:\", {\r\n                hasSystemContent: !!systemContent,\r\n                hasUserContent: !!userContent\r\n            });\r\n\r\n            // Initialize OpenAI client with NVIDIA configuration\r\n            const openai = new OpenAI({\r\n                apiKey: config.NVIDIA_NIM_API_KEY,\r\n                baseURL: networkConfig.baseUrl\r\n            });\r\n\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Core off-topic analysis logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            logGranular(\"Making request to NVIDIA NIM API\", {\r\n                model: \"nvidia/llama-3.1-nemoguard-8b-topic-control\",\r\n                systemContent,\r\n                userContent\r\n            });\r\n\r\n            try {\r\n                const messages: ChatCompletionMessageParam[] = [\r\n                    {\r\n                        role: \"system\",\r\n                        content: systemContent\r\n                    },\r\n                    {\r\n                        role: \"user\",\r\n                        content: userContent\r\n                    }\r\n                ];\r\n\r\n                const completion = await openai.chat.completions.create({\r\n                    model: \"nvidia/llama-3.1-nemoguard-8b-topic-control\",\r\n                    messages,\r\n                    temperature: 0.5,\r\n                    top_p: 1,\r\n                    max_tokens: 1024,\r\n                });\r\n\r\n                const response = completion.choices[0]?.message?.content || \"\";\r\n                const offTopicResponse: OffTopicResponse = {\r\n                    ...completion,\r\n                    prompt_logprobs: null\r\n                };\r\n\r\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\r\n                    response,\r\n                    raw: offTopicResponse\r\n                });\r\n            // ------------------------------------------------------------------------------------------------\r\n            // End core logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Callback to the framework to return the response\r\n            // ------------------------------------------------------------------------------------------------\r\n                if (callback) {\r\n                    callback({\r\n                        text: messageContent.text,\r\n                        userMessage: messageContent.userMessage,\r\n                        success: true\r\n                    } as OffTopicContent);\r\n                }\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Off-Topic Analysis: ${response}`,\r\n                        success: true,\r\n                        userMessage: messageContent.userMessage,\r\n                        data: {\r\n                            response,\r\n                            raw: offTopicResponse\r\n                        }\r\n                    } as OffTopicContent);\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error analyzing off-topic content: ${error instanceof Error ? error.message : String(error)}`,\r\n                        success: false,\r\n                        userMessage: messageContent.userMessage,\r\n                        data: {\r\n                            error: error instanceof Error ? error.message : String(error)\r\n                        }\r\n                    } as OffTopicContent);\r\n                }\r\n                throw new NimError(\r\n                    NimErrorCode.API_ERROR,\r\n                    \"Failed to get response from NVIDIA NIM\",\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        } catch (error) {\r\n            logGranular(\"Failed to execute GET_OFFTOPIC action\", { error });\r\n            throw new NimError(\r\n                NimErrorCode.NETWORK_ERROR,\r\n                \"Failed to execute GET_OFFTOPIC action\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default getTopicAction;\r\n\r\n","interface SafetyParsedPrompt {\r\n    userMessage: string;\r\n    assistantMessage?: string;\r\n}\r\n\r\n/**\r\n * Parses a prompt string to extract user and assistant messages for safety analysis\r\n * Format expected:\r\n * [USER]\r\n * User message here...\r\n * [/USER]\r\n *\r\n * [ASSISTANT]\r\n * Assistant message here...\r\n * [/ASSISTANT]\r\n */\r\nexport function parseSafetyPrompt(prompt: string): SafetyParsedPrompt {\r\n    const userMatch = prompt.match(/\\[USER\\]([\\s\\S]*?)\\[\\/USER\\]/);\r\n    const assistantMatch = prompt.match(/\\[ASSISTANT\\]([\\s\\S]*?)\\[\\/ASSISTANT\\]/);\r\n\r\n    if (!userMatch) {\r\n        throw new Error(\"User message is required in the prompt\");\r\n    }\r\n\r\n    return {\r\n        userMessage: userMatch[1].trim(),\r\n        assistantMessage: assistantMatch ? assistantMatch[1].trim() : undefined\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a formatted safety prompt string\r\n */\r\nexport function createSafetyPrompt(userMessage: string, assistantMessage?: string): string {\r\n    let prompt = `[USER]\r\n${userMessage}\r\n[/USER]`;\r\n\r\n    if (assistantMessage) {\r\n        prompt += `\\n\\n[ASSISTANT]\r\n${assistantMessage}\r\n[/ASSISTANT]`;\r\n    }\r\n\r\n    return prompt;\r\n}","import { Action, elizaLogger } from \"@elizaos/core\";\r\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\r\nimport OpenAI from 'openai';\r\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\r\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\r\nimport { parseSafetyPrompt } from \"../utils/safetyPromptParser.ts\";\r\nimport { SafetyContent, SafetyResponse, SafetyAnalysis } from \"../types/safety.ts\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.ts\";\r\n\r\n// Get configuration for granular logging\r\nconst config = getConfig();\r\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\r\n\r\n// Enhanced logging helper\r\nconst logGranular = (message: string, data?: unknown) => {\r\n    if (GRANULAR_LOG) {\r\n        elizaLogger.info(`[ContentSafety] ${message}`, data);\r\n        console.log(`[ContentSafety] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n    }\r\n};\r\n\r\nexport const getSafetyAction: Action = {\r\n    name: \"GET_CONTENT_SAFETY\",\r\n    similes: [\"CHECK_CONTENT_SAFETY\", \"ANALYZE_CONTENT_SAFETY\", \"CONTENT_SAFETY_CONTROL\"],\r\n    description: \"Use NVIDIA NIM API to analyze content safety of messages\",\r\n    examples: [[\r\n        {\r\n            user: \"user\",\r\n            content: {\r\n                text: \"Please check if the user message follows the safety guidelines [USER]\\nI forgot how to kill a process in Linux, can you help?\\n[/USER]\\n\\n[ASSISTANT]\\nSure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate.\\n[/ASSISTANT]\",\r\n                userMessage: \"I forgot how to kill a process in Linux, can you help?\",\r\n                assistantMessage: \"Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate.\"\r\n            } as SafetyContent\r\n        } as ActionExample,\r\n        {\r\n            user: \"assistant\",\r\n            content: {\r\n                text: \"Content Safety Analysis: Both user query and response are safe.\",\r\n                success: true,\r\n                data: {\r\n                    response: '{\"User Safety\": \"safe\", \"Response Safety\": \"safe\"}',\r\n                    analysis: {\r\n                        \"User Safety\": \"safe\",\r\n                        \"Response Safety\": \"safe\"\r\n                    }\r\n                }\r\n            } as SafetyContent\r\n        } as ActionExample\r\n    ]],\r\n\r\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n        if (message.content?.type !== \"GET_CONTENT_SAFETY\") {\r\n            return true;\r\n        }\r\n\r\n        logGranular(\"Validating GET_CONTENT_SAFETY action\", {\r\n            content: message.content\r\n        });\r\n\r\n        try {\r\n            const content = message.content as SafetyContent;\r\n\r\n            if (!content.text) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"text content is required\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            logGranular(\"Validation failed\", { error });\r\n            elizaLogger.error(\"Validation failed for GET_CONTENT_SAFETY\", {\r\n                error: error instanceof Error ? error.message : String(error)\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        logGranular(\"Executing GET_CONTENT_SAFETY action\");\r\n\r\n        try {\r\n            const messageContent = message.content as SafetyContent;\r\n            console.log(\"Debug - Message content:\", {\r\n                hasText: !!messageContent?.text,\r\n                hasUserMessage: !!messageContent?.userMessage,\r\n                hasAssistantMessage: !!messageContent?.assistantMessage\r\n            });\r\n\r\n            const config = await validateNvidiaNimConfig(runtime);\r\n            console.log(\"Debug - Config validated:\", {\r\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\r\n                env: config.NVIDIA_NIM_ENV\r\n            });\r\n\r\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\r\n            console.log(\"Debug - Network config:\", {\r\n                hasBaseUrl: !!networkConfig?.baseUrl,\r\n                baseUrl: networkConfig?.baseUrl\r\n            });\r\n\r\n            // Parse the prompt using our helper\r\n            const { userMessage, assistantMessage } = parseSafetyPrompt(messageContent.text);\r\n            console.log(\"Debug - Parsed content:\", {\r\n                hasUserMessage: !!userMessage,\r\n                hasAssistantMessage: !!assistantMessage,\r\n                userMessageLength: userMessage?.length,\r\n                assistantMessageLength: assistantMessage?.length\r\n            });\r\n\r\n            // Initialize OpenAI client with NVIDIA configuration\r\n            const openai = new OpenAI({\r\n                apiKey: config.NVIDIA_NIM_API_KEY,\r\n                baseURL: networkConfig.baseUrl\r\n            });\r\n\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Core content safety analysis logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            logGranular(\"Making request to NVIDIA NIM API\", {\r\n                model: \"nvidia/llama-3.1-nemoguard-8b-content-safety\",\r\n                userMessage,\r\n                assistantMessage\r\n            });\r\n\r\n            try {\r\n                const messages: ChatCompletionMessageParam[] = [\r\n                    {\r\n                        role: \"user\",\r\n                        content: userMessage\r\n                    }\r\n                ];\r\n\r\n                if (assistantMessage) {\r\n                    messages.push({\r\n                        role: \"assistant\",\r\n                        content: assistantMessage\r\n                    });\r\n                }\r\n\r\n                const completion = await openai.chat.completions.create({\r\n                    model: \"nvidia/llama-3.1-nemoguard-8b-content-safety\",\r\n                    messages,\r\n                    temperature: 0.5,\r\n                    top_p: 1,\r\n                    max_tokens: 1024,\r\n                });\r\n\r\n                const response = completion.choices[0]?.message?.content || \"\";\r\n                const safetyResponse: SafetyResponse = {\r\n                    ...completion,\r\n                    prompt_logprobs: null\r\n                };\r\n\r\n                // Parse the JSON response\r\n                let analysis: SafetyAnalysis | undefined;\r\n                try {\r\n                    analysis = JSON.parse(response) as SafetyAnalysis;\r\n                } catch (error) {\r\n                    throw new NimError(\r\n                        NimErrorCode.PARSE_ERROR,\r\n                        \"Failed to parse safety analysis response\",\r\n                        ErrorSeverity.HIGH,\r\n                        { response }\r\n                    );\r\n                }\r\n\r\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\r\n                    response,\r\n                    analysis,\r\n                    raw: safetyResponse\r\n                });\r\n            // ------------------------------------------------------------------------------------------------\r\n            // End core logic\r\n            // ------------------------------------------------------------------------------------------------\r\n\r\n                if (callback) {\r\n                    const safetyStatus = analysis?.[\"User Safety\"] === \"safe\" && analysis?.[\"Response Safety\"] === \"safe\"\r\n                        ? \"Both user query and response are safe\"\r\n                        : \"Safety concerns detected\";\r\n\r\n                    callback({\r\n                        text: `Content Safety Analysis: ${safetyStatus}`,\r\n                        success: true,\r\n                        userMessage,\r\n                        assistantMessage,\r\n                        data: {\r\n                            response,\r\n                            analysis,\r\n                            raw: safetyResponse\r\n                        }\r\n                    } as SafetyContent);\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error analyzing content safety: ${error instanceof Error ? error.message : String(error)}`,\r\n                        success: false,\r\n                        userMessage,\r\n                        assistantMessage,\r\n                        data: {\r\n                            error: error instanceof Error ? error.message : String(error)\r\n                        }\r\n                    } as SafetyContent);\r\n                }\r\n                throw new NimError(\r\n                    NimErrorCode.API_ERROR,\r\n                    \"Failed to get response from NVIDIA NIM\",\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        } catch (error) {\r\n            logGranular(\"Failed to execute GET_CONTENT_SAFETY action\", { error });\r\n            throw new NimError(\r\n                NimErrorCode.NETWORK_ERROR,\r\n                \"Failed to execute GET_CONTENT_SAFETY action\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default getSafetyAction;\r\n\r\n","interface JailbreakParsedPrompt {\r\n    inputPrompt: string;\r\n}\r\n\r\n/**\r\n * Parses a prompt string to extract the input prompt for jailbreak detection\r\n * Format expected:\r\n * [PROMPT]\r\n * Input prompt text here...\r\n * [/PROMPT]\r\n */\r\nexport function parseJailbreakPrompt(prompt: string): JailbreakParsedPrompt {\r\n    const promptMatch = prompt.match(/\\[PROMPT\\]([\\s\\S]*?)\\[\\/PROMPT\\]/);\r\n\r\n    if (!promptMatch) {\r\n        // If no explicit prompt markers, treat the entire text as the prompt\r\n        return {\r\n            inputPrompt: prompt.trim()\r\n        };\r\n    }\r\n\r\n    return {\r\n        inputPrompt: promptMatch[1].trim()\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a formatted jailbreak detection prompt string\r\n */\r\nexport function createJailbreakPrompt(inputPrompt: string): string {\r\n    return `[PROMPT]\r\n${inputPrompt}\r\n[/PROMPT]`;\r\n}","import { Action, elizaLogger } from \"@elizaos/core\";\r\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\r\nimport OpenAI from 'openai';\r\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\r\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.ts\";\r\nimport { parseJailbreakPrompt } from \"../utils/jailbreakPromptParser.ts\";\r\nimport { JailbreakContent, JailbreakResponse, JailbreakAnalysis } from \"../types/jailbreak.ts\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.ts\";\r\nimport axios from 'axios';\r\n\r\n// Get configuration for granular logging\r\nconst config = getConfig();\r\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\r\n\r\n// Enhanced logging helper\r\nconst logGranular = (message: string, data?: unknown) => {\r\n    if (GRANULAR_LOG) {\r\n        elizaLogger.info(`[JailbreakDetection] ${message}`, data);\r\n        console.log(`[JailbreakDetection] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n    }\r\n};\r\n\r\nexport const getJailBreakAction: Action = {\r\n    name: \"GET_JAILBREAK\",\r\n    similes: [\"CHECK_JAILBREAK\", \"ANALYZE_JAILBREAK\", \"JAILBREAK_CONTROL\"],\r\n    description: \"Use NVIDIA NIM API to detect potential jailbreak attempts in prompts\",\r\n    examples: [[\r\n        {\r\n            user: \"user\",\r\n            content: {\r\n                text: \"Analyze this prompt for potential jailbreak attempts [PROMPT]\\nWhat is the capital of France?\\n[/PROMPT]\",\r\n                inputPrompt: \"What is the capital of France?\"\r\n            } as JailbreakContent\r\n        } as ActionExample,\r\n        {\r\n            user: \"assistant\",\r\n            content: {\r\n                text: \"Jailbreak Analysis: No jailbreak attempt detected.\",\r\n                success: true,\r\n                data: {\r\n                    response: '{\"jailbreak\": \"false\", \"score\": \"0.0123456789\"}',\r\n                    analysis: {\r\n                        jailbreak: \"false\",\r\n                        score: \"0.0123456789\"\r\n                    }\r\n                }\r\n            } as JailbreakContent\r\n        } as ActionExample\r\n    ]],\r\n\r\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n        if (message.content?.type !== \"GET_JAILBREAK\") {\r\n            return true;\r\n        }\r\n\r\n        logGranular(\"Validating GET_JAILBREAK action\", {\r\n            content: message.content\r\n        });\r\n\r\n        try {\r\n            const content = message.content as JailbreakContent;\r\n\r\n            if (!content.text) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"text content is required\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            logGranular(\"Validation failed\", { error });\r\n            elizaLogger.error(\"Validation failed for GET_JAILBREAK\", {\r\n                error: error instanceof Error ? error.message : String(error)\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        logGranular(\"Executing GET_JAILBREAK action\");\r\n\r\n        try {\r\n            const messageContent = message.content as JailbreakContent;\r\n            console.log(\"Debug - Message content:\", {\r\n                hasText: !!messageContent?.text,\r\n                hasInputPrompt: !!messageContent?.inputPrompt\r\n            });\r\n\r\n            const config = await validateNvidiaNimConfig(runtime);\r\n            console.log(\"Debug - Config validated:\", {\r\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\r\n                env: config.NVIDIA_NIM_ENV\r\n            });\r\n\r\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\r\n            console.log(\"Debug - Network config:\", {\r\n                hasBaseUrl: !!networkConfig?.baseUrl,\r\n                baseUrl: networkConfig?.baseUrl\r\n            });\r\n\r\n            // Parse the prompt using our helper\r\n            const { inputPrompt } = parseJailbreakPrompt(messageContent.text);\r\n            console.log(\"Debug - Parsed content:\", {\r\n                hasInputPrompt: !!inputPrompt,\r\n                promptLength: inputPrompt?.length\r\n            });\r\n\r\n            // Initialize OpenAI client with NVIDIA configuration\r\n            const openai = new OpenAI({\r\n                apiKey: config.NVIDIA_NIM_API_KEY,\r\n                baseURL: networkConfig.baseUrl\r\n            });\r\n\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Core jailbreak detection logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            logGranular(\"Making request to NVIDIA NIM API\", {\r\n                model: \"nvidia/nemoguard-jailbreak-detect\",\r\n                inputPrompt\r\n            });\r\n\r\n            try {\r\n                const messages: ChatCompletionMessageParam[] = [\r\n                    {\r\n                        role: \"user\",\r\n                        content: inputPrompt\r\n                    }\r\n                ];\r\n\r\n                // Make the API request\r\n                const { data: response } = await axios.post(\r\n                    'https://ai.api.nvidia.com/v1/security/nvidia/nemoguard-jailbreak-detect',\r\n                    {\r\n                        input: inputPrompt\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            \"Authorization\": `Bearer ${config.NVIDIA_NIM_API_KEY}`,\r\n                            \"Accept\": \"application/json\",\r\n                            \"Content-Type\": \"application/json\"\r\n                        }\r\n                    }\r\n                );\r\n\r\n                // The response is already a JavaScript object, no need to parse\r\n                const analysis: JailbreakAnalysis = {\r\n                    jailbreak: response.jailbreak.toString(),\r\n                    score: response.score.toString()\r\n                };\r\n\r\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\r\n                    response,\r\n                    analysis\r\n                });\r\n\r\n                if (callback) {\r\n                    const jailbreakStatus = response.jailbreak\r\n                        ? \"Potential jailbreak attempt detected\"\r\n                        : \"No jailbreak attempt detected\";\r\n\r\n                    const score = (response.score * 100).toFixed(2);\r\n                    const scoreText = response.jailbreak\r\n                        ? `Jailbreak confidence: ${score}%`\r\n                        : `Safe with ${score}% confidence`;\r\n\r\n                    callback({\r\n                        text: `Jailbreak Analysis: ${jailbreakStatus}. ${scoreText}`,\r\n                        success: true,\r\n                        inputPrompt,\r\n                        data: {\r\n                            response: JSON.stringify(response),\r\n                            analysis,\r\n                            raw: response\r\n                        }\r\n                    } as JailbreakContent);\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error analyzing jailbreak: ${error instanceof Error ? error.message : String(error)}`,\r\n                        success: false,\r\n                        inputPrompt,\r\n                        data: {\r\n                            error: error instanceof Error ? error.message : String(error)\r\n                        }\r\n                    } as JailbreakContent);\r\n                }\r\n                throw new NimError(\r\n                    NimErrorCode.API_ERROR,\r\n                    \"Failed to get response from NVIDIA NIM\",\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        } catch (error) {\r\n            logGranular(\"Failed to execute GET_JAILBREAK action\", { error });\r\n            throw new NimError(\r\n                NimErrorCode.NETWORK_ERROR,\r\n                \"Failed to execute GET_JAILBREAK action\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default getJailBreakAction;\r\n\r\n","import { Action, elizaLogger } from \"@elizaos/core\";\r\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\r\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\r\nimport { parseCosmosPrompt } from \"../utils/cosmosPromptParser.js\";\r\nimport { CosmosContent, CosmosResponse, CosmosAnalysis } from \"../types/cosmos.js\";\r\nimport { AssetManager } from \"../utils/assetManager.js\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\r\nimport path from 'path';\r\nimport axios from 'axios';\r\nimport fs from 'fs';\r\n\r\n\r\n// Get configuration for granular logging\r\nconst config = getConfig();\r\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\r\n\r\n// Enhanced logging helper\r\nconst logGranular = (message: string, data?: unknown) => {\r\n    if (GRANULAR_LOG) {\r\n        elizaLogger.info(`[CosmosVision] ${message}`, data);\r\n        console.log(`[CosmosVision] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n    }\r\n};\r\n\r\n// Get URLs from environment config\r\nconst invoke_url = config.NVIDIA_COSMOS_INVOKE_URL || \"https://ai.api.nvidia.com/v1/vlm/nvidia/cosmos-nemotron-34b\";\r\nconst kNvcfAssetUrl = config.NVIDIA_COSMOS_ASSET_URL || \"https://api.nvcf.nvidia.com/v2/nvcf/assets\";\r\n\r\n// Get API key with proper error handling\r\nfunction getApiKey(config: any): string {\r\n    const apiKey = config.NVIDIA_NIM_API_KEY || process.env.TEST_NVCF_API_KEY;\r\n    if (!apiKey) {\r\n        throw new NimError(\r\n            NimErrorCode.VALIDATION_FAILED,\r\n            \"API key is missing. Please set NVIDIA_NIM_API_KEY or TEST_NVCF_API_KEY.\",\r\n            ErrorSeverity.HIGH\r\n        );\r\n    }\r\n    return apiKey;\r\n}\r\n\r\n// Type definitions for supported formats\r\ntype SupportedExtension = 'png' | 'jpg' | 'jpeg' | 'mp4';\r\ntype MediaInfo = [string, string]; // [mimeType, mediaType]\r\n\r\nconst kSupportedList: Record<SupportedExtension, MediaInfo> = {\r\n    \"png\": [\"image/png\", \"img\"],\r\n    \"jpg\": [\"image/jpg\", \"img\"],\r\n    \"jpeg\": [\"image/jpeg\", \"img\"],\r\n    \"mp4\": [\"video/mp4\", \"video\"]\r\n} as const;\r\n\r\n// Get file extension\r\nfunction getExtension(filename: string): string {\r\n    const ext = path.extname(filename).toLowerCase();\r\n    return ext.slice(1); // remove the leading dot\r\n}\r\n\r\n// Get MIME type\r\nfunction mimeType(ext: SupportedExtension): string {\r\n    return kSupportedList[ext][0];\r\n}\r\n\r\n// Get media type\r\nfunction mediaType(ext: SupportedExtension): string {\r\n    return kSupportedList[ext][1];\r\n}\r\n\r\nexport const getCosmosDescriptionAction: Action = {\r\n    name: \"GET_COSMOS_DESCRIPTION\",\r\n    similes: [\"CHECK_COSMOS_DESCRIPTION\", \"ANALYZE_COSMOS_DESCRIPTION\", \"COSMOS_DESCRIPTION_CONTROL\"],\r\n    description: \"Use NVIDIA Cosmos model to analyze and describe images or videos\",\r\n    examples: [[\r\n        {\r\n            user: \"user\",\r\n            content: {\r\n                text: \"Analyze this image with the NVIDIA Cosmos [MEDIA]\\nsample.jpg\\n[/MEDIA]\\n[QUERY]\\nDescribe what's happening in this image\\n[/QUERY]\",\r\n                mediaPath: \"sample.jpg\"\r\n            } as CosmosContent\r\n        } as ActionExample,\r\n        {\r\n            user: \"assistant\",\r\n            content: {\r\n                text: \"Scene Analysis: A person wearing a hard hat and safety vest is working in an industrial setting.\",\r\n                success: true,\r\n                data: {\r\n                    response: \"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.\",\r\n                    analysis: {\r\n                        description: \"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.\",\r\n                        confidence: 0.92\r\n                    }\r\n                }\r\n            } as CosmosContent\r\n        } as ActionExample\r\n    ]],\r\n\r\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n        if (message.content?.type !== \"GET_COSMOS_DESCRIPTION\") {\r\n            return true;\r\n        }\r\n\r\n        logGranular(\"Validating GET_COSMOS_DESCRIPTION action\", {\r\n            content: message.content\r\n        });\r\n\r\n        try {\r\n            const content = message.content as CosmosContent;\r\n\r\n            if (!content.text) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"text content is required\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            logGranular(\"Validation failed\", { error });\r\n            elizaLogger.error(\"Validation failed for GET_COSMOS_DESCRIPTION\", {\r\n                error: error instanceof Error ? error.message : String(error)\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        logGranular(\"Executing GET_COSMOS_DESCRIPTION action\");\r\n\r\n        try {\r\n            const messageContent = message.content as CosmosContent;\r\n            const config = await validateNvidiaNimConfig(runtime);\r\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\r\n            const apiKey = getApiKey(config);\r\n\r\n            logGranular(\"API key configuration\", {\r\n                hasKey: !!apiKey,\r\n                length: apiKey?.length,\r\n                source: config.NVIDIA_NIM_API_KEY ? 'config' : process.env.TEST_NVCF_API_KEY ? 'env' : 'default'\r\n            });\r\n\r\n            // Parse the prompt using our helper\r\n            const parsedPrompt = await parseCosmosPrompt(messageContent.text);\r\n            logGranular(\"Parsed prompt\", parsedPrompt);\r\n\r\n            if (!parsedPrompt.mediaFile) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"No media file provided in the prompt\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            // Initialize asset manager\r\n            const assetManager = new AssetManager(config.NVIDIA_NIM_API_KEY);\r\n\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Core Cosmos vision analysis logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            logGranular(\"Making request to NVIDIA NIM API\", {\r\n                model: \"nvidia/cosmos-nemotron-34b\",\r\n                query: parsedPrompt.query,\r\n                mediaFile: parsedPrompt.mediaFile,\r\n                isVideo: parsedPrompt.isVideo,\r\n                isImage: parsedPrompt.isImage\r\n            });\r\n\r\n            console.log(\"Debug - Network config\", {\r\n                baseVisionUrl: networkConfig.baseVisionUrl\r\n            });\r\n\r\n            try {\r\n                // Handle the media file using new Cosmos-specific methods\r\n                let mediaPath;\r\n                if (parsedPrompt.isVideo) {\r\n                    logGranular(\"Processing video file\", {\r\n                        originalPath: parsedPrompt.mediaFile,\r\n                        type: 'video'\r\n                    });\r\n                    mediaPath = await assetManager.handleVideosCosmos(parsedPrompt.mediaFile);\r\n                    logGranular(\"Video file processed\", {\r\n                        originalPath: parsedPrompt.mediaFile,\r\n                        processedPath: mediaPath\r\n                    });\r\n                } else if (parsedPrompt.isImage) {\r\n                    logGranular(\"Processing image file\", {\r\n                        originalPath: parsedPrompt.mediaFile,\r\n                        type: 'image'\r\n                    });\r\n                    mediaPath = await assetManager.handleImagesCosmos(parsedPrompt.mediaFile);\r\n                    logGranular(\"Image file processed\", {\r\n                        originalPath: parsedPrompt.mediaFile,\r\n                        processedPath: mediaPath\r\n                    });\r\n                } else {\r\n                    // Use the general handler if type is not specified\r\n                    const cosmosDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\r\n                    logGranular(\"Processing media file using general handler\", {\r\n                        originalPath: parsedPrompt.mediaFile,\r\n                        targetDir: cosmosDir\r\n                    });\r\n                    mediaPath = await assetManager.handleChatUploadCosmos(parsedPrompt.mediaFile, cosmosDir);\r\n                    logGranular(\"Media file processed using general handler\", {\r\n                        originalPath: parsedPrompt.mediaFile,\r\n                        processedPath: mediaPath\r\n                    });\r\n                }\r\n\r\n                logGranular(\"Processing file extension\", {\r\n                    mediaPath,\r\n                    fullPath: path.resolve(mediaPath)\r\n                });\r\n\r\n                const ext = path.extname(mediaPath).toLowerCase().slice(1) as SupportedExtension;\r\n                if (!(ext in kSupportedList)) {\r\n                    const error = `Unsupported file extension: ${ext}`;\r\n                    logGranular(\"File extension error\", {\r\n                        ext,\r\n                        supportedExtensions: Object.keys(kSupportedList)\r\n                    });\r\n                    throw new Error(error);\r\n                }\r\n\r\n                logGranular(\"File extension validated\", {\r\n                    ext,\r\n                    mimeType: kSupportedList[ext][0],\r\n                    mediaType: kSupportedList[ext][1]\r\n                });\r\n\r\n                const dataInput = fs.readFileSync(mediaPath);\r\n                logGranular(\"File read\", {\r\n                    size: dataInput.length,\r\n                    mediaPath\r\n                });\r\n\r\n                const description = \"Reference media file\";\r\n\r\n                // First API call to authorize asset upload - exact same as nvidia.ts\r\n                const headers = {\r\n                    \"Authorization\": `Bearer ${apiKey}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Accept\": \"application/json\"\r\n                };\r\n\r\n                const postData = {\r\n                    contentType: kSupportedList[ext][0],\r\n                    description: description\r\n                };\r\n\r\n                logGranular(\"Initiating asset upload authorization\", {\r\n                    headers: {\r\n                        ...headers,\r\n                        \"Authorization\": \"Bearer [REDACTED]\"\r\n                    },\r\n                    postData\r\n                });\r\n\r\n                const { data: authorizeRes } = await axios.post(kNvcfAssetUrl, postData, { headers });\r\n\r\n                logGranular(\"Asset upload authorized\", {\r\n                    uploadUrl: authorizeRes.uploadUrl,\r\n                    assetId: authorizeRes.assetId\r\n                });\r\n\r\n                // Second API call to upload the file - exact same as nvidia.ts\r\n                const uploadHeaders = {\r\n                    \"x-amz-meta-nvcf-asset-description\": description,\r\n                    \"content-type\": kSupportedList[ext][0]\r\n                };\r\n\r\n                logGranular(\"Uploading file to authorized URL\", {\r\n                    uploadUrl: authorizeRes.uploadUrl,\r\n                    headers: uploadHeaders,\r\n                    fileSize: dataInput.length\r\n                });\r\n\r\n                const uploadResponse = await axios.put(authorizeRes.uploadUrl, dataInput, {\r\n                    headers: uploadHeaders\r\n                });\r\n\r\n                if (uploadResponse.status !== 200) {\r\n                    const error = `Asset upload failed: ${authorizeRes.assetId}`;\r\n                    logGranular(\"Upload failed\", {\r\n                        status: uploadResponse.status,\r\n                        assetId: authorizeRes.assetId,\r\n                        response: uploadResponse.data\r\n                    });\r\n                    throw new Error(error);\r\n                }\r\n\r\n                const assetId = authorizeRes.assetId;\r\n                logGranular(\"Asset upload successful\", {\r\n                    assetId,\r\n                    status: uploadResponse.status\r\n                });\r\n\r\n                // Construct media content exactly as in nvidia.ts\r\n                const mediaContent = `<${kSupportedList[ext][1]} src=\"data:${kSupportedList[ext][0]};asset_id,${assetId}\" />`;\r\n                const promptContent = `${parsedPrompt.query || 'Describe this'} ${mediaContent}`;\r\n\r\n                logGranular(\"Constructed media content\", {\r\n                    mediaContent,\r\n                    fullPrompt: promptContent\r\n                });\r\n\r\n                const messages = [{\r\n                    role: \"user\",\r\n                    content: promptContent\r\n                }];\r\n\r\n                // Headers exactly as in nvidia.ts\r\n                const inferHeaders = {\r\n                    \"Authorization\": `Bearer ${apiKey}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Accept\": \"application/json\",\r\n                    \"NVCF-INPUT-ASSET-REFERENCES\": assetId,\r\n                    \"NVCF-FUNCTION-ASSET-IDS\": assetId\r\n                };\r\n\r\n                const payload = {\r\n                    max_tokens: 1024,\r\n                    temperature: 0.2,\r\n                    top_p: 0.7,\r\n                    seed: 50,\r\n                    num_frames_per_inference: 8,\r\n                    messages: messages,\r\n                    stream: false,\r\n                    model: \"nvidia/vila\"\r\n                };\r\n\r\n                logGranular(\"Preparing Cosmos API request\", {\r\n                    url: invoke_url,\r\n                    headers: {\r\n                        ...inferHeaders,\r\n                        \"Authorization\": \"Bearer [REDACTED]\"\r\n                    },\r\n                    payload: {\r\n                        ...payload,\r\n                        messages: messages\r\n                    }\r\n                });\r\n\r\n                const response = await axios.post(\r\n                    invoke_url,\r\n                    payload,\r\n                    { headers: inferHeaders }\r\n                );\r\n\r\n                logGranular(\"Received Cosmos API response\", {\r\n                    status: response.status,\r\n                    headers: response.headers,\r\n                    data: response.data\r\n                });\r\n\r\n                // Clean up the asset - exact same as nvidia.ts\r\n                logGranular(\"Initiating asset cleanup\", { assetId });\r\n\r\n                await axios.delete(`${kNvcfAssetUrl}/${assetId}`, {\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${apiKey}`\r\n                    }\r\n                });\r\n\r\n                logGranular(\"Asset cleanup completed\", { assetId });\r\n\r\n                const responseText = response.data.choices[0]?.message?.content || \"\";\r\n                const cosmosResponse = {\r\n                    ...response.data,\r\n                    prompt_logprobs: null\r\n                };\r\n\r\n                const analysis: CosmosAnalysis = {\r\n                    description: responseText,\r\n                    confidence: 0.92\r\n                };\r\n\r\n                logGranular(\"Processing complete\", {\r\n                    responseLength: responseText.length,\r\n                    success: true,\r\n                    assetId\r\n                });\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Scene Analysis: ${responseText}`,\r\n                        success: true,\r\n                        mediaPath,\r\n                        data: {\r\n                            response: responseText,\r\n                            analysis,\r\n                            raw: cosmosResponse,\r\n                            assetId\r\n                        }\r\n                    } as CosmosContent);\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error analyzing media: ${error instanceof Error ? error.message : String(error)}`,\r\n                        success: false,\r\n                        mediaPath: parsedPrompt.mediaFile,\r\n                        data: {\r\n                            error: error instanceof Error ? error.message : String(error)\r\n                        }\r\n                    } as CosmosContent);\r\n                }\r\n                throw new NimError(\r\n                    NimErrorCode.API_ERROR,\r\n                    \"Failed to get response from NVIDIA NIM\",\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        } catch (error) {\r\n            logGranular(\"Failed to execute GET_COSMOS_DESCRIPTION action\", { error });\r\n            throw new NimError(\r\n                NimErrorCode.NETWORK_ERROR,\r\n                \"Failed to execute GET_COSMOS_DESCRIPTION action\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default getCosmosDescriptionAction;\r\n\r\n","import fs from 'fs';\r\nimport path from 'path';\r\nimport axios from 'axios';\r\nimport { MediaType, MediaAsset } from '../types/cosmos.js';\r\nimport { NimError, NimErrorCode, ErrorSeverity } from '../errors/nimErrors.js';\r\n\r\nconst SUPPORTED_FORMATS = {\r\n    \"png\": [\"image/png\", \"img\"],\r\n    \"jpg\": [\"image/jpg\", \"img\"],\r\n    \"jpeg\": [\"image/jpeg\", \"img\"],\r\n    \"mp4\": [\"video/mp4\", \"video\"]\r\n} as const;\r\n\r\nconst ASSETS_DIR = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\r\nconst NVCF_ASSET_URL = 'https://api.nvcf.nvidia.com/v2/nvcf/assets';\r\n\r\nexport class AssetManager {\r\n    private apiKey: string;\r\n\r\n    constructor(apiKey: string) {\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    /**\r\n     * Get the absolute path to the assets directory\r\n     */\r\n    private getAssetsPath(): string {\r\n        // Try to find the assets directory relative to the current working directory\r\n        let currentDir = process.cwd();\r\n        let assetsPath = path.join(currentDir, ASSETS_DIR);\r\n\r\n        // If not found, try parent directories\r\n        while (!fs.existsSync(assetsPath) && currentDir !== path.parse(currentDir).root) {\r\n            currentDir = path.dirname(currentDir);\r\n            assetsPath = path.join(currentDir, ASSETS_DIR);\r\n        }\r\n\r\n        if (!fs.existsSync(assetsPath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                \"Assets directory not found\",\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        return assetsPath;\r\n    }\r\n\r\n    /**\r\n     * Get file information\r\n     */\r\n    private getFileInfo(filePath: string): { ext: string; mimeType: string; type: MediaType } {\r\n        const ext = path.extname(filePath).toLowerCase().slice(1);\r\n        if (!(ext in SUPPORTED_FORMATS)) {\r\n            throw new NimError(\r\n                NimErrorCode.VALIDATION_FAILED,\r\n                `Unsupported file format: ${ext}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        const [mimeType, type] = SUPPORTED_FORMATS[ext as keyof typeof SUPPORTED_FORMATS];\r\n        return { ext, mimeType, type: type as MediaType };\r\n    }\r\n\r\n    /**\r\n     * Check if a string is a valid URL\r\n     */\r\n    private isValidUrl(urlString: string): boolean {\r\n        try {\r\n            new URL(urlString);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Download a file from a URL and save it to the assets directory\r\n     */\r\n    async downloadFromUrl(url: string): Promise<string> {\r\n        if (!this.isValidUrl(url)) {\r\n            throw new NimError(\r\n                NimErrorCode.VALIDATION_FAILED,\r\n                \"Invalid URL provided\",\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(url, {\r\n                responseType: 'arraybuffer',\r\n                headers: {\r\n                    'Accept': Object.values(SUPPORTED_FORMATS).map(([mime]) => mime).join(', ')\r\n                }\r\n            });\r\n\r\n            const contentType = response.headers['content-type'];\r\n            const extension = Object.entries(SUPPORTED_FORMATS)\r\n                .find(([_, [mime]]) => mime === contentType)?.[0];\r\n\r\n            if (!extension) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    `Unsupported content type: ${contentType}`,\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            const assetsPath = this.getAssetsPath();\r\n            const filename = `download_${Date.now()}.${extension}`;\r\n            const filePath = path.join(assetsPath, filename);\r\n\r\n            await fs.promises.writeFile(filePath, response.data);\r\n            return filename;\r\n        } catch (error) {\r\n            if (error instanceof NimError) throw error;\r\n            throw new NimError(\r\n                NimErrorCode.DOWNLOAD_ERROR,\r\n                \"Failed to download media file\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get or download media file\r\n     * If the input is a URL, downloads it and returns the local path\r\n     * If the input is a local file, validates it exists and returns the path\r\n     */\r\n    async getOrDownloadMedia(mediaInput: string): Promise<string> {\r\n        if (this.isValidUrl(mediaInput)) {\r\n            return this.downloadFromUrl(mediaInput);\r\n        }\r\n\r\n        // If not a URL, treat as local file\r\n        const assetsPath = this.getAssetsPath();\r\n        const filePath = path.join(assetsPath, mediaInput);\r\n\r\n        if (!fs.existsSync(filePath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                `Media file not found: ${mediaInput}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        return mediaInput;\r\n    }\r\n\r\n    /**\r\n     * Upload a media file to NVIDIA's asset service\r\n     */\r\n    async uploadAsset(filePath: string, description: string = \"Reference media file\"): Promise<MediaAsset> {\r\n        const { mimeType, type } = this.getFileInfo(filePath);\r\n        const fileData = fs.readFileSync(filePath);\r\n\r\n        // First API call to authorize asset upload\r\n        const headers = {\r\n            \"Authorization\": `Bearer ${this.apiKey}`,\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        };\r\n\r\n        try {\r\n            // Get upload URL\r\n            const { data: authorizeRes } = await axios.post(NVCF_ASSET_URL, {\r\n                contentType: mimeType,\r\n                description\r\n            }, { headers });\r\n\r\n            // Upload the file\r\n            await axios.put(authorizeRes.uploadUrl, fileData, {\r\n                headers: {\r\n                    \"x-amz-meta-nvcf-asset-description\": description,\r\n                    \"content-type\": mimeType\r\n                }\r\n            });\r\n\r\n            return {\r\n                assetId: authorizeRes.assetId,\r\n                type,\r\n                mimeType,\r\n                description\r\n            };\r\n        } catch (error) {\r\n            throw new NimError(\r\n                NimErrorCode.API_ERROR,\r\n                \"Failed to upload asset\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an asset from NVIDIA's service\r\n     */\r\n    async deleteAsset(assetId: string): Promise<void> {\r\n        try {\r\n            await axios.delete(`${NVCF_ASSET_URL}/${assetId}`, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${this.apiKey}`\r\n                }\r\n            });\r\n        } catch (error) {\r\n            throw new NimError(\r\n                NimErrorCode.API_ERROR,\r\n                \"Failed to delete asset\",\r\n                ErrorSeverity.LOW,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a list of available media files in the assets directory\r\n     */\r\n    listAvailableMedia(): string[] {\r\n        const assetsPath = this.getAssetsPath();\r\n        return fs.readdirSync(assetsPath)\r\n            .filter(file => {\r\n                const ext = path.extname(file).toLowerCase().slice(1);\r\n                return ext in SUPPORTED_FORMATS;\r\n            })\r\n            .map(file => path.join(assetsPath, file));\r\n    }\r\n\r\n    /**\r\n     * Get the full path to a media file in the assets directory\r\n     */\r\n    getMediaPath(filename: string): string {\r\n        const assetsPath = this.getAssetsPath();\r\n        const filePath = path.join(assetsPath, filename);\r\n\r\n        if (!fs.existsSync(filePath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                `Media file not found: ${filename}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * Handle a file uploaded through chat\r\n     * This will copy the file to the appropriate assets directory and return the new path\r\n     */\r\n    async handleChatUpload(uploadPath: string, targetDir: string): Promise<string> {\r\n        if (!fs.existsSync(uploadPath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                `Upload file not found: ${uploadPath}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        console.log(\"Debug - AssetManager - Input paths:\", {\r\n            uploadPath,\r\n            targetDir,\r\n            cwd: process.cwd()\r\n        });\r\n\r\n        // Find workspace root\r\n        let workspaceRoot = process.cwd().replace('/agent', '');\r\n        while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n            workspaceRoot = path.dirname(workspaceRoot);\r\n        }\r\n\r\n        // Convert targetDir to absolute path if it's relative\r\n        const absoluteTargetDir = path.isAbsolute(targetDir)\r\n            ? targetDir\r\n            : path.join(workspaceRoot, targetDir);\r\n\r\n        console.log(\"Debug - AssetManager - Resolved paths:\", {\r\n            workspaceRoot,\r\n            absoluteTargetDir\r\n        });\r\n\r\n        // Ensure target directory exists\r\n        if (!fs.existsSync(absoluteTargetDir)) {\r\n            fs.mkdirSync(absoluteTargetDir, { recursive: true });\r\n        }\r\n\r\n        // Generate a new filename with timestamp\r\n        const ext = path.extname(uploadPath);\r\n        const timestamp = Date.now();\r\n        const newFilename = `upload_${timestamp}${ext}`;\r\n        const newPath = path.join(absoluteTargetDir, newFilename);\r\n\r\n        console.log(\"Debug - AssetManager - File paths:\", {\r\n            newFilename,\r\n            newPath,\r\n            exists: fs.existsSync(uploadPath)\r\n        });\r\n\r\n        // Copy the file\r\n        try {\r\n            await fs.promises.copyFile(uploadPath, newPath);\r\n            console.log(\"Debug - AssetManager - File copied successfully:\", {\r\n                from: uploadPath,\r\n                to: newPath\r\n            });\r\n            return newPath;\r\n        } catch (error) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_OPERATION_FAILED,\r\n                `Failed to copy upload file: ${error instanceof Error ? error.message : String(error)}`,\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle image files for Cosmos\r\n     * This includes validation, copying, and path management specific to Cosmos images\r\n     */\r\n    async handleImagesCosmos(uploadPath: string): Promise<string> {\r\n        console.log(\"Debug - AssetManager - Handling Cosmos image:\", {\r\n            uploadPath,\r\n            type: 'image'\r\n        });\r\n\r\n        // Find workspace root\r\n        let workspaceRoot = process.cwd().replace('/agent', '');\r\n        while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n            workspaceRoot = path.dirname(workspaceRoot);\r\n        }\r\n\r\n        // Set up Cosmos image directory\r\n        const cosmosImageDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos', 'images');\r\n        const cosmosTempDir = path.join(cosmosImageDir, 'temp');\r\n\r\n        // Ensure directories exist\r\n        if (!fs.existsSync(cosmosImageDir)) {\r\n            fs.mkdirSync(cosmosImageDir, { recursive: true });\r\n        }\r\n        if (!fs.existsSync(cosmosTempDir)) {\r\n            fs.mkdirSync(cosmosTempDir, { recursive: true });\r\n        }\r\n\r\n        // Validate file exists and is an image\r\n        if (!fs.existsSync(uploadPath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                `Image file not found: ${uploadPath}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        const ext = path.extname(uploadPath).toLowerCase();\r\n        if (!['.jpg', '.jpeg', '.png', '.gif'].includes(ext)) {\r\n            throw new NimError(\r\n                NimErrorCode.VALIDATION_FAILED,\r\n                `Invalid image format: ${ext}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        // Generate new filename and copy file\r\n        const timestamp = Date.now();\r\n        const newFilename = `cosmos_img_${timestamp}${ext}`;\r\n        const newPath = path.join(cosmosImageDir, newFilename);\r\n\r\n        try {\r\n            await fs.promises.copyFile(uploadPath, newPath);\r\n            console.log(\"Debug - AssetManager - Cosmos image processed:\", {\r\n                from: uploadPath,\r\n                to: newPath,\r\n                size: fs.statSync(newPath).size\r\n            });\r\n            return newPath;\r\n        } catch (error) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_OPERATION_FAILED,\r\n                `Failed to process Cosmos image: ${error instanceof Error ? error.message : String(error)}`,\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle video files for Cosmos\r\n     * This includes validation, copying, and path management specific to Cosmos videos\r\n     */\r\n    async handleVideosCosmos(uploadPath: string): Promise<string> {\r\n        console.log(\"Debug - AssetManager - Handling Cosmos video:\", {\r\n            uploadPath,\r\n            type: 'video'\r\n        });\r\n\r\n        // Find workspace root\r\n        let workspaceRoot = process.cwd().replace('/agent', '');\r\n        while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n            workspaceRoot = path.dirname(workspaceRoot);\r\n        }\r\n\r\n        // Set up Cosmos video directory\r\n        const cosmosVideoDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos', 'videos');\r\n        const cosmosTempDir = path.join(cosmosVideoDir, 'temp');\r\n\r\n        // Ensure directories exist\r\n        if (!fs.existsSync(cosmosVideoDir)) {\r\n            fs.mkdirSync(cosmosVideoDir, { recursive: true });\r\n        }\r\n        if (!fs.existsSync(cosmosTempDir)) {\r\n            fs.mkdirSync(cosmosTempDir, { recursive: true });\r\n        }\r\n\r\n        // Validate file exists and is a video\r\n        if (!fs.existsSync(uploadPath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                `Video file not found: ${uploadPath}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        const ext = path.extname(uploadPath).toLowerCase();\r\n        if (!['.mp4', '.avi', '.mov', '.webm'].includes(ext)) {\r\n            throw new NimError(\r\n                NimErrorCode.VALIDATION_FAILED,\r\n                `Invalid video format: ${ext}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        // Generate new filename and copy file\r\n        const timestamp = Date.now();\r\n        const newFilename = `cosmos_vid_${timestamp}${ext}`;\r\n        const newPath = path.join(cosmosVideoDir, newFilename);\r\n\r\n        try {\r\n            await fs.promises.copyFile(uploadPath, newPath);\r\n            console.log(\"Debug - AssetManager - Cosmos video processed:\", {\r\n                from: uploadPath,\r\n                to: newPath,\r\n                size: fs.statSync(newPath).size\r\n            });\r\n            return newPath;\r\n        } catch (error) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_OPERATION_FAILED,\r\n                `Failed to process Cosmos video: ${error instanceof Error ? error.message : String(error)}`,\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updated handleChatUploadCosmos to use the new specialized handlers\r\n     */\r\n    async handleChatUploadCosmos(uploadPath: string, targetDir: string): Promise<string> {\r\n        if (!fs.existsSync(uploadPath)) {\r\n            throw new NimError(\r\n                NimErrorCode.FILE_NOT_FOUND,\r\n                `Upload file not found: ${uploadPath}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        // Determine file type\r\n        const ext = path.extname(uploadPath).toLowerCase();\r\n        const isVideo = ['.mp4', '.avi', '.mov', '.webm'].includes(ext);\r\n        const isImage = ['.jpg', '.jpeg', '.png', '.gif'].includes(ext);\r\n\r\n        console.log(\"Debug - AssetManager - Cosmos upload type:\", {\r\n            path: uploadPath,\r\n            extension: ext,\r\n            isVideo,\r\n            isImage\r\n        });\r\n\r\n        // Handle based on file type\r\n        if (isVideo) {\r\n            return this.handleVideosCosmos(uploadPath);\r\n        } else if (isImage) {\r\n            return this.handleImagesCosmos(uploadPath);\r\n        } else {\r\n            throw new NimError(\r\n                NimErrorCode.VALIDATION_FAILED,\r\n                `Unsupported file type: ${ext}`,\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n    }\r\n}","import { Media } from \"@elizaos/core\";\r\nimport { AssetManager } from \"./assetManager.js\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\r\nimport path from 'path';\r\nimport process from 'process';\r\nimport fs from 'fs';\r\n\r\n// Debug logging helper\r\nconst debugLog = (message: string, data?: unknown) => {\r\n    console.log(`Debug - Cosmos Parser - ${message}:`, data);\r\n};\r\n\r\nexport interface CosmosParsedPrompt {\r\n    mediaFile?: string;\r\n    query?: string;\r\n    isVideo: boolean;\r\n    isImage: boolean;\r\n    isBase64: boolean;\r\n}\r\n\r\n/**\r\n * Parse a prompt for Cosmos Vision processing\r\n * Supports both traditional [MEDIA]...[/MEDIA] format and direct file uploads\r\n */\r\nexport const parseCosmosPrompt = async (text?: string, attachments?: Media[], apiKey?: string): Promise<CosmosParsedPrompt> => {\r\n    debugLog(\"Input\", {\r\n        hasText: !!text,\r\n        textLength: text?.length,\r\n        attachmentCount: attachments?.length,\r\n        hasApiKey: !!apiKey\r\n    });\r\n\r\n    const result: CosmosParsedPrompt = {\r\n        isVideo: false,\r\n        isImage: false,\r\n        isBase64: false\r\n    };\r\n\r\n    // Get workspace root using the same logic as actionGetDeepFake.ts\r\n    let workspaceRoot = process.cwd().replace('/agent', '');\r\n    while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n        workspaceRoot = path.dirname(workspaceRoot);\r\n    }\r\n\r\n    debugLog(\"Workspace paths\", {\r\n        cwd: process.cwd(),\r\n        workspaceRoot,\r\n        hasPackagesDir: fs.existsSync(path.join(workspaceRoot, 'packages'))\r\n    });\r\n\r\n    if (!text && !attachments?.length) {\r\n        return result;\r\n    }\r\n\r\n    // Handle direct file uploads first\r\n    if (attachments?.length) {\r\n        const firstAttachment = attachments[0];\r\n        debugLog(\"First attachment\", {\r\n            id: firstAttachment.id,\r\n            contentType: firstAttachment.contentType,\r\n            url: firstAttachment.url\r\n        });\r\n\r\n        // Determine media type from content type\r\n        const contentType = firstAttachment.contentType || '';\r\n        const isVideo = contentType.startsWith('video/');\r\n        const isImage = contentType.startsWith('image/');\r\n\r\n        if (!isVideo && !isImage) {\r\n            throw new NimError(\r\n                NimErrorCode.VALIDATION_FAILED,\r\n                \"Unsupported media type. Only images and videos are supported.\",\r\n                ErrorSeverity.HIGH\r\n            );\r\n        }\r\n\r\n        // Use AssetManager to handle the upload\r\n        if (apiKey) {\r\n            const assetManager = new AssetManager(apiKey);\r\n            const uploadPath = firstAttachment.url;\r\n            const cosmosDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\r\n            const fullCosmosDir = path.join(workspaceRoot, cosmosDir);\r\n\r\n            debugLog(\"Upload paths\", {\r\n                uploadPath,\r\n                cosmosDir,\r\n                fullCosmosDir\r\n            });\r\n\r\n            try {\r\n                const newPath = await assetManager.handleChatUploadCosmos(uploadPath, cosmosDir);\r\n                result.mediaFile = path.basename(newPath);\r\n                result.isVideo = isVideo;\r\n                result.isImage = isImage;\r\n                result.isBase64 = false;\r\n\r\n                debugLog(\"Upload result\", {\r\n                    newPath,\r\n                    mediaFile: result.mediaFile\r\n                });\r\n            } catch (error) {\r\n                throw new NimError(\r\n                    NimErrorCode.FILE_OPERATION_FAILED,\r\n                    `Failed to process uploaded file: ${error instanceof Error ? error.message : String(error)}`,\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        }\r\n\r\n        // Extract query from text if present\r\n        if (text) {\r\n            const queryMatch = text.match(/\\[QUERY\\](.*?)\\[\\/QUERY\\]/s);\r\n            result.query = queryMatch ? queryMatch[1].trim() : text.trim();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Handle text-based prompt with [MEDIA]...[/MEDIA] tags\r\n    if (text) {\r\n        const mediaMatch = text.match(/\\[MEDIA\\](.*?)\\[\\/MEDIA\\]/s);\r\n        const queryMatch = text.match(/\\[QUERY\\](.*?)\\[\\/QUERY\\]/s);\r\n\r\n        debugLog(\"Text matches\", {\r\n            hasMediaMatch: !!mediaMatch,\r\n            hasQueryMatch: !!queryMatch,\r\n            mediaContent: mediaMatch?.[1]?.trim(),\r\n            queryContent: queryMatch?.[1]?.trim()\r\n        });\r\n\r\n        if (mediaMatch) {\r\n            const mediaFile = mediaMatch[1].trim();\r\n            // Build the correct path for local files\r\n            const cosmosDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\r\n            const fullCosmosDir = path.join(workspaceRoot, cosmosDir);\r\n            const mediaPath = path.join(fullCosmosDir, mediaFile);\r\n\r\n            debugLog(\"Local file paths\", {\r\n                mediaFile,\r\n                cosmosDir,\r\n                fullCosmosDir,\r\n                mediaPath\r\n            });\r\n\r\n            result.mediaFile = mediaPath;\r\n\r\n            // Determine file type\r\n            const ext = path.extname(mediaFile).toLowerCase();\r\n            result.isVideo = ['.mp4', '.mov', '.avi', '.webm'].includes(ext);\r\n            result.isImage = ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);\r\n        }\r\n\r\n        if (queryMatch) {\r\n            result.query = queryMatch[1].trim();\r\n        }\r\n    }\r\n\r\n    debugLog(\"Result\", {\r\n        hasMediaFile: !!result.mediaFile,\r\n        isVideo: result.isVideo,\r\n        isImage: result.isImage,\r\n        isBase64: result.isBase64,\r\n        hasQuery: !!result.query,\r\n        fullPath: result.mediaFile\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates a formatted Cosmos prompt string\r\n */\r\nexport function createCosmosPrompt(mediaFile: string, query: string = \"Describe the scene\"): string {\r\n    return `[MEDIA]\r\n${mediaFile}\r\n[/MEDIA]\r\n[QUERY]\r\n${query}\r\n[/QUERY]`;\r\n}","import { Action, elizaLogger } from \"@elizaos/core\";\r\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample, Media } from \"@elizaos/core\";\r\nimport axios from 'axios';\r\nimport fs from 'fs';\r\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\r\nimport { parseDeepFakePrompt } from \"../utils/deepfakePromptParser.js\";\r\nimport { DeepFakeContent, DeepFakeResponse, DeepFakeAnalysis } from \"../types/deepfake.js\";\r\nimport { AssetManager } from \"../utils/assetManager.js\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\r\nimport path from 'path';\r\n\r\n// Get configuration for granular logging\r\nconst config = getConfig();\r\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\r\n\r\n// Enhanced logging helper\r\nconst logGranular = (message: string, data?: unknown) => {\r\n    if (GRANULAR_LOG) {\r\n        elizaLogger.info(`[DeepFakeDetection] ${message}`, data);\r\n        console.log(`[DeepFakeDetection] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n    }\r\n};\r\n\r\ninterface ApiHeaders {\r\n    Authorization: string;\r\n    Accept: string;\r\n    'Content-Type'?: string;\r\n    'NVCF-INPUT-ASSET-REFERENCES'?: string;\r\n    [key: string]: string | undefined;\r\n}\r\n\r\nexport const getDeepFakeAction: Action = {\r\n    name: \"GET_DEEP_FAKE\",\r\n    similes: [\"CHECK_DEEP_FAKE\", \"ANALYZE_DEEP_FAKE\", \"DEEP_FAKE_CONTROL\"],\r\n    description: \"Use NVIDIA DeepFake detection model to analyze images for potential manipulation\",\r\n    examples: [[\r\n        {\r\n            user: \"user\",\r\n            content: {\r\n                text: \"Check if this image is a deepfake please[IMAGE]\\ntest_image.jpg\\n[/IMAGE]\",\r\n                mediaPath: \"test_image.jpg\"\r\n            } as DeepFakeContent\r\n        } as ActionExample,\r\n        {\r\n            user: \"assistant\",\r\n            content: {\r\n                text: \"DeepFake Analysis: Image contains 1 face(s). Face #1: 99.82% likely to be a deepfake.\",\r\n                success: true,\r\n                data: {\r\n                    response: \"Detected potential manipulation in the image\",\r\n                    analysis: [{\r\n                        index: 0,\r\n                        bounding_boxes: [{\r\n                            vertices: [\r\n                                { x: 167.92, y: 105.52 },\r\n                                { x: 327.76, y: 327.61 }\r\n                            ],\r\n                            bbox_confidence: 0.9352,\r\n                            is_deepfake: 0.9982\r\n                        }],\r\n                        status: \"SUCCESS\"\r\n                    }]\r\n                }\r\n            } as DeepFakeContent\r\n        } as ActionExample\r\n    ]],\r\n\r\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n        if (message.content?.type !== \"GET_DEEP_FAKE\") {\r\n            return true;\r\n        }\r\n\r\n        logGranular(\"Validating GET_DEEP_FAKE action\", {\r\n            content: message.content\r\n        });\r\n\r\n        try {\r\n            const content = message.content as DeepFakeContent;\r\n\r\n            if (!content.text) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"text content is required\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            logGranular(\"Validation failed\", { error });\r\n            elizaLogger.error(\"Validation failed for GET_DEEP_FAKE\", {\r\n                error: error instanceof Error ? error.message : String(error)\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        logGranular(\"Executing GET_DEEPFAKE action\");\r\n\r\n        try {\r\n            const messageContent = message.content as DeepFakeContent;\r\n            console.log(\"Debug - Full message content:\", {\r\n                fullContent: message.content,\r\n                rawText: messageContent?.text,\r\n                type: message.content?.type,\r\n                allKeys: Object.keys(message.content || {}),\r\n                attachments: message.content?.attachments\r\n            });\r\n\r\n            console.log(\"Debug - Message content details:\", {\r\n                hasText: !!messageContent?.text,\r\n                hasMediaFile: !!messageContent?.mediaFile,\r\n                hasAttachments: !!message.content?.attachments?.length,\r\n                textContent: messageContent?.text,\r\n                mediaFile: messageContent?.mediaFile,\r\n                contentType: typeof messageContent?.text,\r\n                attachmentCount: message.content?.attachments?.length || 0,\r\n                firstAttachmentUrl: message.content?.attachments?.[0]?.url,\r\n                firstAttachmentType: message.content?.attachments?.[0]?.contentType\r\n            });\r\n\r\n            const config = await validateNvidiaNimConfig(runtime);\r\n            console.log(\"Debug - Config validated:\", {\r\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\r\n                env: config.NVIDIA_NIM_ENV\r\n            });\r\n\r\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\r\n            console.log(\"Debug - Network config:\", {\r\n                hasBaseUrl: !!networkConfig?.baseUrl,\r\n                baseUrl: networkConfig?.baseUrl\r\n            });\r\n\r\n            // Parse the prompt using our helper\r\n            console.log(\"Debug - Raw prompt:\", {\r\n                text: messageContent.text,\r\n                hasMediaFile: !!messageContent.mediaFile,\r\n                mediaFile: messageContent.mediaFile,\r\n                promptLength: messageContent.text?.length,\r\n                attachments: message.content?.attachments\r\n            });\r\n\r\n            const parsedPrompt = await parseDeepFakePrompt(\r\n                messageContent.text,\r\n                message.content?.attachments,\r\n                config.NVIDIA_NIM_API_KEY\r\n            );\r\n            console.log(\"Debug - Parsed content:\", {\r\n                hasMediaFile: !!parsedPrompt.mediaFile,\r\n                mediaPath: parsedPrompt.mediaFile,\r\n                mediaLength: parsedPrompt.mediaFile?.length,\r\n                isBase64: parsedPrompt.isBase64\r\n            });\r\n\r\n            let imageB64: string;\r\n            let fileData: Buffer;\r\n            let mediaPath: string = '';\r\n            let workspaceRoot: string;\r\n            let deepfakeDir: string;\r\n\r\n            if (parsedPrompt.isBase64) {\r\n                // Image is already in base64 format from chat\r\n                console.log(\"Debug - Using base64 image from chat\");\r\n                imageB64 = parsedPrompt.mediaFile.split('base64,')[1]; // Remove the data:image/jpeg;base64, prefix\r\n                fileData = Buffer.from(imageB64, 'base64');\r\n\r\n                // Set up paths for potential temp file storage\r\n                workspaceRoot = process.cwd().replace('/agent', '');\r\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n                    workspaceRoot = path.dirname(workspaceRoot);\r\n                }\r\n                deepfakeDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake');\r\n\r\n                // Create temp file for base64 image\r\n                const tempDir = path.join(deepfakeDir, 'temp');\r\n                if (!fs.existsSync(tempDir)) {\r\n                    fs.mkdirSync(tempDir, { recursive: true });\r\n                }\r\n                mediaPath = path.join(tempDir, `temp_${Date.now()}.jpg`);\r\n                fs.writeFileSync(mediaPath, fileData);\r\n            } else {\r\n                // Image is a file path\r\n                // Find the workspace root by looking for packages directory\r\n                // workspaceRoot = process.cwd();\r\n                workspaceRoot = process.cwd().replace('/agent', '');\r\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n                    workspaceRoot = path.dirname(workspaceRoot);\r\n                }\r\n\r\n                console.log(\"Debug - Workspace detection:\", {\r\n                    workspaceRoot,\r\n                    hasPackagesDir: fs.existsSync(path.join(workspaceRoot, 'packages'))\r\n                });\r\n\r\n                deepfakeDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake');\r\n                mediaPath = path.join(deepfakeDir, parsedPrompt.mediaFile);\r\n                const absolutePath = path.resolve(mediaPath);\r\n\r\n                console.log(\"Debug - File paths:\", {\r\n                    workspaceRoot,\r\n                    deepfakeDir,\r\n                    mediaPath,\r\n                    absolutePath,\r\n                    cwd: process.cwd(),\r\n                    exists: fs.existsSync(mediaPath),\r\n                    dirExists: fs.existsSync(deepfakeDir)\r\n                });\r\n\r\n                // Ensure deepfake directory exists\r\n                if (!fs.existsSync(deepfakeDir)) {\r\n                    console.log(\"Debug - Creating deepfake directory\");\r\n                    fs.mkdirSync(deepfakeDir, { recursive: true });\r\n                }\r\n\r\n                // Test file access\r\n                try {\r\n                    await fs.promises.access(mediaPath, fs.constants.R_OK);\r\n                    console.log(\"Debug - File is readable at path:\", mediaPath);\r\n\r\n                    const stats = await fs.promises.stat(mediaPath);\r\n                    console.log(\"Debug - File stats:\", {\r\n                        size: stats.size,\r\n                        isFile: stats.isFile(),\r\n                        permissions: stats.mode\r\n                    });\r\n                } catch (error) {\r\n                    console.error(\"Debug - File access error:\", {\r\n                        error: error instanceof Error ? error.message : String(error),\r\n                        path: mediaPath\r\n                    });\r\n                }\r\n\r\n                // Ensure the file exists\r\n                if (!fs.existsSync(mediaPath)) {\r\n                    console.error(`Media file not found: ${mediaPath}`);\r\n                    // Try listing directory contents\r\n                    try {\r\n                        const dirContents = await fs.promises.readdir(path.dirname(mediaPath));\r\n                        console.log(\"Debug - Directory contents:\", {\r\n                            path: path.dirname(mediaPath),\r\n                            files: dirContents\r\n                        });\r\n                    } catch (dirError) {\r\n                        console.error(\"Debug - Failed to read directory:\", dirError);\r\n                    }\r\n                    throw new NimError(\r\n                        NimErrorCode.FILE_NOT_FOUND,\r\n                        `Media file not found: ${mediaPath}`,\r\n                        ErrorSeverity.HIGH\r\n                    );\r\n                }\r\n\r\n                // Read the file\r\n                console.log(\"Debug - Reading file from path\");\r\n                fileData = fs.readFileSync(mediaPath);\r\n                imageB64 = fileData.toString('base64');\r\n            }\r\n\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Core DeepFake detection logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            logGranular(\"Making request to NVIDIA NIM API\", {\r\n                model: \"hive/deepfake-image-detection\",\r\n                hasMediaFile: true,\r\n                imageSize: fileData.length,\r\n                isBase64Image: parsedPrompt.isBase64\r\n            });\r\n\r\n            try {\r\n                let payload;\r\n                let headers: ApiHeaders = {\r\n                    \"Authorization\": `Bearer ${config.NVIDIA_NIM_API_KEY}`,\r\n                    \"Accept\": \"application/json\"\r\n                };\r\n\r\n                // Handle large files through asset upload\r\n                if (imageB64.length < 180000) {\r\n                    payload = {\r\n                        input: [`data:image/jpeg;base64,${imageB64}`]\r\n                    };\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                } else {\r\n                    // For base64 images from chat, we need to save them first\r\n                    let tempPath: string | null = null;\r\n                    let uploadPath = mediaPath;\r\n                    //let uploadPath = path.join(workspaceRoot, mediaPath);\r\n\r\n                    if (parsedPrompt.isBase64) {\r\n                        const tempDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake', 'temp');\r\n                        if (!fs.existsSync(tempDir)) {\r\n                            fs.mkdirSync(tempDir, { recursive: true });\r\n                        }\r\n                        tempPath = path.join(tempDir, `temp_${Date.now()}_large.jpg`);\r\n                        fs.writeFileSync(tempPath, fileData);\r\n                        uploadPath = tempPath;\r\n                    }\r\n\r\n                    // Upload the file and get the asset ID\r\n                    const assetManager = new AssetManager(config.NVIDIA_NIM_API_KEY);\r\n                    const uploadedAsset = await assetManager.uploadAsset(uploadPath);\r\n\r\n                    // Clean up temp file if we created one\r\n                    if (tempPath && fs.existsSync(tempPath)) {\r\n                        fs.unlinkSync(tempPath);\r\n                    }\r\n\r\n                    payload = {\r\n                        input: [`data:image/jpeg;asset_id,${uploadedAsset.assetId}`]\r\n                    };\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                    headers[\"NVCF-INPUT-ASSET-REFERENCES\"] = uploadedAsset.assetId;\r\n                }\r\n\r\n                // Make the API request\r\n                const apiUrl = 'https://ai.api.nvidia.com/v1/cv/hive/deepfake-image-detection';\r\n                console.log(\"Debug - Making API request:\", {\r\n                    url: apiUrl,\r\n                    payloadSize: JSON.stringify(payload).length,\r\n                    hasAuth: !!headers.Authorization\r\n                });\r\n\r\n                const { data: response } = await axios.post(\r\n                    apiUrl,\r\n                    payload,\r\n                    {\r\n                        headers,\r\n                        maxBodyLength: Infinity,\r\n                        maxContentLength: Infinity\r\n                    }\r\n                );\r\n\r\n                console.log(\"Debug - API Response received:\", {\r\n                    status: 'success',\r\n                    dataLength: JSON.stringify(response).length\r\n                });\r\n\r\n                const deepfakeResponse = response as DeepFakeResponse;\r\n\r\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\r\n                    response: deepfakeResponse\r\n                });\r\n\r\n                // Process the analysis results\r\n                const analysis: DeepFakeAnalysis = deepfakeResponse.data[0];\r\n\r\n                logGranular(\"Processing analysis results\", {\r\n                    analysis\r\n                });\r\n\r\n                // Save the processed image if available\r\n                let processedImagePath = '';\r\n                if (analysis.image) {\r\n                    const filename = `df_analysis_${Date.now()}.jpg`;\r\n                    processedImagePath = path.join(deepfakeDir, filename);\r\n\r\n                    // Ensure deepfake directory exists\r\n                    if (!fs.existsSync(path.dirname(processedImagePath))) {\r\n                        fs.mkdirSync(path.dirname(processedImagePath), { recursive: true });\r\n                    }\r\n\r\n                    // Convert base64 to image and save\r\n                    const imageBuffer = Buffer.from(analysis.image.split(',')[1], 'base64');\r\n                    fs.writeFileSync(processedImagePath, imageBuffer);\r\n\r\n                    logGranular(\"Saved processed image\", {\r\n                        path: processedImagePath\r\n                    });\r\n                }\r\n\r\n                const faceCount = analysis.bounding_boxes.length;\r\n                const faceDescriptions = analysis.bounding_boxes.map((box, idx) =>\r\n                    `Face #${idx + 1}: ${(box.is_deepfake * 100).toFixed(2)}% likely to be a deepfake`\r\n                );\r\n\r\n                const analysisText = `DeepFake Analysis: Image contains ${faceCount} face(s). ${faceDescriptions.join(\". \")}${\r\n                    processedImagePath ? `\\n\\nProcessed image saved to: ${processedImagePath}` : ''\r\n                }`;\r\n\r\n                const processedData = {\r\n                    response: \"Analyzed image for potential manipulation\",\r\n                    analysis: [analysis],\r\n                    processedImage: processedImagePath || null\r\n                };\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: analysisText,\r\n                        success: true,\r\n                        mediaPath,\r\n                        data: processedData\r\n                    } as DeepFakeContent);\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error analyzing image: ${error instanceof Error ? error.message : String(error)}`,\r\n                        success: false,\r\n                        mediaPath: parsedPrompt.mediaFile,\r\n                        data: {\r\n                            error: error instanceof Error ? error.message : String(error)\r\n                        }\r\n                    } as DeepFakeContent);\r\n                }\r\n                throw new NimError(\r\n                    NimErrorCode.API_ERROR,\r\n                    \"Failed to get response from NVIDIA NIM\",\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        } catch (error) {\r\n            logGranular(\"Failed to execute GET_DEEP_FAKE action\", { error });\r\n            throw new NimError(\r\n                NimErrorCode.NETWORK_ERROR,\r\n                \"Failed to execute GET_DEEP_FAKE action\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default getDeepFakeAction;\r\n\r\n","import { Media } from \"@elizaos/core\";\r\nimport { AssetManager } from \"./assetManager.js\";\r\nimport path from 'path';\r\n\r\ninterface DeepFakeParsedPrompt {\r\n    mediaFile: string;\r\n    isBase64: boolean;\r\n}\r\n\r\ninterface MessageAttachment {\r\n    data: string;\r\n    type: string;\r\n    name?: string;\r\n}\r\n\r\n/**\r\n * Parses a prompt string to extract the media file for deepfake detection\r\n * Format expected either:\r\n * [IMAGE]\r\n * path/to/image/file\r\n * [/IMAGE]\r\n *\r\n * or\r\n *\r\n * [IMAGE]\r\n * data:image/jpeg;base64,...\r\n * [/IMAGE]\r\n *\r\n * or directly from message attachments\r\n */\r\nexport async function parseDeepFakePrompt(text: string, attachments?: Media[], apiKey?: string): Promise<DeepFakeParsedPrompt> {\r\n    // First check for attachments\r\n    if (attachments && attachments.length > 0) {\r\n        const imageAttachment = attachments[0];\r\n        if (!imageAttachment.url) {\r\n            throw new Error(\"Invalid media attachment: no URL found\");\r\n        }\r\n\r\n        // Handle the uploaded file\r\n        if (apiKey) {\r\n            const assetManager = new AssetManager(apiKey);\r\n            const deepfakeDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake');\r\n            const newPath = await assetManager.handleChatUpload(imageAttachment.url, deepfakeDir);\r\n\r\n            return {\r\n                mediaFile: path.basename(newPath),\r\n                isBase64: false\r\n            };\r\n        }\r\n\r\n        return {\r\n            mediaFile: imageAttachment.url,\r\n            isBase64: imageAttachment.url.startsWith('data:image')\r\n        };\r\n    }\r\n\r\n    // If no attachments, try to parse from text\r\n    const mediaMatch = text.match(/\\[IMAGE\\]([\\s\\S]*?)\\[\\/IMAGE\\]/);\r\n\r\n    if (!mediaMatch) {\r\n        throw new Error(\"Image file path or data is required\");\r\n    }\r\n\r\n    const mediaContent = mediaMatch[1].trim();\r\n    const isBase64 = mediaContent.startsWith('data:image');\r\n\r\n    return {\r\n        mediaFile: mediaContent,\r\n        isBase64\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a formatted deepfake detection prompt string\r\n */\r\nexport function createDeepFakePrompt(mediaFile: string): string {\r\n    return `[IMAGE]\r\n${mediaFile}\r\n[/IMAGE]`;\r\n}","import { Media } from \"@elizaos/core\";\r\nimport { AssetManager } from \"./assetManager.js\";\r\nimport path from 'path';\r\n\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\r\n\r\ninterface ParsedAIImagePrompt {\r\n    mediaFile: string;\r\n    isBase64: boolean;\r\n}\r\n\r\n/**\r\n * Parses a prompt string to extract the media file for AI image analysis\r\n * Format expected either:\r\n * [IMAGE]\r\n * path/to/image/file\r\n * [/IMAGE]\r\n *\r\n * or\r\n *\r\n * [IMAGE]\r\n * data:image/jpeg;base64,...\r\n * [/IMAGE]\r\n *\r\n * or directly from message attachments\r\n */\r\nexport async function parseAIImagePrompt(text: string, attachments?: Media[], apiKey?: string): Promise<ParsedAIImagePrompt> {\r\n    try {\r\n        // First check for attachments\r\n        if (attachments && attachments.length > 0) {\r\n            const imageAttachment = attachments[0];\r\n            if (!imageAttachment.url) {\r\n                throw new Error(\"Invalid media attachment: no URL found\");\r\n            }\r\n\r\n            // Handle the uploaded file\r\n            if (apiKey) {\r\n                const assetManager = new AssetManager(apiKey);\r\n                const aiImageDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage');\r\n                const newPath = await assetManager.handleChatUpload(imageAttachment.url, aiImageDir);\r\n\r\n                return {\r\n                    mediaFile: path.basename(newPath),\r\n                    isBase64: false\r\n                };\r\n            }\r\n\r\n            return {\r\n                mediaFile: imageAttachment.url,\r\n                isBase64: imageAttachment.url.startsWith('data:image')\r\n            };\r\n        }\r\n\r\n        // If no attachments, try to parse from text\r\n        const mediaMatch = text.match(/\\[IMAGE\\]([\\s\\S]*?)\\[\\/IMAGE\\]/);\r\n\r\n        if (!mediaMatch) {\r\n            throw new Error(\"Image file path or data is required\");\r\n        }\r\n\r\n        const mediaContent = mediaMatch[1].trim();\r\n        const isBase64 = mediaContent.startsWith('data:image');\r\n\r\n        return {\r\n            mediaFile: mediaContent,\r\n            isBase64\r\n        };\r\n    } catch (error) {\r\n        if (error instanceof NimError) {\r\n            throw error;\r\n        }\r\n        throw new NimError(\r\n            NimErrorCode.PARSE_ERROR,\r\n            \"Failed to parse AI image prompt\",\r\n            ErrorSeverity.HIGH,\r\n            { originalError: error }\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a formatted AI image analysis prompt string\r\n */\r\nexport function createAIImagePrompt(mediaFile: string): string {\r\n    return `[IMAGE]\r\n${mediaFile}\r\n[/IMAGE]`;\r\n}","import { Action, elizaLogger } from \"@elizaos/core\";\r\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample, Media } from \"@elizaos/core\";\r\nimport axios from 'axios';\r\nimport fs from 'fs';\r\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\r\nimport { parseAIImagePrompt } from \"../utils/aiImagePromptParser.js\";\r\nimport { AIImageContent, AIImageResponse, AIImageAnalysis } from \"../types/aiImage.js\";\r\nimport { AssetManager } from \"../utils/assetManager.js\";\r\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\r\nimport path from 'path';\r\n\r\n// Get configuration for granular logging\r\nconst config = getConfig();\r\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\r\n\r\n// Enhanced logging helper\r\nconst logGranular = (message: string, data?: unknown) => {\r\n    if (GRANULAR_LOG) {\r\n        elizaLogger.info(`[AIImageDetection] ${message}`, data);\r\n        console.log(`[AIImageDetection] ${message}`, data ? JSON.stringify(data, null, 2) : '');\r\n    }\r\n};\r\n\r\ninterface ApiHeaders {\r\n    Authorization: string;\r\n    Accept: string;\r\n    'Content-Type'?: string;\r\n    'NVCF-INPUT-ASSET-REFERENCES'?: string;\r\n    [key: string]: string | undefined;\r\n}\r\n\r\nexport const getAIImageAction: Action = {\r\n    name: \"GET_AI_IMAGE\",\r\n    similes: [\"CHECK_AI_IMAGE\", \"ANALYZE_AI_IMAGE\", \"AI_IMAGE_CONTROL\"],\r\n    description: \"Use NVIDIA AI Image detection model to analyze if images were generated by AI\",\r\n    examples: [[\r\n        {\r\n            user: \"user\",\r\n            content: {\r\n                text: \"Check if this image is AI generated [IMAGE]\\ntest_ai.jpg\\n[/IMAGE]  \",\r\n                mediaPath: \"test_ai.jpg\"\r\n            } as AIImageContent\r\n        } as ActionExample,\r\n        {\r\n            user: \"assistant\",\r\n            content: {\r\n                text: \"AI Image Analysis: Image is 99.94% likely to be AI-generated. Most likely source: Stable Diffusion XL (88.75% confidence).\",\r\n                success: true,\r\n                data: {\r\n                    response: \"Detected AI-generated image\",\r\n                    analysis: [{\r\n                        index: 0,\r\n                        is_ai_generated: 0.9994,\r\n                        possible_sources: {\r\n                            stablediffusionxl: 0.8875,\r\n                            midjourney: 0.0136,\r\n                            dalle: 0.0518,\r\n                        },\r\n                        status: \"SUCCESS\"\r\n                    }]\r\n                }\r\n            } as AIImageContent\r\n        } as ActionExample\r\n    ]],\r\n\r\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\r\n        if (message.content?.type !== \"GET_AI_IMAGE\") {\r\n            return true;\r\n        }\r\n\r\n        logGranular(\"Validating GET_AI_IMAGE action\", {\r\n            content: message.content\r\n        });\r\n\r\n        try {\r\n            const content = message.content as AIImageContent;\r\n\r\n            if (!content.text) {\r\n                throw new NimError(\r\n                    NimErrorCode.VALIDATION_FAILED,\r\n                    \"text content is required\",\r\n                    ErrorSeverity.HIGH\r\n                );\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            logGranular(\"Validation failed\", { error });\r\n            elizaLogger.error(\"Validation failed for GET_AI_IMAGE\", {\r\n                error: error instanceof Error ? error.message : String(error)\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        logGranular(\"Executing GET_AI_IMAGE action\");\r\n\r\n        try {\r\n            const messageContent = message.content as AIImageContent;\r\n            console.log(\"Debug - Full message content:\", {\r\n                fullContent: message.content,\r\n                rawText: messageContent?.text,\r\n                type: message.content?.type,\r\n                allKeys: Object.keys(message.content || {}),\r\n                attachments: message.content?.attachments\r\n            });\r\n\r\n            console.log(\"Debug - Message content details:\", {\r\n                hasText: !!messageContent?.text,\r\n                hasMediaFile: !!messageContent?.mediaFile,\r\n                hasAttachments: !!message.content?.attachments?.length,\r\n                textContent: messageContent?.text,\r\n                mediaFile: messageContent?.mediaFile,\r\n                contentType: typeof messageContent?.text,\r\n                attachmentCount: message.content?.attachments?.length || 0,\r\n                firstAttachmentUrl: message.content?.attachments?.[0]?.url,\r\n                firstAttachmentType: message.content?.attachments?.[0]?.contentType\r\n            });\r\n\r\n            const config = await validateNvidiaNimConfig(runtime);\r\n            console.log(\"Debug - Config validated:\", {\r\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\r\n                env: config.NVIDIA_NIM_ENV\r\n            });\r\n\r\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\r\n            console.log(\"Debug - Network config:\", {\r\n                hasBaseUrl: !!networkConfig?.baseUrl,\r\n                baseUrl: networkConfig?.baseUrl\r\n            });\r\n\r\n            // Parse the prompt using our helper\r\n            console.log(\"Debug - Raw prompt:\", {\r\n                text: messageContent.text,\r\n                hasMediaFile: !!messageContent.mediaFile,\r\n                mediaFile: messageContent.mediaFile,\r\n                promptLength: messageContent.text?.length,\r\n                attachments: message.content?.attachments\r\n            });\r\n\r\n            const parsedPrompt = await parseAIImagePrompt(\r\n                messageContent.text,\r\n                message.content?.attachments,\r\n                config.NVIDIA_NIM_API_KEY\r\n            );\r\n            console.log(\"Debug - Parsed content:\", {\r\n                hasMediaFile: !!parsedPrompt.mediaFile,\r\n                mediaPath: parsedPrompt.mediaFile,\r\n                mediaLength: parsedPrompt.mediaFile?.length,\r\n                isBase64: parsedPrompt.isBase64\r\n            });\r\n\r\n            let imageB64: string;\r\n            let fileData: Buffer;\r\n            let mediaPath: string = '';\r\n            let workspaceRoot: string;\r\n            let aiImageDir: string;\r\n\r\n            if (parsedPrompt.isBase64) {\r\n                // Image is already in base64 format from chat\r\n                console.log(\"Debug - Using base64 image from chat\");\r\n                imageB64 = parsedPrompt.mediaFile.split('base64,')[1]; // Remove the data:image/jpeg;base64, prefix\r\n                fileData = Buffer.from(imageB64, 'base64');\r\n\r\n                // Set up paths for potential temp file storage\r\n                workspaceRoot = process.cwd().replace('/agent', '');\r\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n                    workspaceRoot = path.dirname(workspaceRoot);\r\n                }\r\n                aiImageDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage');\r\n\r\n                // Create temp file for base64 image\r\n                const tempDir = path.join(aiImageDir, 'temp');\r\n                if (!fs.existsSync(tempDir)) {\r\n                    fs.mkdirSync(tempDir, { recursive: true });\r\n                }\r\n                mediaPath = path.join(tempDir, `temp_${Date.now()}.jpg`);\r\n                fs.writeFileSync(mediaPath, fileData);\r\n            } else {\r\n                // Image is a file path\r\n                // Find the workspace root by looking for packages directory\r\n                // workspaceRoot = process.cwd();\r\n                workspaceRoot = process.cwd().replace('/agent', '');\r\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\r\n                    workspaceRoot = path.dirname(workspaceRoot);\r\n                }\r\n\r\n                console.log(\"Debug - Workspace detection:\", {\r\n                    workspaceRoot,\r\n                    hasPackagesDir: fs.existsSync(path.join(workspaceRoot, 'packages'))\r\n                });\r\n\r\n                aiImageDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage');\r\n                mediaPath = path.join(aiImageDir, parsedPrompt.mediaFile);\r\n                const absolutePath = path.resolve(mediaPath);\r\n\r\n                console.log(\"Debug - File paths:\", {\r\n                    workspaceRoot,\r\n                    aiImageDir,\r\n                    mediaPath,\r\n                    absolutePath,\r\n                    cwd: process.cwd(),\r\n                    exists: fs.existsSync(mediaPath),\r\n                    dirExists: fs.existsSync(aiImageDir)\r\n                });\r\n\r\n                // Ensure aiimage directory exists\r\n                if (!fs.existsSync(aiImageDir)) {\r\n                    console.log(\"Debug - Creating aiimage directory\");\r\n                    fs.mkdirSync(aiImageDir, { recursive: true });\r\n                }\r\n\r\n                // Test file access\r\n                try {\r\n                    await fs.promises.access(mediaPath, fs.constants.R_OK);\r\n                    console.log(\"Debug - File is readable at path:\", mediaPath);\r\n\r\n                    const stats = await fs.promises.stat(mediaPath);\r\n                    console.log(\"Debug - File stats:\", {\r\n                        size: stats.size,\r\n                        isFile: stats.isFile(),\r\n                        permissions: stats.mode\r\n                    });\r\n                } catch (error) {\r\n                    console.error(\"Debug - File access error:\", {\r\n                        error: error instanceof Error ? error.message : String(error),\r\n                        path: mediaPath\r\n                    });\r\n                }\r\n\r\n                // Ensure the file exists\r\n                if (!fs.existsSync(mediaPath)) {\r\n                    console.error(`Media file not found: ${mediaPath}`);\r\n                    // Try listing directory contents\r\n                    try {\r\n                        const dirContents = await fs.promises.readdir(path.dirname(mediaPath));\r\n                        console.log(\"Debug - Directory contents:\", {\r\n                            path: path.dirname(mediaPath),\r\n                            files: dirContents\r\n                        });\r\n                    } catch (dirError) {\r\n                        console.error(\"Debug - Failed to read directory:\", dirError);\r\n                    }\r\n                    throw new NimError(\r\n                        NimErrorCode.FILE_NOT_FOUND,\r\n                        `Media file not found: ${mediaPath}`,\r\n                        ErrorSeverity.HIGH\r\n                    );\r\n                }\r\n\r\n                // Read the file\r\n                console.log(\"Debug - Reading file from path\");\r\n                fileData = fs.readFileSync(mediaPath);\r\n                imageB64 = fileData.toString('base64');\r\n            }\r\n\r\n            // ------------------------------------------------------------------------------------------------\r\n            // Core AI Image detection logic\r\n            // ------------------------------------------------------------------------------------------------\r\n            logGranular(\"Making request to NVIDIA NIM API\", {\r\n                model: \"hive/ai-generated-image-detection\",\r\n                hasMediaFile: true,\r\n                imageSize: fileData.length,\r\n                isBase64Image: parsedPrompt.isBase64\r\n            });\r\n\r\n            try {\r\n                let payload;\r\n                let headers: ApiHeaders = {\r\n                    \"Authorization\": `Bearer ${config.NVIDIA_NIM_API_KEY}`,\r\n                    \"Accept\": \"application/json\"\r\n                };\r\n\r\n                // Handle large files through asset upload\r\n                if (imageB64.length < 180000) {\r\n                    payload = {\r\n                        input: [`data:image/jpeg;base64,${imageB64}`]\r\n                    };\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                } else {\r\n                    // For base64 images from chat, we need to save them first\r\n                    let tempPath: string | null = null;\r\n                    let uploadPath = mediaPath;\r\n                    //let uploadPath = path.join(workspaceRoot, mediaPath);\r\n\r\n                    if (parsedPrompt.isBase64) {\r\n                        const tempDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage', 'temp');\r\n                        //const tempDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake', 'temp');\r\n                        if (!fs.existsSync(tempDir)) {\r\n                            fs.mkdirSync(tempDir, { recursive: true });\r\n                        }\r\n                        tempPath = path.join(tempDir, `temp_${Date.now()}_large.jpg`);\r\n                        fs.writeFileSync(tempPath, fileData);\r\n                        uploadPath = tempPath;\r\n                    }\r\n\r\n                    // Upload the file and get the asset ID\r\n                    const assetManager = new AssetManager(config.NVIDIA_NIM_API_KEY);\r\n                    const uploadedAsset = await assetManager.uploadAsset(uploadPath);\r\n\r\n                    // Clean up temp file if we created one\r\n                    if (tempPath && fs.existsSync(tempPath)) {\r\n                        fs.unlinkSync(tempPath);\r\n                    }\r\n\r\n                    payload = {\r\n                        input: [`data:image/jpeg;asset_id,${uploadedAsset.assetId}`]\r\n                    };\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                    headers[\"NVCF-INPUT-ASSET-REFERENCES\"] = uploadedAsset.assetId;\r\n                }\r\n\r\n                // Make the API request\r\n                const apiUrl = 'https://ai.api.nvidia.com/v1/cv/hive/ai-generated-image-detection';\r\n                console.log(\"Debug - Making API request:\", {\r\n                    url: apiUrl,\r\n                    payloadSize: JSON.stringify(payload).length,\r\n                    hasAuth: !!headers.Authorization\r\n                });\r\n\r\n                const { data: response } = await axios.post(\r\n                    apiUrl,\r\n                    payload,\r\n                    {\r\n                        headers,\r\n                        maxBodyLength: Infinity,\r\n                        maxContentLength: Infinity\r\n                    }\r\n                );\r\n\r\n                console.log(\"Debug - API Response received:\", {\r\n                    status: 'success',\r\n                    dataLength: JSON.stringify(response).length\r\n                });\r\n\r\n                const aiImageResponse = response as AIImageResponse;\r\n\r\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\r\n                    response: aiImageResponse\r\n                });\r\n\r\n                // Process the analysis results\r\n                const analysis: AIImageAnalysis = aiImageResponse.data[0];\r\n\r\n                logGranular(\"Processing analysis results\", {\r\n                    analysis\r\n                });\r\n\r\n                const aiProbability = (analysis.is_ai_generated * 100).toFixed(2);\r\n\r\n                // Find the most likely source\r\n                const sources = Object.entries(analysis.possible_sources);\r\n                const topSource = sources.reduce((prev, curr) =>\r\n                    curr[1] > prev[1] ? curr : prev\r\n                );\r\n                const sourceConfidence = (topSource[1] * 100).toFixed(2);\r\n\r\n                const analysisText = `AI Image Analysis: Image is ${aiProbability}% likely to be AI-generated. ${\r\n                    topSource[0] !== 'none'\r\n                        ? `Most likely source: ${topSource[0]} (${sourceConfidence}% confidence).`\r\n                        : 'No specific AI source identified.'\r\n                }`;\r\n\r\n                const processedData = {\r\n                    response: \"Analyzed image for AI generation\",\r\n                    analysis: [analysis]\r\n                };\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: analysisText,\r\n                        success: true,\r\n                        mediaPath,\r\n                        data: processedData\r\n                    } as AIImageContent);\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error analyzing image: ${error instanceof Error ? error.message : String(error)}`,\r\n                        success: false,\r\n                        mediaPath: mediaPath,\r\n                        data: {\r\n                            error: error instanceof Error ? error.message : String(error)\r\n                        }\r\n                    } as AIImageContent);\r\n                }\r\n                throw new NimError(\r\n                    NimErrorCode.API_ERROR,\r\n                    \"Failed to get response from NVIDIA NIM\",\r\n                    ErrorSeverity.HIGH,\r\n                    { originalError: error }\r\n                );\r\n            }\r\n        } catch (error) {\r\n            logGranular(\"Failed to execute GET_AI_IMAGE action\", { error });\r\n            throw new NimError(\r\n                NimErrorCode.NETWORK_ERROR,\r\n                \"Failed to execute GET_AI_IMAGE action\",\r\n                ErrorSeverity.HIGH,\r\n                { originalError: error }\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default getAIImageAction;\r\n\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport chalk from 'chalk';\r\nimport Table from 'cli-table3';\r\nimport ora from 'ora';\r\nimport { getConfig } from \"./environment\";\r\nimport getTopicAction from \"./actions/actionGetTopic\";\r\nimport getSafetyAction from \"./actions/actionGetSafety\";\r\nimport getJailBreakAction from \"./actions/actionGetJailBreak\";\r\nimport getCosmosDescriptionAction from \"./actions/actionGetCosmos\";\r\nimport getDeepFakeAction from \"./actions/actionGetDeepFake\";\r\nimport getAIImageAction from \"./actions/actionGetAIImage\";\r\n\r\n// Start the loader\r\nconst spinner = ora({\r\n  text: chalk.cyan('Initializing NVIDIA NIM Plugin...'),\r\n  spinner: 'dots12',\r\n  color: 'cyan'\r\n}).start();\r\n\r\nconst actions = [\r\n  getTopicAction,\r\n  getSafetyAction,\r\n  getJailBreakAction,\r\n  getCosmosDescriptionAction,\r\n  getDeepFakeAction,\r\n  getAIImageAction\r\n];\r\n\r\n// Get NVIDIA_NIM_SPASH from config\r\nconst NVIDIA_NIM_SPASH = getConfig().NVIDIA_NIM_SPASH;\r\n\r\n// Only show splash screen if NVIDIA_NIM_SPASH is true\r\nif (NVIDIA_NIM_SPASH) {\r\n  // Initial banner with chalk styling\r\n  console.log('\\n' + chalk.cyan('┌────────────────────────────────────────┐'));\r\n  console.log(chalk.cyan('│') + chalk.yellow.bold('          NVIDIA NIM PLUGIN             ') + chalk.cyan(' │'));\r\n  console.log(chalk.cyan('├────────────────────────────────────────┤'));\r\n  console.log(chalk.cyan('│') + chalk.white('  Initializing NVIDIA NIM Services...    ') + chalk.cyan('│'));\r\n  console.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\r\n  console.log(chalk.cyan('└────────────────────────────────────────┘'));\r\n\r\n  // Stop the loader\r\n  spinner.succeed(chalk.green('NVIDIA NIM Plugin initialized successfully!'));\r\n\r\n  // Create a beautiful table for actions\r\n  const actionTable = new Table({\r\n    head: [\r\n      chalk.cyan('Action'),\r\n      chalk.cyan('H'),\r\n      chalk.cyan('V'),\r\n      chalk.cyan('E'),\r\n      chalk.cyan('Similes')\r\n    ],\r\n    style: {\r\n      head: [],\r\n      border: ['cyan']\r\n    }\r\n  });\r\n\r\n  // Format and add action information\r\n  actions.forEach(action => {\r\n    actionTable.push([\r\n      chalk.white(action.name),\r\n      typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\r\n      typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\r\n      action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\r\n      chalk.gray(action.similes?.join(', ') || 'none')\r\n    ]);\r\n  });\r\n\r\n  // Display the action table\r\n  console.log('\\n' + actionTable.toString());\r\n\r\n  // Plugin status with a nice table\r\n  const statusTable = new Table({\r\n    style: {\r\n      border: ['cyan']\r\n    }\r\n  });\r\n\r\n  statusTable.push(\r\n    [chalk.cyan('Plugin Status')],\r\n    [chalk.white('Name    : ') + chalk.yellow('nvidia-nim')],\r\n    [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\r\n    [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\r\n  );\r\n\r\n  console.log('\\n' + statusTable.toString() + '\\n');\r\n} else {\r\n  // Stop the loader silently if splash is disabled\r\n  spinner.stop();\r\n}\r\n\r\nconst nvidiaNimPlugin: Plugin = {\r\n  name: \"nvidia-nim\",\r\n  description: \"NVIDIA NIM Plugin for AI Foundation Models integration\",\r\n  actions: actions,\r\n  evaluators: []\r\n};\r\n\r\n// Export for both CommonJS and ESM\r\nexport { nvidiaNimPlugin };\r\nexport default nvidiaNimPlugin;\r\n"]}