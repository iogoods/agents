{"version":3,"sources":["../src/actions/swap.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/transfer.ts","../src/types/index.ts","../src/actions/getBalance.ts","../src/actions/bridge.ts","../src/actions/stake.ts","../src/actions/faucet.ts","../src/actions/deploy.ts","../src/utils/contracts.ts","../src/index.ts"],"sourcesContent":["import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { executeRoute, getRoutes } from \"@lifi/sdk\";\r\nimport { parseEther } from \"viem\";\r\n\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\nimport { swapTemplate } from \"../templates\";\r\nimport type { SwapParams, SwapResponse } from \"../types\";\r\n\r\nexport { swapTemplate };\r\n\r\nexport class SwapAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async swap(params: SwapParams): Promise<SwapResponse> {\r\n        elizaLogger.debug(\"Swap params:\", params);\r\n        this.validateAndNormalizeParams(params);\r\n        elizaLogger.debug(\"Normalized swap params:\", params);\r\n\r\n        const fromAddress = this.walletProvider.getAddress();\r\n        const chainId = this.walletProvider.getChainConfigs(params.chain).id;\r\n\r\n        this.walletProvider.configureLiFiSdk(params.chain);\r\n\r\n        const resp: SwapResponse = {\r\n            chain: params.chain,\r\n            txHash: \"0x\",\r\n            fromToken: params.fromToken,\r\n            toToken: params.toToken,\r\n            amount: params.amount,\r\n        };\r\n\r\n        const routes = await getRoutes({\r\n            fromChainId: chainId,\r\n            toChainId: chainId,\r\n            fromTokenAddress: params.fromToken,\r\n            toTokenAddress: params.toToken,\r\n            fromAmount: parseEther(params.amount).toString(),\r\n            fromAddress: fromAddress,\r\n            options: {\r\n                slippage: params.slippage,\r\n                order: \"RECOMMENDED\",\r\n            },\r\n        });\r\n\r\n        if (!routes.routes.length) throw new Error(\"No routes found\");\r\n\r\n        const execution = await executeRoute(routes.routes[0]);\r\n        const process =\r\n            execution.steps[0]?.execution?.process[\r\n                execution.steps[0]?.execution?.process.length - 1\r\n            ];\r\n\r\n        if (!process?.status || process.status === \"FAILED\") {\r\n            throw new Error(\"Transaction failed\");\r\n        }\r\n\r\n        resp.txHash = process.txHash as `0x${string}`;\r\n\r\n        return resp;\r\n    }\r\n\r\n    validateAndNormalizeParams(params: SwapParams): void {\r\n        if (params.chain !== \"bsc\") {\r\n            throw new Error(\"Only BSC mainnet is supported\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const swapAction = {\r\n    name: \"swap\",\r\n    description: \"Swap tokens on the same chain\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting swap action...\");\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n\r\n        state.walletInfo = await bnbWalletProvider.get(\r\n            runtime,\r\n            message,\r\n            currentState\r\n        );\r\n\r\n        // Compose swap context\r\n        const swapContext = composeContext({\r\n            state: currentState,\r\n            template: swapTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: swapContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new SwapAction(walletProvider);\r\n        const swapOptions: SwapParams = {\r\n            chain: content.chain,\r\n            fromToken: content.inputToken,\r\n            toToken: content.outputToken,\r\n            amount: content.amount,\r\n            slippage: content.slippage,\r\n        };\r\n        try {\r\n            const swapResp = await action.swap(swapOptions);\r\n            callback?.({\r\n                text: `Successfully swap ${swapResp.amount} ${swapResp.fromToken} tokens to ${swapResp.toToken}\\nTransaction Hash: ${swapResp.txHash}`,\r\n                content: { ...swapResp },\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during swap:\", error.message);\r\n            callback?.({\r\n                text: `Swap failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: swapTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap 1 BNB for USDC on BSC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you swap 1 BNB for USDC on BSC\",\r\n                    action: \"SWAP\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        inputToken: \"BNB\",\r\n                        outputToken: \"USDC\",\r\n                        amount: \"1\",\r\n                        slippage: undefined,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Buy some token of 0x1234 using 1 USDC on BSC. The slippage should be no more than 5%\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you swap 1 USDC for token 0x1234 on BSC\",\r\n                    action: \"SWAP\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        inputToken: \"USDC\",\r\n                        outputToken: \"0x1234\",\r\n                        amount: \"1\",\r\n                        slippage: 0.05,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"SWAP\", \"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\r\n};\r\n","import type {\r\n     IAgentRuntime,\r\n     Provider,\r\n     Memory,\r\n     State,\r\n} from \"@elizaos/core\";\r\nimport { EVM, createConfig, getToken } from \"@lifi/sdk\";\r\nimport type {\r\n    Address,\r\n    WalletClient,\r\n    PublicClient,\r\n    Chain,\r\n    HttpTransport,\r\n    Account,\r\n    PrivateKeyAccount,\r\n    Hex,\r\n} from \"viem\";\r\nimport {\r\n    createPublicClient,\r\n    createWalletClient,\r\n    formatUnits,\r\n    http,\r\n    erc20Abi,\r\n} from \"viem\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport * as viemChains from \"viem/chains\";\r\nimport { createWeb3Name } from \"@web3-name-sdk/core\";\r\n\r\nimport type { SupportedChain } from \"../types\";\r\n\r\nexport class WalletProvider {\r\n    private currentChain: SupportedChain = \"bsc\";\r\n    chains: Record<string, Chain> = { bsc: viemChains.bsc };\r\n    account: PrivateKeyAccount;\r\n\r\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\r\n        this.setAccount(privateKey);\r\n        this.setChains(chains);\r\n\r\n        if (chains && Object.keys(chains).length > 0) {\r\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\r\n        }\r\n    }\r\n\r\n    getAccount(): PrivateKeyAccount {\r\n        return this.account;\r\n    }\r\n\r\n    getAddress(): Address {\r\n        return this.account.address;\r\n    }\r\n\r\n    getCurrentChain(): Chain {\r\n        return this.chains[this.currentChain];\r\n    }\r\n\r\n    getPublicClient(\r\n        chainName: SupportedChain\r\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\r\n        const transport = this.createHttpTransport(chainName);\r\n\r\n        const publicClient = createPublicClient({\r\n            chain: this.chains[chainName],\r\n            transport,\r\n        });\r\n        return publicClient;\r\n    }\r\n\r\n    getWalletClient(chainName: SupportedChain): WalletClient {\r\n        const transport = this.createHttpTransport(chainName);\r\n\r\n        const walletClient = createWalletClient({\r\n            chain: this.chains[chainName],\r\n            transport,\r\n            account: this.account,\r\n        });\r\n\r\n        return walletClient;\r\n    }\r\n\r\n    getChainConfigs(chainName: SupportedChain): Chain {\r\n        const chain = viemChains[chainName];\r\n\r\n        if (!chain?.id) {\r\n            throw new Error(\"Invalid chain name\");\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    configureLiFiSdk(chainName: SupportedChain) {\r\n        const chains = Object.values(this.chains);\r\n        const walletClient = this.getWalletClient(chainName);\r\n\r\n        createConfig({\r\n            integrator: \"eliza\",\r\n            providers: [\r\n                EVM({\r\n                    getWalletClient: async () => walletClient,\r\n                    switchChain: async (chainId) =>\r\n                        createWalletClient({\r\n                            account: this.account,\r\n                            chain: chains.find(\r\n                                (chain) => chain.id === chainId\r\n                            ) as Chain,\r\n                            transport: http(),\r\n                        }),\r\n                }),\r\n            ],\r\n        });\r\n    }\r\n\r\n    async formatAddress(address: string): Promise<Address> {\r\n        if (!address || address.length === 0) {\r\n            throw new Error(\"Empty address\");\r\n        }\r\n\r\n        if (address.startsWith(\"0x\") && address.length === 42) {\r\n            return address as Address;\r\n        }\r\n\r\n        const resolvedAddress = await this.resolveWeb3Name(address);\r\n        if (resolvedAddress) {\r\n            return resolvedAddress as Address;\r\n        }\r\n        throw new Error(\"Invalid address\");\r\n    }\r\n\r\n    async resolveWeb3Name(name: string): Promise<string | null> {\r\n        const nameService = createWeb3Name();\r\n        return await nameService.getAddress(name);\r\n    }\r\n\r\n    async checkERC20Allowance(\r\n        chain: SupportedChain,\r\n        token: Address,\r\n        owner: Address,\r\n        spender: Address,\r\n    ): Promise<bigint> {\r\n        const publicClient = this.getPublicClient(chain);\r\n        return await publicClient.readContract({\r\n            address: token,\r\n            abi: erc20Abi,\r\n            functionName: \"allowance\",\r\n            args: [owner, spender],\r\n        });\r\n    }\r\n\r\n    async approveERC20(\r\n        chain: SupportedChain,\r\n        token: Address,\r\n        spender: Address,\r\n        amount: bigint\r\n    ): Promise<Hex> {\r\n        const publicClient = this.getPublicClient(chain);\r\n        const walletClient = this.getWalletClient(chain);\r\n        const { request } = await publicClient.simulateContract({\r\n            account: this.account,\r\n            address: token,\r\n            abi: erc20Abi,\r\n            functionName: \"approve\",\r\n            args: [spender, amount],\r\n        });\r\n\r\n        return await walletClient.writeContract(request);\r\n    }\r\n\r\n    async transfer(\r\n        chain: SupportedChain,\r\n        toAddress: Address,\r\n        amount: bigint,\r\n        options?: {\r\n            gas?: bigint;\r\n            gasPrice?: bigint;\r\n            data?: Hex;\r\n        }\r\n    ): Promise<Hex> {\r\n        const walletClient = this.getWalletClient(chain);\r\n        return await walletClient.sendTransaction({\r\n            account: this.account,\r\n            to: toAddress,\r\n            value: amount,\r\n            chain: this.getChainConfigs(chain),\r\n            ...options,\r\n        });\r\n    }\r\n\r\n    async transferERC20(\r\n        chain: SupportedChain,\r\n        tokenAddress: Address,\r\n        toAddress: Address,\r\n        amount: bigint,\r\n        options?: {\r\n            gas?: bigint;\r\n            gasPrice?: bigint;\r\n        }\r\n    ): Promise<Hex> {\r\n        const publicClient = this.getPublicClient(chain);\r\n        const walletClient = this.getWalletClient(chain);\r\n        const { request } = await publicClient.simulateContract({\r\n            account: this.account,\r\n            address: tokenAddress as `0x${string}`,\r\n            abi: erc20Abi,\r\n            functionName: \"transfer\",\r\n            args: [toAddress as `0x${string}`, amount],\r\n            ...options,\r\n        });\r\n\r\n        return await walletClient.writeContract(request);\r\n    }\r\n\r\n    async getBalance(): Promise<string> {\r\n        const client = this.getPublicClient(this.currentChain);\r\n        const balance = await client.getBalance({\r\n            address: this.account.address,\r\n        });\r\n        return formatUnits(balance, 18);\r\n    }\r\n\r\n    async getTokenAddress(\r\n        chainName: SupportedChain,\r\n        tokenSymbol: string\r\n    ): Promise<string> {\r\n        const token = await getToken(\r\n            this.getChainConfigs(chainName).id,\r\n            tokenSymbol\r\n        );\r\n        return token.address;\r\n    }\r\n\r\n    addChain(chain: Record<string, Chain>) {\r\n        this.setChains(chain);\r\n    }\r\n\r\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\r\n        if (!this.chains[chainName]) {\r\n            const chain = WalletProvider.genChainFromName(\r\n                chainName,\r\n                customRpcUrl\r\n            );\r\n            this.addChain({ [chainName]: chain });\r\n        }\r\n        this.setCurrentChain(chainName);\r\n    }\r\n\r\n    private setAccount = (pk: `0x${string}`) => {\r\n        this.account = privateKeyToAccount(pk);\r\n    };\r\n\r\n    private setChains = (chains?: Record<string, Chain>) => {\r\n        if (!chains) {\r\n            return;\r\n        }\r\n        for (const chain of Object.keys(chains)) {\r\n            this.chains[chain] = chains[chain];\r\n        }\r\n    };\r\n\r\n    private setCurrentChain = (chain: SupportedChain) => {\r\n        this.currentChain = chain;\r\n    };\r\n\r\n    private createHttpTransport = (chainName: SupportedChain) => {\r\n        const chain = this.chains[chainName];\r\n\r\n        if (chain.rpcUrls.custom) {\r\n            return http(chain.rpcUrls.custom.http[0]);\r\n        }\r\n        return http(chain.rpcUrls.default.http[0]);\r\n    };\r\n\r\n    static genChainFromName(\r\n        chainName: string,\r\n        customRpcUrl?: string | null\r\n    ): Chain {\r\n        const baseChain = viemChains[chainName];\r\n\r\n        if (!baseChain?.id) {\r\n            throw new Error(\"Invalid chain name\");\r\n        }\r\n\r\n        const viemChain: Chain = customRpcUrl\r\n            ? {\r\n                  ...baseChain,\r\n                  rpcUrls: {\r\n                      ...baseChain.rpcUrls,\r\n                      custom: {\r\n                          http: [customRpcUrl],\r\n                      },\r\n                  },\r\n              }\r\n            : baseChain;\r\n\r\n        return viemChain;\r\n    }\r\n}\r\n\r\nconst genChainsFromRuntime = (\r\n    runtime: IAgentRuntime\r\n): Record<string, Chain> => {\r\n    const chainNames = [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"];\r\n    const chains = {};\r\n\r\n    for (const chainName of chainNames) {\r\n        const chain = WalletProvider.genChainFromName(chainName);\r\n        chains[chainName] = chain;\r\n    }\r\n\r\n    const mainnet_rpcurl = runtime.getSetting(\"BSC_PROVIDER_URL\");\r\n    if (mainnet_rpcurl) {\r\n        const chain = WalletProvider.genChainFromName(\"bsc\", mainnet_rpcurl);\r\n        chains[\"bsc\"] = chain;\r\n    }\r\n\r\n    const opbnb_rpcurl = runtime.getSetting(\"OPBNB_PROVIDER_URL\");\r\n    if (opbnb_rpcurl) {\r\n        const chain = WalletProvider.genChainFromName(\"opBNB\", opbnb_rpcurl);\r\n        chains[\"opBNB\"] = chain;\r\n    }\r\n\r\n    return chains;\r\n};\r\n\r\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\r\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\r\n    if (!privateKey) {\r\n        throw new Error(\"BNB_PRIVATE_KEY is missing\");\r\n    }\r\n\r\n    const chains = genChainsFromRuntime(runtime);\r\n\r\n    return new WalletProvider(privateKey as `0x${string}`, chains);\r\n};\r\n\r\nexport const bnbWalletProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string | null> {\r\n        try {\r\n            const walletProvider = initWalletProvider(runtime);\r\n            const address = walletProvider.getAddress();\r\n            const balance = await walletProvider.getBalance();\r\n            const chain = walletProvider.getCurrentChain();\r\n            return `BNB chain Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\r\n        } catch (error) {\r\n            console.error(\"Error in BNB chain wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n","export const getBalanceTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested check balance:\r\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\r\n- Address to check balance for. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\r\n- Token symbol or address. Could be a token symbol or address. If the address is provided, it must be a valid Ethereum address starting with \"0x\". Default is \"BNB\".\r\nIf any field is not provided, use the default value. If no default value is specified, use null.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"chain\": SUPPORTED_CHAINS,\r\n    \"address\": string | null,\r\n    \"token\": string\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const transferTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested transfer:\r\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\r\n- Token symbol or address(string starting with \"0x\"). Optional.\r\n- Amount to transfer. Optional. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\r\n- Recipient address. Must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\r\n- Data. Optional, data to be included in the transaction.\r\nIf any field is not provided, use the default value. If no default value is specified, use null.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"chain\": SUPPORTED_CHAINS,\r\n    \"token\": string | null,\r\n    \"amount\": string | null,\r\n    \"toAddress\": string,\r\n    \"data\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const swapTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested token swap:\r\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\r\n- Input token symbol or address(string starting with \"0x\").\r\n- Output token symbol or address(string starting with \"0x\").\r\n- Amount to swap. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\r\n- Slippage. Optional, expressed as decimal proportion, 0.03 represents 3%.\r\nIf any field is not provided, use the default value. If no default value is specified, use null.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"chain\": SUPPORTED_CHAINS,\r\n    \"inputToken\": string | null,\r\n    \"outputToken\": string | null,\r\n    \"amount\": string | null,\r\n    \"slippage\": number | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested token bridge:\r\n- From chain. Must be one of [\"bsc\", \"opBNB\"].\r\n- To chain. Must be one of [\"bsc\", \"opBNB\"].\r\n- From token address. Optional, must be a valid Ethereum address starting with \"0x\".\r\n- To token address. Optional, must be a valid Ethereum address starting with \"0x\".\r\n- Amount to bridge. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\r\n- To address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"fromChain\": \"bsc\" | \"opBNB\",\r\n    \"toChain\": \"bsc\" | \"opBNB\",\r\n    \"fromToken\": string | null,\r\n    \"toToken\": string | null,\r\n    \"amount\": string,\r\n    \"toAddress\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const stakeTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested stake action:\r\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\r\n- Action to execute. Must be one of [\"deposit\", \"withdraw\", \"claim\"].\r\n- Amount to execute. Optional, must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\"). If the action is \"deposit\" or \"withdraw\", amount is required.\r\nIf any field is not provided, use the default value. If no default value is specified, use null.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"chain\": SUPPORTED_CHAINS,\r\n    \"action\": \"deposit\" | \"withdraw\" | \"claim\",\r\n    \"amount\": string | null,\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const faucetTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested faucet request:\r\n- Token. Token to request. Could be one of [\"BNB\", \"BTC\", \"BUSD\", \"DAI\", \"ETH\", \"USDC\"]. Optional.\r\n- Recipient address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\r\nIf any field is not provided, use the default value. If no default value is specified, use null.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"token\": string | null,\r\n    \"toAddress\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const ercContractTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nWhen user wants to deploy any type of token contract (ERC20/721/1155), this will trigger the DEPLOY_TOKEN action.\r\n\r\nExtract the following details for deploying a token contract:\r\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\r\n- contractType: The type of token contract to deploy\r\n  - For ERC20: Extract name, symbol, decimals, totalSupply\r\n  - For ERC721: Extract name, symbol, baseURI\r\n  - For ERC1155: Extract name, baseURI\r\n- name: The name of the token.\r\n- symbol: The token symbol (only for ERC20/721).\r\n- decimals: Token decimals (only for ERC20). Default is 18.\r\n- totalSupply: Total supply with decimals (only for ERC20). Default is \"1000000000000000000\".\r\n- baseURI: Base URI for token metadata (only for ERC721/1155).\r\nIf any field is not provided, use the default value. If no default value is provided, use empty string.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"chain\": SUPPORTED_CHAINS,\r\n    \"contractType\": \"ERC20\" | \"ERC721\" | \"ERC1155\",\r\n    \"name\": string,\r\n    \"symbol\": string | null,\r\n    \"decimals\": number | null,\r\n    \"totalSupply\": string | null,\r\n    \"baseURI\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport {\r\n    formatEther,\r\n    formatUnits,\r\n    parseEther,\r\n    parseUnits,\r\n    erc20Abi,\r\n    type Hex,\r\n} from \"viem\";\r\n\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\nimport { transferTemplate } from \"../templates\";\r\nimport type { TransferParams, TransferResponse } from \"../types\";\r\n\r\nexport { transferTemplate };\r\n\r\n// Exported for tests\r\nexport class TransferAction {\r\n    private readonly TRANSFER_GAS = 21000n;\r\n    private readonly DEFAULT_GAS_PRICE = 3000000000n as const; // 3 Gwei\r\n\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async transfer(params: TransferParams): Promise<TransferResponse> {\r\n        elizaLogger.debug(\"Transfer params:\", params);\r\n        this.validateAndNormalizeParams(params);\r\n        elizaLogger.debug(\"Normalized transfer params:\", params);\r\n\r\n        const fromAddress = this.walletProvider.getAddress();\r\n\r\n        this.walletProvider.switchChain(params.chain);\r\n\r\n        const nativeToken =\r\n            this.walletProvider.chains[params.chain].nativeCurrency.symbol;\r\n\r\n        const resp: TransferResponse = {\r\n            chain: params.chain,\r\n            txHash: \"0x\",\r\n            recipient: params.toAddress,\r\n            amount: \"\",\r\n            token: params.token ?? nativeToken,\r\n        };\r\n\r\n        if (!params.token || params.token === nativeToken) {\r\n            // Native token transfer\r\n            const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\r\n                data: params.data,\r\n            };\r\n            let value: bigint;\r\n            if (!params.amount) {\r\n                // Transfer all balance minus gas\r\n                const publicClient = this.walletProvider.getPublicClient(\r\n                    params.chain\r\n                );\r\n                const balance = await publicClient.getBalance({\r\n                    address: fromAddress,\r\n                });\r\n\r\n                value = balance - this.DEFAULT_GAS_PRICE * 21000n;\r\n                options.gas = this.TRANSFER_GAS;\r\n                options.gasPrice = this.DEFAULT_GAS_PRICE;\r\n            } else {\r\n                value = parseEther(params.amount);\r\n            }\r\n\r\n            resp.amount = formatEther(value);\r\n            resp.txHash = await this.walletProvider.transfer(\r\n                params.chain,\r\n                params.toAddress,\r\n                value,\r\n                options\r\n            );\r\n        } else {\r\n            // ERC20 token transfer\r\n            let tokenAddress = params.token;\r\n            if (!params.token.startsWith(\"0x\")) {\r\n                tokenAddress = await this.walletProvider.getTokenAddress(\r\n                    params.chain,\r\n                    params.token\r\n                );\r\n            }\r\n\r\n            const publicClient = this.walletProvider.getPublicClient(\r\n                params.chain\r\n            );\r\n            const decimals = await publicClient.readContract({\r\n                address: tokenAddress as `0x${string}`,\r\n                abi: erc20Abi,\r\n                functionName: \"decimals\",\r\n            });\r\n\r\n            let value: bigint;\r\n            if (!params.amount) {\r\n                value = await publicClient.readContract({\r\n                    address: tokenAddress as `0x${string}`,\r\n                    abi: erc20Abi,\r\n                    functionName: \"balanceOf\",\r\n                    args: [fromAddress],\r\n                });\r\n            } else {\r\n                value = parseUnits(params.amount, decimals);\r\n            }\r\n\r\n            resp.amount = formatUnits(value, decimals);\r\n            resp.txHash = await this.walletProvider.transferERC20(\r\n                params.chain,\r\n                tokenAddress as `0x${string}`,\r\n                params.toAddress,\r\n                value\r\n            );\r\n        }\r\n\r\n        if (!resp.txHash || resp.txHash === \"0x\") {\r\n            throw new Error(\"Get transaction hash failed\");\r\n        }\r\n\r\n        // wait for the transaction to be confirmed\r\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\r\n        await publicClient.waitForTransactionReceipt({\r\n            hash: resp.txHash,\r\n        });\r\n\r\n        return resp;\r\n    }\r\n\r\n    async validateAndNormalizeParams(params: TransferParams): Promise<void> {\r\n        if (!params.toAddress) {\r\n            throw new Error(\"To address is required\");\r\n        }\r\n        params.toAddress = await this.walletProvider.formatAddress(\r\n            params.toAddress\r\n        );\r\n    }\r\n}\r\n\r\nexport const transferAction = {\r\n    name: \"transfer\",\r\n    description: \"Transfer tokens between addresses on the same chain\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting transfer action...\");\r\n\r\n        // Validate transfer\r\n        if (!(message.content.source === \"direct\")) {\r\n            callback?.({\r\n                text: \"I can't do that for you.\",\r\n                content: { error: \"Transfer not allowed\" },\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n        state.walletInfo = await bnbWalletProvider.get(\r\n            runtime,\r\n            message,\r\n            currentState\r\n        );\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state: currentState,\r\n            template: transferTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new TransferAction(walletProvider);\r\n        const paramOptions: TransferParams = {\r\n            chain: content.chain,\r\n            token: content.token,\r\n            amount: content.amount,\r\n            toAddress: content.toAddress,\r\n            data: content.data,\r\n        };\r\n        try {\r\n            const transferResp = await action.transfer(paramOptions);\r\n            callback?.({\r\n                text: `Successfully transferred ${transferResp.amount} ${transferResp.token} to ${transferResp.recipient}\\nTransaction Hash: ${transferResp.txHash}`,\r\n                content: { ...transferResp },\r\n            });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during transfer:\", error.message);\r\n            callback?.({\r\n                text: `Transfer failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: transferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Transfer 1 BNB to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you transfer 1 BNB to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC\",\r\n                    action: \"TRANSFER\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        token: \"BNB\",\r\n                        amount: \"1\",\r\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC\",\r\n                    action: \"TRANSFER\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        token: \"0x1234\",\r\n                        amount: \"1\",\r\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"TRANSFER\", \"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\r\n};\r\n","import type { Address, Hash } from \"viem\";\r\n\r\nexport type SupportedChain = \"bsc\" | \"bscTestnet\" | \"opBNB\" | \"opBNBTestnet\";\r\nexport type StakeAction = \"deposit\" | \"withdraw\" | \"claim\";\r\n\r\n// Action parameters\r\nexport interface GetBalanceParams {\r\n    chain: SupportedChain;\r\n    address?: Address;\r\n    token: string;\r\n}\r\n\r\nexport interface TransferParams {\r\n    chain: SupportedChain;\r\n    token?: string;\r\n    amount?: string;\r\n    toAddress: Address;\r\n    data?: `0x${string}`;\r\n}\r\n\r\nexport interface SwapParams {\r\n    chain: SupportedChain;\r\n    fromToken: string;\r\n    toToken: string;\r\n    amount: string;\r\n    slippage?: number;\r\n}\r\n\r\nexport interface BridgeParams {\r\n    fromChain: SupportedChain;\r\n    toChain: SupportedChain;\r\n    fromToken?: Address;\r\n    toToken?: Address;\r\n    amount: string;\r\n    toAddress?: Address;\r\n}\r\n\r\nexport interface StakeParams {\r\n    chain: SupportedChain;\r\n    action: StakeAction;\r\n    amount?: string;\r\n}\r\n\r\nexport interface FaucetParams {\r\n    token?: string;\r\n    toAddress?: Address;\r\n}\r\n\r\n// Action return types\r\nexport interface GetBalanceResponse {\r\n    chain: SupportedChain;\r\n    address: Address;\r\n    balance?: { token: string; amount: string };\r\n}\r\n\r\nexport interface TransferResponse {\r\n    chain: SupportedChain;\r\n    txHash: Hash;\r\n    recipient: Address;\r\n    amount: string;\r\n    token: string;\r\n    data?: `0x${string}`;\r\n}\r\n\r\nexport interface SwapResponse {\r\n    chain: SupportedChain;\r\n    txHash: Hash;\r\n    fromToken: string;\r\n    toToken: string;\r\n    amount: string;\r\n}\r\n\r\nexport interface BridgeResponse {\r\n    fromChain: SupportedChain;\r\n    toChain: SupportedChain;\r\n    txHash: Hash;\r\n    recipient: Address;\r\n    fromToken: string;\r\n    toToken: string;\r\n    amount: string;\r\n}\r\n\r\nexport interface StakeResponse {\r\n    response: string;\r\n}\r\n\r\nexport interface FaucetResponse {\r\n    token: string;\r\n    recipient: Address;\r\n    txHash: Hash;\r\n}\r\n\r\nexport interface IDeployERC20Params {\r\n    chain: SupportedChain;\r\n    name: string;\r\n    symbol: string;\r\n    decimals: number;\r\n    totalSupply: string;\r\n}\r\n\r\nexport interface IDeployERC721Params {\r\n    chain: SupportedChain;\r\n    name: string;\r\n    symbol: string;\r\n    baseURI: string;\r\n}\r\n\r\nexport interface IDeployERC1155Params {\r\n    chain: SupportedChain;\r\n    name: string;\r\n    baseURI: string;\r\n}\r\n\r\n// Contract ABIs\r\nexport const L1StandardBridgeAbi = [\r\n    {\r\n        type: \"constructor\",\r\n        inputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"receive\",\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"MESSENGER\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"contract CrossDomainMessenger\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"OTHER_BRIDGE\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"contract StandardBridge\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"bridgeERC20\",\r\n        inputs: [\r\n            {\r\n                name: \"_localToken\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_remoteToken\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"bridgeERC20To\",\r\n        inputs: [\r\n            {\r\n                name: \"_localToken\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_remoteToken\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"bridgeETH\",\r\n        inputs: [\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"bridgeETHTo\",\r\n        inputs: [\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"depositERC20\",\r\n        inputs: [\r\n            {\r\n                name: \"_l1Token\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_l2Token\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"depositERC20To\",\r\n        inputs: [\r\n            {\r\n                name: \"_l1Token\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_l2Token\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"depositETH\",\r\n        inputs: [\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"depositETHTo\",\r\n        inputs: [\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_minGasLimit\",\r\n                type: \"uint32\",\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"deposits\",\r\n        inputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"finalizeBridgeERC20\",\r\n        inputs: [\r\n            {\r\n                name: \"_localToken\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_remoteToken\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_from\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"finalizeBridgeETH\",\r\n        inputs: [\r\n            {\r\n                name: \"_from\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"finalizeERC20Withdrawal\",\r\n        inputs: [\r\n            {\r\n                name: \"_l1Token\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_l2Token\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_from\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"finalizeETHWithdrawal\",\r\n        inputs: [\r\n            {\r\n                name: \"_from\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"_extraData\",\r\n                type: \"bytes\",\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"initialize\",\r\n        inputs: [\r\n            {\r\n                name: \"_messenger\",\r\n                type: \"address\",\r\n                internalType: \"contract CrossDomainMessenger\",\r\n            },\r\n            {\r\n                name: \"_superchainConfig\",\r\n                type: \"address\",\r\n                internalType: \"contract SuperchainConfig\",\r\n            },\r\n            {\r\n                name: \"_systemConfig\",\r\n                type: \"address\",\r\n                internalType: \"contract SystemConfig\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"l2TokenBridge\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"messenger\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"contract CrossDomainMessenger\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"otherBridge\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"contract StandardBridge\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"paused\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"bool\",\r\n                internalType: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"superchainConfig\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"contract SuperchainConfig\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"systemConfig\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                internalType: \"contract SystemConfig\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        name: \"version\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"string\",\r\n                internalType: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ERC20BridgeFinalized\",\r\n        inputs: [\r\n            {\r\n                name: \"localToken\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"remoteToken\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: false,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ERC20BridgeInitiated\",\r\n        inputs: [\r\n            {\r\n                name: \"localToken\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"remoteToken\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: false,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ERC20DepositInitiated\",\r\n        inputs: [\r\n            {\r\n                name: \"l1Token\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"l2Token\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: false,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ERC20WithdrawalFinalized\",\r\n        inputs: [\r\n            {\r\n                name: \"l1Token\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"l2Token\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: false,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ETHBridgeFinalized\",\r\n        inputs: [\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ETHBridgeInitiated\",\r\n        inputs: [\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ETHDepositInitiated\",\r\n        inputs: [\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"ETHWithdrawalFinalized\",\r\n        inputs: [\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n    {\r\n        type: \"event\",\r\n        name: \"Initialized\",\r\n        inputs: [\r\n            {\r\n                name: \"version\",\r\n                type: \"uint8\",\r\n                indexed: false,\r\n                internalType: \"uint8\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n    },\r\n] as const;\r\n\r\nexport const L2StandardBridgeAbi = [\r\n    {\r\n        type: \"constructor\",\r\n        inputs: [\r\n            {\r\n                name: \"_owner\",\r\n                type: \"address\",\r\n                internalType: \"address payable\",\r\n            },\r\n            {\r\n                name: \"_delegationFee\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        name: \"AddressEmptyCode\",\r\n        type: \"error\",\r\n        inputs: [{ name: \"target\", type: \"address\", internalType: \"address\" }],\r\n    },\r\n    {\r\n        name: \"AddressInsufficientBalance\",\r\n        type: \"error\",\r\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\r\n    },\r\n    { name: \"FailedInnerCall\", type: \"error\", inputs: [] },\r\n    {\r\n        name: \"OwnableInvalidOwner\",\r\n        type: \"error\",\r\n        inputs: [{ name: \"owner\", type: \"address\", internalType: \"address\" }],\r\n    },\r\n    {\r\n        name: \"OwnableUnauthorizedAccount\",\r\n        type: \"error\",\r\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\r\n    },\r\n    {\r\n        name: \"SafeERC20FailedOperation\",\r\n        type: \"error\",\r\n        inputs: [{ name: \"token\", type: \"address\", internalType: \"address\" }],\r\n    },\r\n    {\r\n        name: \"OwnershipTransferred\",\r\n        type: \"event\",\r\n        inputs: [\r\n            {\r\n                name: \"previousOwner\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"newOwner\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n        signature:\r\n            \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\r\n    },\r\n    {\r\n        name: \"SetDelegationFee\",\r\n        type: \"event\",\r\n        inputs: [\r\n            {\r\n                name: \"_delegationFee\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n        signature:\r\n            \"0x0322f3257c2afe5fe8da7ab561f0d3384148487412fe2751678f2188731c0815\",\r\n    },\r\n    {\r\n        name: \"WithdrawTo\",\r\n        type: \"event\",\r\n        inputs: [\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"l2Token\",\r\n                type: \"address\",\r\n                indexed: true,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                indexed: false,\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n            },\r\n            {\r\n                name: \"minGasLimit\",\r\n                type: \"uint32\",\r\n                indexed: false,\r\n                internalType: \"uint32\",\r\n            },\r\n            {\r\n                name: \"extraData\",\r\n                type: \"bytes\",\r\n                indexed: false,\r\n                internalType: \"bytes\",\r\n            },\r\n        ],\r\n        anonymous: false,\r\n        signature:\r\n            \"0x56f66275d9ebc94b7d6895aa0d96a3783550d0183ba106408d387d19f2e877f1\",\r\n    },\r\n    {\r\n        name: \"L2_STANDARD_BRIDGE\",\r\n        type: \"function\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                value: \"0x4200000000000000000000000000000000000010\",\r\n                internalType: \"contract IL2StandardBridge\",\r\n            },\r\n        ],\r\n        constant: true,\r\n        signature: \"0x21d12763\",\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        name: \"L2_STANDARD_BRIDGE_ADDRESS\",\r\n        type: \"function\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                value: \"0x4200000000000000000000000000000000000010\",\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        constant: true,\r\n        signature: \"0x2cb7cb06\",\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        name: \"delegationFee\",\r\n        type: \"function\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"uint256\",\r\n                value: \"2000000000000000\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        constant: true,\r\n        signature: \"0xc5f0a58f\",\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        name: \"owner\",\r\n        type: \"function\",\r\n        inputs: [],\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"address\",\r\n                value: \"0xCe4750fDc02A07Eb0d99cA798CD5c170D8F8410A\",\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        constant: true,\r\n        signature: \"0x8da5cb5b\",\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        name: \"renounceOwnership\",\r\n        type: \"function\",\r\n        inputs: [],\r\n        outputs: [],\r\n        signature: \"0x715018a6\",\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        name: \"setDelegationFee\",\r\n        type: \"function\",\r\n        inputs: [\r\n            {\r\n                name: \"_delegationFee\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        outputs: [],\r\n        signature: \"0x55bfc81c\",\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        name: \"transferOwnership\",\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"newOwner\", type: \"address\", internalType: \"address\" },\r\n        ],\r\n        outputs: [],\r\n        signature: \"0xf2fde38b\",\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        name: \"withdraw\",\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\r\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\r\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\r\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\r\n        ],\r\n        outputs: [],\r\n        payable: true,\r\n        signature: \"0x32b7006d\",\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        name: \"withdrawFee\",\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\r\n        ],\r\n        outputs: [],\r\n        signature: \"0x1ac3ddeb\",\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        name: \"withdrawFeeToL1\",\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\r\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\r\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\r\n        ],\r\n        outputs: [],\r\n        signature: \"0x244cafe0\",\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        name: \"withdrawTo\",\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\r\n            { name: \"_to\", type: \"address\", internalType: \"address\" },\r\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\r\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\r\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\r\n        ],\r\n        outputs: [],\r\n        payable: true,\r\n        signature: \"0xa3a79548\",\r\n        stateMutability: \"payable\",\r\n    },\r\n] as const;\r\n\r\nexport const ListaDaoAbi = [\r\n    { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_account\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"ClaimAllWithdrawals\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_uuid\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"ClaimUndelegated\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_validator\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_uuid\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"ClaimUndelegatedFrom\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_account\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_idx\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"ClaimWithdrawal\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Delegate\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"_validator\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"bool\",\r\n                name: \"_delegateVotePower\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        name: \"DelegateTo\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"_delegateTo\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_votesChange\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"DelegateVoteTo\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"_src\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Deposit\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"DisableValidator\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint8\",\r\n                name: \"version\",\r\n                type: \"uint8\",\r\n            },\r\n        ],\r\n        name: \"Initialized\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"account\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"Paused\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"ProposeManager\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"_src\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"_dest\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"ReDelegate\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_rewardsId\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Redelegate\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"RemoveValidator\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_account\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amountInSlisBnb\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"RequestWithdraw\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"RewardsCompounded\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"bytes32\",\r\n                name: \"role\",\r\n                type: \"bytes32\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"bytes32\",\r\n                name: \"previousAdminRole\",\r\n                type: \"bytes32\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"bytes32\",\r\n                name: \"newAdminRole\",\r\n                type: \"bytes32\",\r\n            },\r\n        ],\r\n        name: \"RoleAdminChanged\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"bytes32\",\r\n                name: \"role\",\r\n                type: \"bytes32\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"account\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"sender\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"RoleGranted\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"bytes32\",\r\n                name: \"role\",\r\n                type: \"bytes32\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"account\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"sender\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"RoleRevoked\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_annualRate\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"SetAnnualRate\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"SetBSCValidator\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"SetManager\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_minBnb\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"SetMinBnb\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"SetRedirectAddress\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"SetReserveAmount\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"SetRevenuePool\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_synFee\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"SetSynFee\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_validator\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"_credit\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"bool\",\r\n                name: \"toRemove\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        name: \"SyncCreditContract\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_nextUndelegatedRequestIndex\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_bnbAmount\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_shares\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Undelegate\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_operator\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_bnbAmount\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_shares\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"UndelegateFrom\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"_amount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"UndelegateReserve\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"account\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"Unpaused\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"_address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"WhitelistValidator\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"BOT\",\r\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"DEFAULT_ADMIN_ROLE\",\r\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"GUARDIAN\",\r\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"TEN_DECIMALS\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"acceptNewManager\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"amountToDelegate\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"annualRate\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\r\n        ],\r\n        name: \"binarySearchCoveredMaxIndex\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\r\n        ],\r\n        name: \"claimUndelegated\",\r\n        outputs: [\r\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"_idx\", type: \"uint256\" }],\r\n        name: \"claimWithdraw\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\r\n        ],\r\n        name: \"claimWithdrawFor\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"compoundRewards\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\r\n        ],\r\n        name: \"convertBnbToShares\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\r\n        name: \"convertBnbToSnBnb\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\r\n        ],\r\n        name: \"convertSharesToBnb\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_amountInSlisBnb\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"convertSnBnbToBnb\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        name: \"creditContracts\",\r\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n        name: \"creditStates\",\r\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        name: \"delegateTo\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"delegateVotePower\",\r\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_delegateTo\", type: \"address\" },\r\n        ],\r\n        name: \"delegateVoteTo\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"deposit\",\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"depositReserve\",\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"disableValidator\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getAmountToUndelegate\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_amountToUndelegate\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" }],\r\n        name: \"getBotUndelegateRequest\",\r\n        outputs: [\r\n            {\r\n                components: [\r\n                    {\r\n                        internalType: \"uint256\",\r\n                        name: \"startTime\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        internalType: \"uint256\",\r\n                        name: \"endTime\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        internalType: \"uint256\",\r\n                        name: \"amount\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        internalType: \"uint256\",\r\n                        name: \"amountInSnBnb\",\r\n                        type: \"uint256\",\r\n                    },\r\n                ],\r\n                internalType: \"struct IStakeManager.BotUndelegateRequest\",\r\n                name: \"\",\r\n                type: \"tuple\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\r\n        ],\r\n        name: \"getClaimableAmount\",\r\n        outputs: [\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getContracts\",\r\n        outputs: [\r\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\r\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\r\n            { internalType: \"address\", name: \"_bscValidator\", type: \"address\" },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\r\n        ],\r\n        name: \"getDelegated\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\r\n        name: \"getRedelegateFee\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"bytes32\", name: \"role\", type: \"bytes32\" }],\r\n        name: \"getRoleAdmin\",\r\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getSlisBnbWithdrawLimit\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_slisBnbWithdrawLimit\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getTotalBnbInValidators\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getTotalPooledBnb\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\r\n        ],\r\n        name: \"getUserRequestStatus\",\r\n        outputs: [\r\n            { internalType: \"bool\", name: \"_isClaimable\", type: \"bool\" },\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"getUserWithdrawalRequests\",\r\n        outputs: [\r\n            {\r\n                components: [\r\n                    { internalType: \"uint256\", name: \"uuid\", type: \"uint256\" },\r\n                    {\r\n                        internalType: \"uint256\",\r\n                        name: \"amountInSnBnb\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        internalType: \"uint256\",\r\n                        name: \"startTime\",\r\n                        type: \"uint256\",\r\n                    },\r\n                ],\r\n                internalType: \"struct IStakeManager.WithdrawalRequest[]\",\r\n                name: \"\",\r\n                type: \"tuple[]\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\r\n            { internalType: \"address\", name: \"account\", type: \"address\" },\r\n        ],\r\n        name: \"grantRole\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\r\n            { internalType: \"address\", name: \"account\", type: \"address\" },\r\n        ],\r\n        name: \"hasRole\",\r\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\r\n            { internalType: \"address\", name: \"_admin\", type: \"address\" },\r\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\r\n            { internalType: \"address\", name: \"_bot\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" },\r\n            { internalType: \"address\", name: \"_revenuePool\", type: \"address\" },\r\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\r\n        ],\r\n        name: \"initialize\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"minBnb\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"nextConfirmedRequestUUID\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"pause\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"paused\",\r\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"placeholder\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"proposeNewManager\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"srcValidator\", type: \"address\" },\r\n            { internalType: \"address\", name: \"dstValidator\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        name: \"redelegate\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"redirectAddress\",\r\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"removeValidator\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\r\n            { internalType: \"address\", name: \"account\", type: \"address\" },\r\n        ],\r\n        name: \"renounceRole\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        name: \"requestIndexMap\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"requestUUID\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_amountInSlisBnb\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"requestWithdraw\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"reserveAmount\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"revenuePool\",\r\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"revokeBotRole\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\r\n            { internalType: \"address\", name: \"account\", type: \"address\" },\r\n        ],\r\n        name: \"revokeRole\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"uint256\", name: \"_annualRate\", type: \"uint256\" },\r\n        ],\r\n        name: \"setAnnualRate\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"setBSCValidator\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"setBotRole\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\r\n        name: \"setMinBnb\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"setRedirectAddress\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\r\n        name: \"setReserveAmount\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"setRevenuePool\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" }],\r\n        name: \"setSynFee\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" },\r\n        ],\r\n        name: \"supportsInterface\",\r\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"synFee\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"togglePause\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"toggleVote\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"totalDelegated\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"totalReserveAmount\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"unbondingBnb\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"undelegate\",\r\n        outputs: [\r\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n        ],\r\n        name: \"undelegateFrom\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_actualBnbAmount\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"undelegatedQuota\",\r\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n        name: \"validators\",\r\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\r\n        ],\r\n        name: \"whitelistValidator\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\r\n        name: \"withdrawReserve\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    { stateMutability: \"payable\", type: \"receive\" },\r\n] as const;\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { getToken } from \"@lifi/sdk\";\r\n\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\nimport { getBalanceTemplate } from \"../templates\";\r\nimport type {\r\n    GetBalanceParams,\r\n    GetBalanceResponse,\r\n    SupportedChain,\r\n} from \"../types\";\r\nimport { type Address, erc20Abi, formatEther, formatUnits } from \"viem\";\r\n\r\nexport { getBalanceTemplate };\r\n\r\nexport class GetBalanceAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async getBalance(params: GetBalanceParams): Promise<GetBalanceResponse> {\r\n        elizaLogger.debug(\"Get balance params:\", params);\r\n        await this.validateAndNormalizeParams(params);\r\n        elizaLogger.debug(\"Normalized get balance params:\", params);\r\n\r\n        const { chain, address, token } = params;\r\n        if (!address) {\r\n            throw new Error(\"Address is required for getting balance\");\r\n        }\r\n\r\n        this.walletProvider.switchChain(chain);\r\n        const nativeSymbol =\r\n            this.walletProvider.getChainConfigs(chain).nativeCurrency.symbol;\r\n        const chainId = this.walletProvider.getChainConfigs(chain).id;\r\n\r\n        let queryNativeToken = false;\r\n        if (\r\n            !token ||\r\n            token === \"\" ||\r\n            token.toLowerCase() === \"bnb\" ||\r\n            token.toLowerCase() === \"tbnb\"\r\n        ) {\r\n            queryNativeToken = true;\r\n        }\r\n\r\n        const resp: GetBalanceResponse = {\r\n            chain,\r\n            address,\r\n        };\r\n\r\n        // If ERC20 token is requested\r\n        if (!queryNativeToken) {\r\n            let amount: string;\r\n            if (token.startsWith(\"0x\")) {\r\n                amount = await this.getERC20TokenBalance(\r\n                    chain,\r\n                    address,\r\n                    token as `0x${string}`\r\n                );\r\n            } else {\r\n                if (chainId !== 56) {\r\n                    throw new Error(\r\n                        \"Only BSC mainnet is supported for querying balance by token symbol\"\r\n                    );\r\n                }\r\n\r\n                this.walletProvider.configureLiFiSdk(chain);\r\n                const tokenInfo = await getToken(chainId, token);\r\n                amount = await this.getERC20TokenBalance(\r\n                    chain,\r\n                    address,\r\n                    tokenInfo.address as `0x${string}`\r\n                );\r\n            }\r\n\r\n            resp.balance = { token, amount };\r\n        } else {\r\n            // If native token is requested\r\n            const nativeBalanceWei = await this.walletProvider\r\n                .getPublicClient(chain)\r\n                .getBalance({ address });\r\n            resp.balance = {\r\n                token: nativeSymbol,\r\n                amount: formatEther(nativeBalanceWei),\r\n            };\r\n        }\r\n\r\n        return resp;\r\n    }\r\n\r\n    async getERC20TokenBalance(\r\n        chain: SupportedChain,\r\n        address: Address,\r\n        tokenAddress: Address\r\n    ): Promise<string> {\r\n        const publicClient = this.walletProvider.getPublicClient(chain);\r\n\r\n        const balance = await publicClient.readContract({\r\n            address: tokenAddress,\r\n            abi: erc20Abi,\r\n            functionName: \"balanceOf\",\r\n            args: [address],\r\n        });\r\n\r\n        const decimals = await publicClient.readContract({\r\n            address: tokenAddress,\r\n            abi: erc20Abi,\r\n            functionName: \"decimals\",\r\n        });\r\n\r\n        return formatUnits(balance, decimals);\r\n    }\r\n\r\n    async validateAndNormalizeParams(params: GetBalanceParams): Promise<void> {\r\n        if (!params.address) {\r\n            params.address = this.walletProvider.getAddress();\r\n        } else {\r\n            params.address = await this.walletProvider.formatAddress(\r\n                params.address\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport const getBalanceAction = {\r\n    name: \"getBalance\",\r\n    description: \"Get balance of a token or all tokens for the given address\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting getBalance action...\");\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n        state.walletInfo = await bnbWalletProvider.get(\r\n            runtime,\r\n            message,\r\n            currentState\r\n        );\r\n\r\n        // Compose swap context\r\n        const getBalanceContext = composeContext({\r\n            state: currentState,\r\n            template: getBalanceTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: getBalanceContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new GetBalanceAction(walletProvider);\r\n        const getBalanceOptions: GetBalanceParams = {\r\n            chain: content.chain,\r\n            address: content.address,\r\n            token: content.token,\r\n        };\r\n        try {\r\n            const getBalanceResp = await action.getBalance(getBalanceOptions);\r\n            if (callback) {\r\n                let text = `No balance found for ${getBalanceOptions.address} on ${getBalanceOptions.chain}`;\r\n                if (getBalanceResp.balance) {\r\n                    text = `Balance of ${getBalanceResp.address} on ${getBalanceResp.chain}:\\n${\r\n                        getBalanceResp.balance.token\r\n                    }: ${getBalanceResp.balance.amount}`;\r\n                }\r\n                callback({\r\n                    text,\r\n                    content: { ...getBalanceResp },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during get balance:\", error.message);\r\n            callback?.({\r\n                text: `Get balance failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: getBalanceTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Check my balance of USDC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you check your balance of USDC\",\r\n                    action: \"GET_BALANCE\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        address: \"{{walletAddress}}\",\r\n                        token: \"USDC\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Check my balance of token 0x1234\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you check your balance of token 0x1234\",\r\n                    action: \"GET_BALANCE\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        address: \"{{walletAddress}}\",\r\n                        token: \"0x1234\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get USDC balance of 0x1234\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you check USDC balance of 0x1234\",\r\n                    action: \"GET_BALANCE\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        address: \"0x1234\",\r\n                        token: \"USDC\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Check my wallet balance on BSC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you check your wallet balance on BSC\",\r\n                    action: \"GET_BALANCE\",\r\n                    content: {\r\n                        chain: \"bsc\",\r\n                        address: \"{{walletAddress}}\",\r\n                        token: undefined,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"GET_BALANCE\", \"CHECK_BALANCE\"],\r\n};\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { parseEther, getContract, parseUnits, erc20Abi } from \"viem\";\r\n\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\nimport { bridgeTemplate } from \"../templates\";\r\nimport {\r\n    L1StandardBridgeAbi,\r\n    L2StandardBridgeAbi,\r\n    type BridgeParams,\r\n    type BridgeResponse,\r\n} from \"../types\";\r\n\r\nexport { bridgeTemplate };\r\n\r\n// Exported for tests\r\nexport class BridgeAction {\r\n    private readonly L1_BRIDGE_ADDRESS =\r\n        \"0xF05F0e4362859c3331Cb9395CBC201E3Fa6757Ea\" as const;\r\n    private readonly L2_BRIDGE_ADDRESS =\r\n        \"0x4000698e3De52120DE28181BaACda82B21568416\" as const;\r\n    private readonly LEGACY_ERC20_ETH =\r\n        \"0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\" as const;\r\n\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async bridge(params: BridgeParams): Promise<BridgeResponse> {\r\n        elizaLogger.debug(\"Bridge params:\", params);\r\n        await this.validateAndNormalizeParams(params);\r\n        elizaLogger.debug(\"Normalized bridge params:\", params);\r\n\r\n        const fromAddress = this.walletProvider.getAddress();\r\n\r\n        this.walletProvider.switchChain(params.fromChain);\r\n        const walletClient = this.walletProvider.getWalletClient(\r\n            params.fromChain\r\n        );\r\n        const publicClient = this.walletProvider.getPublicClient(\r\n            params.fromChain\r\n        );\r\n\r\n        const nativeToken =\r\n            this.walletProvider.chains[params.fromChain].nativeCurrency.symbol;\r\n\r\n        const resp: BridgeResponse = {\r\n            fromChain: params.fromChain,\r\n            toChain: params.toChain,\r\n            txHash: \"0x\",\r\n            recipient: params.toAddress ?? fromAddress,\r\n            amount: params.amount,\r\n            fromToken: params.fromToken ?? nativeToken,\r\n            toToken: params.toToken ?? nativeToken,\r\n        };\r\n\r\n        const account = this.walletProvider.getAccount();\r\n        const chain = this.walletProvider.getChainConfigs(params.fromChain);\r\n\r\n        const selfBridge = !params.toAddress || params.toAddress === fromAddress;\r\n        const nativeTokenBridge =\r\n            !params.fromToken || params.fromToken === nativeToken;\r\n\r\n        let amount: bigint;\r\n        if (nativeTokenBridge) {\r\n            amount = parseEther(params.amount);\r\n        } else {\r\n            const decimals = await publicClient.readContract({\r\n                address: params.fromToken!,\r\n                abi: erc20Abi,\r\n                functionName: \"decimals\",\r\n            });\r\n            amount = parseUnits(params.amount, decimals);\r\n        }\r\n\r\n        if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\r\n            // from L1 to L2\r\n            const l1BridgeContract = getContract({\r\n                address: this.L1_BRIDGE_ADDRESS,\r\n                abi: L1StandardBridgeAbi,\r\n                client: {\r\n                    public: publicClient,\r\n                    wallet: walletClient,\r\n                },\r\n            });\r\n\r\n            // check ERC20 allowance\r\n            if (!nativeTokenBridge) {\r\n                const allowance = await this.walletProvider.checkERC20Allowance(\r\n                    params.fromChain,\r\n                    params.fromToken!,\r\n                    fromAddress,\r\n                    this.L1_BRIDGE_ADDRESS\r\n                );\r\n                if (allowance < amount) {\r\n                    elizaLogger.log(\r\n                        `Increasing ERC20 allowance for L1 bridge. ${amount - allowance} more needed`\r\n                    );\r\n                    const txHash = await this.walletProvider.approveERC20(\r\n                        params.fromChain,\r\n                        params.fromToken!,\r\n                        this.L1_BRIDGE_ADDRESS,\r\n                        amount\r\n                    );\r\n                    await publicClient.waitForTransactionReceipt({\r\n                        hash: txHash,\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (selfBridge && nativeTokenBridge) {\r\n                const args = [1, \"0x\"] as const;\r\n                await l1BridgeContract.simulate.depositETH(args, {\r\n                    value: amount,\r\n                });\r\n                resp.txHash = await l1BridgeContract.write.depositETH(args, {\r\n                    account,\r\n                    chain,\r\n                    value: amount,\r\n                });\r\n            } else if (selfBridge && !nativeTokenBridge) {\r\n                const args = [\r\n                    params.fromToken!,\r\n                    params.toToken!,\r\n                    amount,\r\n                    1,\r\n                    \"0x\",\r\n                ] as const;\r\n                await l1BridgeContract.simulate.depositERC20(args, {\r\n                    account,\r\n                });\r\n                resp.txHash = await l1BridgeContract.write.depositERC20(args, {\r\n                    account,\r\n                    chain,\r\n                });\r\n            } else if (!selfBridge && nativeTokenBridge) {\r\n                const args = [params.toAddress!, 1, \"0x\"] as const;\r\n                await l1BridgeContract.simulate.depositETHTo(args, {\r\n                    value: amount,\r\n                });\r\n                resp.txHash = await l1BridgeContract.write.depositETHTo(args, {\r\n                    account,\r\n                    chain,\r\n                    value: amount,\r\n                });\r\n            } else {\r\n                const args = [\r\n                    params.fromToken!,\r\n                    params.toToken!,\r\n                    params.toAddress!,\r\n                    amount,\r\n                    1,\r\n                    \"0x\",\r\n                ] as const;\r\n                await l1BridgeContract.simulate.depositERC20To(args, {\r\n                    account,\r\n                });\r\n                resp.txHash = await l1BridgeContract.write.depositERC20To(\r\n                    args,\r\n                    {\r\n                        account,\r\n                        chain,\r\n                    }\r\n                );\r\n            }\r\n        } else if (params.fromChain === \"opBNB\" && params.toChain === \"bsc\") {\r\n            // from L2 to L1\r\n            const l2BridgeContract = getContract({\r\n                address: this.L2_BRIDGE_ADDRESS,\r\n                abi: L2StandardBridgeAbi,\r\n                client: {\r\n                    public: publicClient,\r\n                    wallet: walletClient,\r\n                },\r\n            });\r\n\r\n            const delegationFee = await publicClient.readContract({\r\n                address: this.L2_BRIDGE_ADDRESS,\r\n                abi: L2StandardBridgeAbi,\r\n                functionName: \"delegationFee\",\r\n            });\r\n\r\n            // check ERC20 allowance\r\n            if (!nativeTokenBridge) {\r\n                const allowance = await this.walletProvider.checkERC20Allowance(\r\n                    params.fromChain,\r\n                    params.fromToken!,\r\n                    fromAddress,\r\n                    this.L2_BRIDGE_ADDRESS\r\n                );\r\n                if (allowance < amount) {\r\n                    elizaLogger.log(\r\n                        `Increasing ERC20 allowance for L2 bridge. ${amount - allowance} more needed`\r\n                    );\r\n                    const txHash = await this.walletProvider.approveERC20(\r\n                        params.fromChain,\r\n                        params.fromToken!,\r\n                        this.L2_BRIDGE_ADDRESS,\r\n                        amount\r\n                    );\r\n                    await publicClient.waitForTransactionReceipt({\r\n                        hash: txHash,\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (selfBridge && nativeTokenBridge) {\r\n                const args = [this.LEGACY_ERC20_ETH, amount, 1, \"0x\"] as const;\r\n                const value = amount + delegationFee;\r\n                await l2BridgeContract.simulate.withdraw(args, { value });\r\n                resp.txHash = await l2BridgeContract.write.withdraw(args, {\r\n                    account,\r\n                    chain,\r\n                    value,\r\n                });\r\n            } else if (selfBridge && !nativeTokenBridge) {\r\n                const args = [params.fromToken!, amount, 1, \"0x\"] as const;\r\n                const value = delegationFee;\r\n                await l2BridgeContract.simulate.withdraw(args, {\r\n                    account,\r\n                    value,\r\n                });\r\n                resp.txHash = await l2BridgeContract.write.withdraw(args, {\r\n                    account,\r\n                    chain,\r\n                    value,\r\n                });\r\n            } else if (!selfBridge && nativeTokenBridge) {\r\n                const args = [\r\n                    this.LEGACY_ERC20_ETH,\r\n                    params.toAddress!,\r\n                    amount,\r\n                    1,\r\n                    \"0x\",\r\n                ] as const;\r\n                const value = amount + delegationFee;\r\n                await l2BridgeContract.simulate.withdrawTo(args, { value });\r\n                resp.txHash = await l2BridgeContract.write.withdrawTo(args, {\r\n                    account,\r\n                    chain,\r\n                    value,\r\n                });\r\n            } else {\r\n                const args = [\r\n                    params.fromToken!,\r\n                    params.toAddress!,\r\n                    amount,\r\n                    1,\r\n                    \"0x\",\r\n                ] as const;\r\n                const value = delegationFee;\r\n                await l2BridgeContract.simulate.withdrawTo(args, {\r\n                    account,\r\n                    value,\r\n                });\r\n                resp.txHash = await l2BridgeContract.write.withdrawTo(args, {\r\n                    account,\r\n                    chain,\r\n                    value,\r\n                });\r\n            }\r\n        } else {\r\n            throw new Error(\"Unsupported bridge direction\");\r\n        }\r\n\r\n        if (!resp.txHash || resp.txHash === \"0x\") {\r\n            throw new Error(\"Get transaction hash failed\");\r\n        }\r\n\r\n        // wait for the transaction to be confirmed\r\n        await publicClient.waitForTransactionReceipt({\r\n            hash: resp.txHash,\r\n        });\r\n\r\n        return resp;\r\n    }\r\n\r\n    async validateAndNormalizeParams(params: BridgeParams) {\r\n        if (!params.toAddress) {\r\n            params.toAddress = this.walletProvider.getAddress();\r\n        } else {\r\n            params.toAddress = await this.walletProvider.formatAddress(\r\n                params.toAddress\r\n            );\r\n        }\r\n\r\n        if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\r\n            if (params.fromToken && !params.toToken) {\r\n                throw new Error(\r\n                    \"token address on opBNB is required when bridging ERC20 from BSC to opBNB\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// NOTE: The bridge action only supports bridge funds between BSC and opBNB for now. We may adding stargate support later.\r\nexport const bridgeAction = {\r\n    name: \"bridge\",\r\n    description: \"Bridge tokens between BSC and opBNB\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting bridge action...\");\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n\r\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\r\n\r\n        // Compose bridge context\r\n        const bridgeContext = composeContext({\r\n            state: currentState,\r\n            template: bridgeTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: bridgeContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new BridgeAction(walletProvider);\r\n        const paramOptions: BridgeParams = {\r\n            fromChain: content.fromChain,\r\n            toChain: content.toChain,\r\n            fromToken: content.fromToken,\r\n            toToken: content.toToken,\r\n            amount: content.amount,\r\n            toAddress: content.toAddress,\r\n        };\r\n        try {\r\n            const bridgeResp = await action.bridge(paramOptions);\r\n            callback?.({\r\n                text: `Successfully bridged ${bridgeResp.amount} ${bridgeResp.fromToken} from ${bridgeResp.fromChain} to ${bridgeResp.toChain}\\nTransaction Hash: ${bridgeResp.txHash}`,\r\n                content: { ...bridgeResp },\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token bridge:\", error.message);\r\n            callback?.({\r\n                text: `Bridge failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: bridgeTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deposit 1 BNB from BSC to opBNB\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you bridge 1 BNB from BSC to opBNB\",\r\n                    action: \"BRIDGE\",\r\n                    content: {\r\n                        fromChain: \"bsc\",\r\n                        toChain: \"opBNB\",\r\n                        fromToken: undefined,\r\n                        toToken: undefined,\r\n                        amount: 1,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Transfer 1 BNB from BSC to address 0x1234 on opBNB\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you bridge 1 BNB from BSC to address 0x1234 on opBNB\",\r\n                    action: \"BRIDGE\",\r\n                    content: {\r\n                        fromChain: \"bsc\",\r\n                        toChain: \"opBNB\",\r\n                        fromToken: undefined,\r\n                        toToken: undefined,\r\n                        amount: 1,\r\n                        toAddress: \"0x1234\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deposit 1 0x123 token from BSC to address 0x456 on opBNB. The corresponding token address on opBNB is 0x789\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you bridge 1 0x123 token from BSC to address 0x456 on opBNB\",\r\n                    action: \"BRIDGE\",\r\n                    content: {\r\n                        fromChain: \"bsc\",\r\n                        toChain: \"opBNB\",\r\n                        fromToken: \"0x123\",\r\n                        toToken: \"0x789\",\r\n                        amount: 1,\r\n                        toAddress: \"0x456\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Withdraw 1 BNB from opBNB to BSC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you bridge 1 BNB from opBNB to BSC\",\r\n                    action: \"BRIDGE\",\r\n                    content: {\r\n                        fromChain: \"opBNB\",\r\n                        toChain: \"bsc\",\r\n                        fromToken: undefined,\r\n                        toToken: undefined,\r\n                        amount: 1,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Withdraw 1 0x1234 token from opBNB to address 0x5678 on BSC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you bridge 1 0x1234 token from opBNB to address 0x5678 on BSC\",\r\n                    action: \"BRIDGE\",\r\n                    content: {\r\n                        fromChain: \"opBNB\",\r\n                        toChain: \"bsc\",\r\n                        fromToken: \"0x1234\",\r\n                        toToken: undefined,\r\n                        amount: 1,\r\n                        toAddress: \"0x5678\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"BRIDGE\", \"TOKEN_BRIDGE\", \"DEPOSIT\", \"WITHDRAW\"],\r\n};\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { type Address, formatEther, parseEther, erc20Abi } from \"viem\";\r\n\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\nimport { stakeTemplate } from \"../templates\";\r\nimport { ListaDaoAbi, type StakeParams, type StakeResponse } from \"../types\";\r\n\r\nexport { stakeTemplate };\r\n\r\n// Exported for tests\r\nexport class StakeAction {\r\n    private readonly LISTA_DAO =\r\n        \"0x1adB950d8bB3dA4bE104211D5AB038628e477fE6\" as const;\r\n    private readonly SLIS_BNB =\r\n        \"0xB0b84D294e0C75A6abe60171b70edEb2EFd14A1B\" as const;\r\n\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async stake(params: StakeParams): Promise<StakeResponse> {\r\n        elizaLogger.debug(\"Stake params:\", params);\r\n        this.validateStakeParams(params);\r\n        elizaLogger.debug(\"Normalized stake params:\", params);\r\n\r\n        this.walletProvider.switchChain(\"bsc\"); // only BSC is supported\r\n\r\n        const actions = {\r\n            deposit: async () => {\r\n                if (!params.amount) {\r\n                    throw new Error(\"Amount is required for deposit\");\r\n                }\r\n                return await this.doDeposit(params.amount);\r\n            },\r\n            withdraw: async () => await this.doWithdraw(params.amount),\r\n            claim: async () => await this.doClaim(),\r\n        };\r\n        const resp = await actions[params.action]();\r\n        return { response: resp };\r\n    }\r\n\r\n    validateStakeParams(params: StakeParams) {\r\n        if (params.chain !== \"bsc\") {\r\n            throw new Error(\"Only BSC mainnet is supported\");\r\n        }\r\n\r\n        if (params.action === \"deposit\" && !params.amount) {\r\n            throw new Error(\"Amount is required for deposit\");\r\n        }\r\n\r\n        if (params.action === \"withdraw\" && !params.amount) {\r\n            throw new Error(\"Amount is required for withdraw\");\r\n        }\r\n    }\r\n\r\n    async doDeposit(amount: string): Promise<string> {\r\n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\r\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\r\n        const account = walletClient.account;\r\n        if (!account) {\r\n            throw new Error(\"Wallet account not found\");\r\n        }\r\n\r\n        const { request } = await publicClient.simulateContract({\r\n            account: this.walletProvider.getAccount(),\r\n            address: this.LISTA_DAO,\r\n            abi: ListaDaoAbi,\r\n            functionName: \"deposit\",\r\n            value: parseEther(amount),\r\n        });\r\n        const txHash = await walletClient.writeContract(request);\r\n        await publicClient.waitForTransactionReceipt({\r\n            hash: txHash,\r\n        });\r\n\r\n        const slisBNBBalance = await publicClient.readContract({\r\n            address: this.SLIS_BNB,\r\n            abi: erc20Abi,\r\n            functionName: \"balanceOf\",\r\n            args: [account.address],\r\n        });\r\n\r\n        return `Successfully do deposit. ${formatEther(slisBNBBalance)} slisBNB held. \\nTransaction Hash: ${txHash}`;\r\n    }\r\n\r\n    async doWithdraw(amount?: string): Promise<string> {\r\n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\r\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\r\n        const account = walletClient.account;\r\n        if (!account) {\r\n            throw new Error(\"Wallet account not found\");\r\n        }\r\n\r\n        // If amount is not provided, withdraw all slisBNB\r\n        let amountToWithdraw: bigint;\r\n        if (!amount) {\r\n            amountToWithdraw = await publicClient.readContract({\r\n                address: this.SLIS_BNB,\r\n                abi: erc20Abi,\r\n                functionName: \"balanceOf\",\r\n                args: [account.address],\r\n            });\r\n        } else {\r\n            amountToWithdraw = parseEther(amount);\r\n        }\r\n\r\n        // check slisBNB allowance\r\n        const allowance = await this.walletProvider.checkERC20Allowance(\r\n            \"bsc\",\r\n            this.SLIS_BNB,\r\n            account.address,\r\n            this.LISTA_DAO\r\n        );\r\n        if (allowance < amountToWithdraw) {\r\n            elizaLogger.log(\r\n                `Increasing slisBNB allowance for Lista DAO. ${amountToWithdraw - allowance} more needed`\r\n            );\r\n            const txHash = await this.walletProvider.approveERC20(\r\n                \"bsc\",\r\n                this.SLIS_BNB,\r\n                this.LISTA_DAO,\r\n                amountToWithdraw\r\n            );\r\n            await publicClient.waitForTransactionReceipt({\r\n                hash: txHash,\r\n            });\r\n        }\r\n\r\n        const { request } = await publicClient.simulateContract({\r\n            account: this.walletProvider.getAccount(),\r\n            address: this.LISTA_DAO,\r\n            abi: ListaDaoAbi,\r\n            functionName: \"requestWithdraw\",\r\n            args: [amountToWithdraw],\r\n        });\r\n        const txHash = await walletClient.writeContract(request);\r\n        await publicClient.waitForTransactionReceipt({\r\n            hash: txHash,\r\n        });\r\n\r\n        const slisBNBBalance = await publicClient.readContract({\r\n            address: this.SLIS_BNB,\r\n            abi: erc20Abi,\r\n            functionName: \"balanceOf\",\r\n            args: [account.address],\r\n        });\r\n\r\n        return `Successfully do withdraw. ${formatEther(slisBNBBalance)} slisBNB left. \\nTransaction Hash: ${txHash}`;\r\n    }\r\n\r\n    async doClaim(): Promise<string> {\r\n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\r\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\r\n        const account = walletClient.account;\r\n        if (!account) {\r\n            throw new Error(\"Wallet account not found\");\r\n        }\r\n\r\n        const requests = await publicClient.readContract({\r\n            address: this.LISTA_DAO,\r\n            abi: ListaDaoAbi,\r\n            functionName: \"getUserWithdrawalRequests\",\r\n            args: [account.address],\r\n        });\r\n\r\n        let totalClaimed = 0n;\r\n        for (let idx = 0; idx < requests.length; idx++) {\r\n            const [isClaimable, amount] = await publicClient.readContract({\r\n                address: this.LISTA_DAO,\r\n                abi: ListaDaoAbi,\r\n                functionName: \"getUserRequestStatus\",\r\n                args: [account.address, BigInt(idx)],\r\n            });\r\n\r\n            if (isClaimable) {\r\n                const { request } = await publicClient.simulateContract({\r\n                    account: this.walletProvider.getAccount(),\r\n                    address: this.LISTA_DAO,\r\n                    abi: ListaDaoAbi,\r\n                    functionName: \"claimWithdraw\",\r\n                    args: [BigInt(idx)],\r\n                });\r\n\r\n                const txHash = await walletClient.writeContract(request);\r\n                await publicClient.waitForTransactionReceipt({\r\n                    hash: txHash,\r\n                });\r\n\r\n                totalClaimed += amount;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return `Successfully do claim. ${formatEther(totalClaimed)} BNB claimed.`;\r\n    }\r\n}\r\n\r\nexport const stakeAction = {\r\n    name: \"stake\",\r\n    description: \"Stake related actions through Lista DAO\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting stake action...\");\r\n\r\n        // Validate stake\r\n        if (!(message.content.source === \"direct\")) {\r\n            callback?.({\r\n                text: \"I can't do that for you.\",\r\n                content: { error: \"Stake not allowed\" },\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n        state.walletInfo = await bnbWalletProvider.get(\r\n            runtime,\r\n            message,\r\n            currentState\r\n        );\r\n\r\n        // Compose stake context\r\n        const stakeContext = composeContext({\r\n            state: currentState,\r\n            template: stakeTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: stakeContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new StakeAction(walletProvider);\r\n        const paramOptions: StakeParams = {\r\n            chain: content.chain,\r\n            action: content.action,\r\n            amount: content.amount,\r\n        };\r\n        try {\r\n            const stakeResp = await action.stake(paramOptions);\r\n            callback?.({\r\n                text: stakeResp.response,\r\n                content: { ...stakeResp },\r\n            });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during stake:\", error.message);\r\n            callback?.({\r\n                text: `Stake failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: stakeTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Stake 1 BNB on BSC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you stake 1 BNB to Lista DAO on BSC\",\r\n                    action: \"STAKE\",\r\n                    content: {\r\n                        action: \"deposit\",\r\n                        amount: \"1\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deposit 1 BNB to Lista DAO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you deposit 1 BNB to Lista DAO on BSC\",\r\n                    action: \"STAKE\",\r\n                    content: {\r\n                        action: \"deposit\",\r\n                        amount: \"1\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Undelegate 1 slisBNB on BSC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you undelegate 1 slisBNB from Lista DAO on BSC\",\r\n                    action: \"STAKE\",\r\n                    content: {\r\n                        action: \"withdraw\",\r\n                        amount: \"1\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Withdraw 1 slisBNB from Lista DAO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you withdraw 1 slisBNB from Lista DAO on BSC\",\r\n                    action: \"STAKE\",\r\n                    content: {\r\n                        action: \"withdraw\",\r\n                        amount: \"1\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Claim unlocked BNB from Lista DAO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll help you claim unlocked BNB from Lista DAO on BSC\",\r\n                    action: \"STAKE\",\r\n                    content: {\r\n                        action: \"claim\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"DELEGATE\",\r\n        \"STAKE\",\r\n        \"DEPOSIT\",\r\n        \"UNDELEGATE\",\r\n        \"UNSTAKE\",\r\n        \"WITHDRAW\",\r\n        \"CLAIM\",\r\n    ],\r\n};\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport type { Hex } from \"viem\";\r\nimport WebSocket, { type ClientOptions } from \"ws\";\r\n\r\nimport { faucetTemplate } from \"../templates\";\r\nimport type { FaucetResponse, FaucetParams } from \"../types\";\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\n\r\nexport { faucetTemplate };\r\n\r\n// Exported for tests\r\nexport class FaucetAction {\r\n    private readonly SUPPORTED_TOKENS: string[] = [\r\n        \"BNB\",\r\n        \"BTC\",\r\n        \"BUSD\",\r\n        \"DAI\",\r\n        \"ETH\",\r\n        \"USDC\",\r\n    ] as const;\r\n    private readonly FAUCET_URL = \"wss://testnet.bnbchain.org/faucet-smart/api\";\r\n\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async faucet(params: FaucetParams): Promise<FaucetResponse> {\r\n        elizaLogger.debug(\"Faucet params:\", params);\r\n        await this.validateAndNormalizeParams(params);\r\n        elizaLogger.debug(\"Normalized faucet params:\", params);\r\n\r\n        // After validation, we know these values exist\r\n        if (!params.token || !params.toAddress) {\r\n            throw new Error(\"Token and address are required for faucet\");\r\n        }\r\n\r\n        const resp: FaucetResponse = {\r\n            token: params.token,\r\n            recipient: params.toAddress,\r\n            txHash: \"0x\",\r\n        };\r\n\r\n        const options: ClientOptions = {\r\n            headers: {\r\n                Connection: \"Upgrade\",\r\n                Upgrade: \"websocket\",\r\n            },\r\n        };\r\n\r\n        const ws = new WebSocket(this.FAUCET_URL, options);\r\n\r\n        try {\r\n            // Wait for connection\r\n            await new Promise<void>((resolve, reject) => {\r\n                ws.once(\"open\", () => resolve());\r\n                ws.once(\"error\", reject);\r\n            });\r\n\r\n            // Send the message\r\n            const message = {\r\n                tier: 0,\r\n                url: params.toAddress,\r\n                symbol: params.token,\r\n                captcha: \"noCaptchaToken\",\r\n            };\r\n            ws.send(JSON.stringify(message));\r\n\r\n            // Wait for response with transaction hash\r\n            const txHash = await new Promise<Hex>((resolve, reject) => {\r\n                const timeout = setTimeout(() => {\r\n                    ws.close();\r\n                    reject(new Error(\"Faucet request timeout\"));\r\n                }, 15000);\r\n\r\n                ws.on(\"message\", (data) => {\r\n                    const response = JSON.parse(data.toString());\r\n\r\n                    // First response: funding request accepted\r\n                    if (response.success) {\r\n                        return;\r\n                    }\r\n\r\n                    // Second response: transaction details\r\n                    if (response.requests?.length > 0) {\r\n                        const txHash = response.requests[0].tx.hash;\r\n                        if (txHash) {\r\n                            clearTimeout(timeout);\r\n                            resolve(txHash as Hex);\r\n                        }\r\n                    }\r\n\r\n                    // Handle error case\r\n                    if (response.error) {\r\n                        clearTimeout(timeout);\r\n                        reject(new Error(response.error));\r\n                    }\r\n                });\r\n\r\n                ws.on(\"error\", (error) => {\r\n                    clearTimeout(timeout);\r\n                    reject(\r\n                        new Error(`WebSocket error occurred: ${error.message}`)\r\n                    );\r\n                });\r\n            });\r\n\r\n            resp.txHash = txHash;\r\n            return resp;\r\n        } finally {\r\n            ws.close();\r\n        }\r\n    }\r\n\r\n    async validateAndNormalizeParams(params: FaucetParams): Promise<void> {\r\n        if (!params.toAddress) {\r\n            params.toAddress = this.walletProvider.getAddress();\r\n        } else {\r\n            params.toAddress = await this.walletProvider.formatAddress(\r\n                params.toAddress\r\n            );\r\n        }\r\n\r\n        if (!params.token) {\r\n            params.token = \"BNB\";\r\n        }\r\n        if (!this.SUPPORTED_TOKENS.includes(params.token)) {\r\n            throw new Error(\"Unsupported token\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const faucetAction = {\r\n    name: \"faucet\",\r\n    description: \"Get test tokens from the faucet\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting faucet action...\");\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n\r\n        state.walletInfo = await bnbWalletProvider.get(\r\n            runtime,\r\n            message,\r\n            currentState\r\n        );\r\n\r\n        // Compose faucet context\r\n        const faucetContext = composeContext({\r\n            state: currentState,\r\n            template: faucetTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: faucetContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new FaucetAction(walletProvider);\r\n        const paramOptions: FaucetParams = {\r\n            token: content.token,\r\n            toAddress: content.toAddress,\r\n        };\r\n        try {\r\n            const faucetResp = await action.faucet(paramOptions);\r\n            callback?.({\r\n                text: `Successfully transferred ${faucetResp.token} to ${faucetResp.recipient}\\nTransaction Hash: ${faucetResp.txHash}`,\r\n                content: {\r\n                    hash: faucetResp.txHash,\r\n                    recipient: faucetResp.recipient,\r\n                    chain: content.chain,\r\n                },\r\n            });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during faucet:\", error.message);\r\n            callback?.({\r\n                text: `Get test tokens failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: faucetTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get some USDC from the faucet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Sure, I'll request some USDC from the faucet on BSC Testnet now.\",\r\n                    action: \"FAUCET\",\r\n                    content: {\r\n                        token: \"USDC\",\r\n                        toAddress: \"{{walletAddress}}\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get some test tokens from the faucet on BSC Testnet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Of course, getting tBNB from the faucet on BSC Testnet now.\",\r\n                    action: \"FAUCET\",\r\n                    content: {\r\n                        token: \"BNB\",\r\n                        toAddress: \"{{walletAddress}}\",\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"FAUCET\", \"GET_TEST_TOKENS\"],\r\n};\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport solc from \"solc\";\r\nimport { type Abi, type Address, parseUnits } from \"viem\";\r\nimport {\r\n    bnbWalletProvider,\r\n    initWalletProvider,\r\n    type WalletProvider,\r\n} from \"../providers/wallet\";\r\nimport { ercContractTemplate } from \"../templates\";\r\nimport type {\r\n    IDeployERC1155Params,\r\n    IDeployERC721Params,\r\n    IDeployERC20Params,\r\n    SupportedChain,\r\n} from \"../types\";\r\nimport { compileSolidity } from \"../utils/contracts\";\r\n\r\nexport { ercContractTemplate };\r\n\r\nexport class DeployAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async compileSolidity(contractName: string, source: string) {\r\n        const solName = `${contractName}.sol`;\r\n        const input = {\r\n            language: \"Solidity\",\r\n            sources: {\r\n                [solName]: {\r\n                    content: source,\r\n                },\r\n            },\r\n            settings: {\r\n                outputSelection: {\r\n                    \"*\": {\r\n                        \"*\": [\"*\"],\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        elizaLogger.debug(\"Compiling contract...\");\r\n        const output = JSON.parse(solc.compile(JSON.stringify(input)));\r\n\r\n        // check compile error\r\n        if (output.errors) {\r\n            const hasError = output.errors.some(\r\n                (error) => error.type === \"Error\"\r\n            );\r\n            if (hasError) {\r\n                elizaLogger.error(\r\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\r\n                );\r\n            }\r\n        }\r\n\r\n        const contract = output.contracts[solName][contractName];\r\n\r\n        if (!contract) {\r\n            elizaLogger.error(\"Compilation result is empty\");\r\n        }\r\n\r\n        elizaLogger.debug(\"Contract compiled successfully\");\r\n        return {\r\n            abi: contract.abi as Abi,\r\n            bytecode: contract.evm.bytecode.object,\r\n        };\r\n    }\r\n\r\n    async deployERC20(deployTokenParams: IDeployERC20Params) {\r\n        elizaLogger.debug(\"deployTokenParams\", deployTokenParams);\r\n\r\n        const { name, symbol, decimals, totalSupply, chain } =\r\n            deployTokenParams;\r\n        if (!name || name === \"\") {\r\n            throw new Error(\"Token name is required\");\r\n        }\r\n        if (!symbol || symbol === \"\") {\r\n            throw new Error(\"Token symbol is required\");\r\n        }\r\n        if (!decimals || decimals === 0) {\r\n            throw new Error(\"Token decimals is required\");\r\n        }\r\n        if (!totalSupply || totalSupply === \"\") {\r\n            throw new Error(\"Token total supply is required\");\r\n        }\r\n\r\n        try {\r\n            const totalSupplyWithDecimals = parseUnits(totalSupply, decimals);\r\n            const args = [name, symbol, decimals, totalSupplyWithDecimals];\r\n            const contractAddress = await this.deployContract(\r\n                chain,\r\n                \"ERC20Contract\",\r\n                args\r\n            );\r\n\r\n            return {\r\n                address: contractAddress,\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Depoly ERC20 failed:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deployERC721(deployNftParams: IDeployERC721Params) {\r\n        elizaLogger.debug(\"deployNftParams\", deployNftParams);\r\n\r\n        const { baseURI, name, symbol, chain } = deployNftParams;\r\n        if (!name || name === \"\") {\r\n            throw new Error(\"Token name is required\");\r\n        }\r\n        if (!symbol || symbol === \"\") {\r\n            throw new Error(\"Token symbol is required\");\r\n        }\r\n        if (!baseURI || baseURI === \"\") {\r\n            throw new Error(\"Token baseURI is required\");\r\n        }\r\n        try {\r\n            const args = [name, symbol, baseURI];\r\n            const contractAddress = await this.deployContract(\r\n                chain,\r\n                \"ERC721Contract\",\r\n                args\r\n            );\r\n\r\n            return {\r\n                address: contractAddress,\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Depoly ERC721 failed:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deployERC1155(deploy1155Params: IDeployERC1155Params) {\r\n        elizaLogger.debug(\"deploy1155Params\", deploy1155Params);\r\n\r\n        const { baseURI, name, chain } = deploy1155Params;\r\n        if (!name || name === \"\") {\r\n            throw new Error(\"Token name is required\");\r\n        }\r\n        if (!baseURI || baseURI === \"\") {\r\n            throw new Error(\"Token baseURI is required\");\r\n        }\r\n        try {\r\n            const args = [name, baseURI];\r\n            const contractAddress = await this.deployContract(\r\n                chain,\r\n                \"ERC1155Contract\",\r\n                args\r\n            );\r\n\r\n            return {\r\n                address: contractAddress,\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Depoly ERC1155 failed:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deployContract(\r\n        chain: SupportedChain,\r\n        contractName: string,\r\n        args: any[]\r\n    ): Promise<Address | null | undefined> {\r\n        const { abi, bytecode } = await compileSolidity(contractName);\r\n        if (!bytecode) {\r\n            throw new Error(\"Bytecode is empty after compilation\");\r\n        }\r\n\r\n        this.walletProvider.switchChain(chain);\r\n\r\n        const chainConfig = this.walletProvider.getChainConfigs(chain);\r\n        const walletClient = this.walletProvider.getWalletClient(chain);\r\n        const hash = await walletClient.deployContract({\r\n            account: this.walletProvider.getAccount(),\r\n            abi,\r\n            bytecode,\r\n            args,\r\n            chain: chainConfig,\r\n        });\r\n\r\n        elizaLogger.debug(\"Waiting for deployment transaction...\", hash);\r\n        const publicClient = this.walletProvider.getPublicClient(chain);\r\n        const receipt = await publicClient.waitForTransactionReceipt({\r\n            hash,\r\n        });\r\n        elizaLogger.debug(\"Contract deployed successfully!\");\r\n\r\n        return receipt.contractAddress;\r\n    }\r\n}\r\n\r\nexport const deployAction = {\r\n    name: \"DEPLOY_TOKEN\",\r\n    description:\r\n        \"Deploy token contracts (ERC20/721/1155) based on user specifications\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting deploy action...\");\r\n\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n\r\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\r\n\r\n        // Compose context\r\n        const context = composeContext({\r\n            state: currentState,\r\n            template: ercContractTemplate,\r\n        });\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: context,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new DeployAction(walletProvider);\r\n        try {\r\n            const contractType = content.contractType;\r\n            let result: any;\r\n            switch (contractType.toLocaleLowerCase()) {\r\n                case \"erc20\":\r\n                    result = await action.deployERC20({\r\n                        chain: content.chain,\r\n                        decimals: content.decimals,\r\n                        symbol: content.symbol,\r\n                        name: content.name,\r\n                        totalSupply: content.totalSupply,\r\n                    });\r\n                    break;\r\n                case \"erc721\":\r\n                    result = await action.deployERC721({\r\n                        chain: content.chain,\r\n                        name: content.name,\r\n                        symbol: content.symbol,\r\n                        baseURI: content.baseURI,\r\n                    });\r\n                    break;\r\n                case \"erc1155\":\r\n                    result = await action.deployERC1155({\r\n                        chain: content.chain,\r\n                        name: content.name,\r\n                        baseURI: content.baseURI,\r\n                    });\r\n                    break;\r\n            }\r\n\r\n            if (result) {\r\n                callback?.({\r\n                    text: `Successfully create contract - ${result?.address}`,\r\n                    content: { ...result },\r\n                });\r\n            } else {\r\n                callback?.({\r\n                    text: \"Unsuccessfully create contract\",\r\n                    content: { ...result },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during deploy:\", error.message);\r\n            callback?.({\r\n                text: `Deploy failed: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: ercContractTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"deploy an ERC20 token with name 'MyToken', symbol 'MTK', decimals 18, total supply 10000\",\r\n                    action: \"DEPLOY_TOKEN\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deploy an ERC721 NFT contract with name 'MyNFT', symbol 'MNFT', baseURI 'https://my-nft-base-uri.com'\",\r\n                    action: \"DEPLOY_TOKEN\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deploy an ERC1155 contract with name 'My1155', baseURI 'https://my-1155-base-uri.com'\",\r\n                    action: \"DEPLOY_TOKEN\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"DEPLOY_ERC20\",\r\n        \"DEPLOY_ERC721\",\r\n        \"DEPLOY_ERC1155\",\r\n        \"CREATE_TOKEN\",\r\n        \"CREATE_NFT\",\r\n        \"CREATE_1155\",\r\n    ],\r\n};\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport fs from \"node:fs\";\r\nimport { createRequire } from \"node:module\";\r\nimport path from \"node:path\";\r\nimport { fileURLToPath } from \"node:url\";\r\nimport solc from \"solc\";\r\n\r\nconst require = createRequire(import.meta.url);\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst baseDir = path.resolve(__dirname, \"../../plugin-bnb/src/contracts\");\r\n\r\nfunction getContractSource(contractPath: string) {\r\n    return fs.readFileSync(contractPath, \"utf8\");\r\n}\r\n\r\nfunction findImports(importPath: string) {\r\n    try {\r\n        if (importPath.startsWith(\"@openzeppelin/\")) {\r\n            const modPath = require.resolve(importPath);\r\n            return { contents: fs.readFileSync(modPath, \"utf8\") };\r\n        }\r\n\r\n        const localPath = path.resolve(\"./contracts\", importPath);\r\n        if (fs.existsSync(localPath)) {\r\n            return { contents: fs.readFileSync(localPath, \"utf8\") };\r\n        }\r\n        return { error: \"File not found\" };\r\n    } catch {\r\n        return { error: `File not found: ${importPath}` };\r\n    }\r\n}\r\n\r\nexport async function compileSolidity(contractFileName: string) {\r\n    const contractPath = path.join(baseDir, `${contractFileName}.sol`);\r\n    const source = getContractSource(contractPath);\r\n\r\n    const input = {\r\n        language: \"Solidity\",\r\n        sources: {\r\n            [contractFileName]: {\r\n                content: source,\r\n            },\r\n        },\r\n        settings: {\r\n            optimizer: {\r\n                enabled: true,\r\n                runs: 200,\r\n            },\r\n            outputSelection: {\r\n                \"*\": {\r\n                    \"*\": [\"*\"],\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    elizaLogger.debug(\"Compiling contract...\");\r\n\r\n    try {\r\n        const output = JSON.parse(\r\n            solc.compile(JSON.stringify(input), { import: findImports })\r\n        );\r\n\r\n        if (output.errors) {\r\n            const hasError = output.errors.some(\r\n                (error) => error.type === \"Error\"\r\n            );\r\n            if (hasError) {\r\n                throw new Error(\r\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\r\n                );\r\n            }\r\n            elizaLogger.warn(\"Compilation warnings:\", output.errors);\r\n        }\r\n\r\n        const contractName = path.basename(contractFileName, \".sol\");\r\n        const contract = output.contracts[contractFileName][contractName];\r\n\r\n        if (!contract) {\r\n            throw new Error(\"Contract compilation result is empty\");\r\n        }\r\n\r\n        elizaLogger.debug(\"Contract compiled successfully\");\r\n        return {\r\n            abi: contract.abi,\r\n            bytecode: contract.evm.bytecode.object,\r\n        };\r\n    } catch (error) {\r\n        elizaLogger.error(\"Compilation failed:\", error.message);\r\n        throw error;\r\n    }\r\n}\r\n","export * from \"./actions/swap\";\r\nexport * from \"./actions/transfer\";\r\nexport * from \"./providers/wallet\";\r\nexport * from \"./types\";\r\n\r\nimport type { Plugin } from \"@elizaos/core\";\r\nimport { swapAction } from \"./actions/swap\";\r\nimport { transferAction } from \"./actions/transfer\";\r\nimport { bnbWalletProvider } from \"./providers/wallet\";\r\nimport { getBalanceAction } from \"./actions/getBalance\";\r\nimport { bridgeAction } from \"./actions/bridge\";\r\nimport { stakeAction } from \"./actions/stake\";\r\nimport { faucetAction } from \"./actions/faucet\";\r\nimport { deployAction } from \"./actions/deploy\";\r\n\r\nexport const bnbPlugin: Plugin = {\r\n    name: \"bnb\",\r\n    description:\r\n        \"BNB Smart Chain (BSC) and opBNB integration plugin supporting transfers, swaps, staking, bridging, and token deployments\",\r\n    providers: [bnbWalletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [\r\n        getBalanceAction,\r\n        transferAction,\r\n        swapAction,\r\n        bridgeAction,\r\n        stakeAction,\r\n        faucetAction,\r\n        deployAction,\r\n    ],\r\n};\r\n\r\nexport default bnbPlugin;\r\n"],"mappings":"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","names":["composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatUnits","parseEther","erc20Abi","elizaLogger","publicClient","parseEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","getToken","erc20Abi","formatEther","formatUnits","elizaLogger","getToken","formatEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","parseEther","parseUnits","erc20Abi","elizaLogger","parseEther","erc20Abi","parseUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatEther","parseEther","erc20Abi","elizaLogger","parseEther","erc20Abi","formatEther","txHash","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","txHash","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","solc","parseUnits","elizaLogger","require","elizaLogger","solc","parseUnits","composeContext","generateObjectDeprecated","ModelClass"]}