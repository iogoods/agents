{"version":3,"sources":["../src/jeeter/post.ts","../src/jeeter/constants.ts","../src/jeeter/utils.ts","../src/jeeter/search.ts","../src/jeeter/interactions.ts","../src/index.ts","../src/jeeter/environment.ts","../src/jeeter/base.ts","../src/jeeter/client.ts"],"sourcesContent":["import { Jeet, ApiPostJeetResponse } from \"./types\";\r\nimport {\r\n    composeContext,\r\n    generateText,\r\n    getEmbeddingZeroVector,\r\n    IAgentRuntime,\r\n    ModelClass,\r\n    stringToUuid,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { ClientBase } from \"./base\";\r\nimport { JEETER_API_URL, MAX_JEET_LENGTH } from \"./constants\";\r\nimport { truncateToCompleteSentence } from \"./utils\";\r\nimport { JEETER_POST_TEMPLATE } from \"./constants\";\r\n\r\nexport class JeeterPostClient {\r\n    private client: ClientBase;\r\n    private runtime: IAgentRuntime;\r\n    private isRunning: boolean = false;\r\n    private timeoutHandle?: NodeJS.Timeout;\r\n\r\n    constructor(client: ClientBase, runtime: IAgentRuntime) {\r\n        this.client = client;\r\n        this.runtime = runtime;\r\n    }\r\n\r\n    async start(postImmediately: boolean = false) {\r\n        if (this.isRunning) {\r\n            elizaLogger.warn(\"JeeterPostClient is already running\");\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n\r\n        if (!this.client.profile) {\r\n            await this.client.init();\r\n        }\r\n\r\n        const generateNewJeetLoop = async () => {\r\n            if (!this.isRunning) {\r\n                elizaLogger.log(\"JeeterPostClient has been stopped\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const lastPost = await this.runtime.cacheManager.get<{\r\n                    timestamp: number;\r\n                }>(`jeeter/${this.client.profile.username}/lastPost`);\r\n                const lastPostTimestamp = lastPost?.timestamp ?? 0;\r\n                const minMinutes =\r\n                    parseInt(this.runtime.getSetting(\"POST_INTERVAL_MIN\")) ||\r\n                    90;\r\n                const maxMinutes =\r\n                    parseInt(this.runtime.getSetting(\"POST_INTERVAL_MAX\")) ||\r\n                    180;\r\n                const randomMinutes =\r\n                    Math.floor(Math.random() * (maxMinutes - minMinutes + 1)) +\r\n                    minMinutes;\r\n                const targetInterval = randomMinutes * 60 * 1000;\r\n\r\n                // Calculate the actual delay needed to reach next post time\r\n                const timeElapsed = Date.now() - lastPostTimestamp;\r\n                const delay = Math.max(0, targetInterval - timeElapsed);\r\n\r\n                // Post immediately if we're past the target interval\r\n                if (timeElapsed >= targetInterval) {\r\n                    await this.generateNewJeet();\r\n                    // Schedule next post with full interval\r\n                    if (this.isRunning) {\r\n                        this.timeoutHandle = setTimeout(() => {\r\n                            generateNewJeetLoop();\r\n                        }, targetInterval);\r\n                        elizaLogger.log(\r\n                            `Next jeet scheduled in ${randomMinutes} minutes`\r\n                        );\r\n                    }\r\n                } else {\r\n                    // Schedule for the remaining time until next post\r\n                    if (this.isRunning) {\r\n                        this.timeoutHandle = setTimeout(() => {\r\n                            generateNewJeetLoop();\r\n                        }, delay);\r\n                        elizaLogger.log(\r\n                            `Next jeet scheduled in ${Math.round(delay / 60000)} minutes`\r\n                        );\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error in generateNewJeetLoop:\", error);\r\n                if (this.isRunning) {\r\n                    this.timeoutHandle = setTimeout(\r\n                        () => {\r\n                            generateNewJeetLoop();\r\n                        },\r\n                        5 * 60 * 1000\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        if (postImmediately) {\r\n            await this.generateNewJeet();\r\n        }\r\n\r\n        generateNewJeetLoop();\r\n    }\r\n\r\n    public async stop() {\r\n        elizaLogger.log(\"Stopping JeeterPostClient...\");\r\n        this.isRunning = false;\r\n\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        // Wait for any ongoing operations to complete\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n        elizaLogger.log(\"JeeterPostClient stopped successfully\");\r\n    }\r\n\r\n    private async getHomeTimeline(): Promise<Jeet[]> {\r\n        const cachedTimeline = await this.client.getCachedTimeline();\r\n        if (cachedTimeline) {\r\n            return cachedTimeline;\r\n        }\r\n        const homeTimeline = await this.client.fetchHomeTimeline(50);\r\n        await this.client.cacheTimeline(homeTimeline);\r\n        return homeTimeline;\r\n    }\r\n\r\n    private formatHomeTimeline(homeTimeline: Jeet[]): string {\r\n        return (\r\n            `# ${this.runtime.character.name}'s Home Timeline\\n\\n` +\r\n            homeTimeline\r\n                .map((jeet) => {\r\n                    const timestamp = jeet.createdAt\r\n                        ? new Date(jeet.createdAt).toDateString()\r\n                        : new Date().toDateString();\r\n                    return `#${jeet.id}\r\n${jeet.agent?.name || \"Unknown\"} (@${jeet.agent?.username || \"Unknown\"})${\r\n                        jeet.inReplyToStatusId\r\n                            ? `\\nIn reply to: ${jeet.inReplyToStatusId}`\r\n                            : \"\"\r\n                    }\r\n${timestamp}\\n\\n${jeet.text}\\n---\\n`;\r\n                })\r\n                .join(\"\\n\")\r\n        );\r\n    }\r\n\r\n    private async generateJeetContent(): Promise<string> {\r\n        const topics = this.runtime.character.topics.join(\", \");\r\n        const homeTimeline = await this.getHomeTimeline();\r\n        const formattedHomeTimeline = this.formatHomeTimeline(homeTimeline);\r\n        const state = await this.runtime.composeState(\r\n            {\r\n                userId: this.runtime.agentId,\r\n                roomId: stringToUuid(\"SIMSAI_generate_room\"),\r\n                agentId: this.runtime.agentId,\r\n                content: {\r\n                    text: topics,\r\n                    action: \"\",\r\n                },\r\n            },\r\n            {\r\n                jeeterUserName: this.client.profile.username,\r\n                timeline: formattedHomeTimeline,\r\n            }\r\n        );\r\n\r\n        const context = composeContext({\r\n            state,\r\n            template:\r\n                this.runtime.character.templates?.jeeterPostTemplate ||\r\n                JEETER_POST_TEMPLATE,\r\n        });\r\n\r\n        elizaLogger.debug(\"generate post prompt:\\n\" + context);\r\n        const newJeetContent = await generateText({\r\n            runtime: this.runtime,\r\n            context,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        // Replace \\n with proper line breaks and trim excess spaces\r\n        const formattedJeet = newJeetContent.replace(/\\\\n/g, \"\\n\").trim();\r\n        // Use the helper function to truncate to complete sentence\r\n        return truncateToCompleteSentence(formattedJeet, MAX_JEET_LENGTH);\r\n    }\r\n\r\n    private async createMemoryForJeet(\r\n        jeet: Jeet,\r\n        content: string\r\n    ): Promise<void> {\r\n        const roomId = stringToUuid(jeet.id + \"-\" + this.runtime.agentId);\r\n        await this.runtime.ensureRoomExists(roomId);\r\n        await this.runtime.ensureParticipantInRoom(\r\n            this.runtime.agentId,\r\n            roomId\r\n        );\r\n        await this.runtime.messageManager.createMemory({\r\n            id: stringToUuid(jeet.id + \"-\" + this.runtime.agentId),\r\n            userId: this.runtime.agentId,\r\n            agentId: this.runtime.agentId,\r\n            content: {\r\n                text: content,\r\n                url: jeet.permanentUrl,\r\n                source: \"jeeter\",\r\n            },\r\n            roomId,\r\n            embedding: getEmbeddingZeroVector(),\r\n            createdAt: new Date(jeet.createdAt).getTime(),\r\n        });\r\n    }\r\n\r\n    private async postJeet(content: string): Promise<Jeet> {\r\n        const response = await this.client.requestQueue.add(async () => {\r\n            const result = await this.client.simsAIClient.postJeet(content);\r\n            return result as unknown as ApiPostJeetResponse;\r\n        });\r\n\r\n        if (!response?.data?.id) {\r\n            throw new Error(\r\n                `Failed to get valid response from postJeet: ${JSON.stringify(response)}`\r\n            );\r\n        }\r\n\r\n        elizaLogger.log(`Jeet posted with ID: ${response.data.id}`);\r\n\r\n        // Extract the author information from includes\r\n        const author = response.includes.users.find(\r\n            (user) => user.id === response.data.author_id\r\n        );\r\n\r\n        // Construct the jeet from the response data\r\n        return {\r\n            id: response.data.id,\r\n            text: response.data.text,\r\n            createdAt: response.data.created_at,\r\n            agentId: response.data.author_id,\r\n            agent: author,\r\n            permanentUrl: `${JEETER_API_URL}/${this.client.profile.username}/status/${response.data.id}`,\r\n            public_metrics: response.data.public_metrics,\r\n            hashtags: [],\r\n            mentions: [],\r\n            photos: [],\r\n            thread: [],\r\n            urls: [],\r\n            videos: [],\r\n            media: [],\r\n            type: response.data.type,\r\n        };\r\n    }\r\n\r\n    private async generateNewJeet() {\r\n        if (!this.isRunning) {\r\n            elizaLogger.log(\"Skipping jeet generation - client is stopped\");\r\n            return;\r\n        }\r\n\r\n        elizaLogger.log(\"Generating new jeet\");\r\n        try {\r\n            await this.runtime.ensureUserExists(\r\n                this.runtime.agentId,\r\n                this.client.profile.username,\r\n                this.runtime.character.name,\r\n                \"jeeter\"\r\n            );\r\n\r\n            const content = await this.generateJeetContent();\r\n\r\n            const dryRun = (\r\n                this.runtime.getSetting(\"SIMSAI_DRY_RUN\") || \"false\"\r\n            ).toLowerCase();\r\n            if (dryRun === \"true\" || dryRun === \"1\") {\r\n                elizaLogger.info(`Dry run: would have posted jeet: ${content}`);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                if (!this.isRunning) {\r\n                    elizaLogger.log(\r\n                        \"Skipping jeet posting - client is stopped\"\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                elizaLogger.log(`Posting new jeet:\\n ${content}`);\r\n                const jeet = await this.postJeet(content);\r\n                await this.runtime.cacheManager.set(\r\n                    `jeeter/${this.client.profile.username}/lastPost`,\r\n                    {\r\n                        id: jeet.id,\r\n                        timestamp: Date.now(),\r\n                    }\r\n                );\r\n                await this.client.cacheJeet(jeet);\r\n                const homeTimeline = await this.getHomeTimeline();\r\n                homeTimeline.push(jeet);\r\n                await this.client.cacheTimeline(homeTimeline);\r\n                elizaLogger.log(`Jeet posted at: ${jeet.permanentUrl}`);\r\n                await this.createMemoryForJeet(jeet, content);\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error sending jeet:\", error);\r\n                if (error instanceof Error) {\r\n                    elizaLogger.error(\"Error details:\", {\r\n                        message: error.message,\r\n                        stack: error.stack,\r\n                    });\r\n                }\r\n                throw error; // Re-throw to be handled by outer try-catch\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error generating new jeet:\", error);\r\n            if (error instanceof Error) {\r\n                elizaLogger.error(\"Error details:\", {\r\n                    message: error.message,\r\n                    stack: error.stack,\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","const DEFAULT_SIMSAI_API_URL = \"https://api.jeeter.social/2/\";\r\nconst DEFAULT_JEETER_API_URL = \"https://jeeter.social\";\r\n\r\nexport const SIMSAI_API_URL =\r\n    process.env.SIMSAI_API_URL || DEFAULT_SIMSAI_API_URL;\r\nexport const JEETER_API_URL =\r\n    process.env.JEETER_API_URL || DEFAULT_JEETER_API_URL;\r\n\r\nexport const MAX_JEET_LENGTH = 280;\r\nexport const MAX_COMMENT_LENGTH = 280;\r\n\r\nexport const MIN_INTERVAL = parseInt(process.env.MIN_INTERVAL || \"120000\", 10); // Default: 2 minutes\r\nexport const MAX_INTERVAL = parseInt(process.env.MAX_INTERVAL || \"300000\", 10); // Default: 5 minutes\r\n\r\n// Base template for deciding whether to respond to interactions\r\nexport const JEETER_SHOULD_RESPOND_BASE = `# INSTRUCTIONS: Determine if {{agentName}} (@{{jeeterUserName}}) should respond to the message and participate in the conversation.\r\n\r\nResponse options are RESPOND, IGNORE and STOP.\r\n\r\nRESPONSE CRITERIA:\r\n- RESPOND if you can add unique value or perspective to the conversation\r\n- RESPOND to direct questions or mentions that warrant engagement\r\n- IGNORE if you would just be repeating others or have nothing unique to add\r\n- IGNORE messages that are irrelevant or where you can't contribute meaningfully\r\n- STOP if the conversation has reached its natural conclusion\r\n- STOP if further interaction would be redundant\r\n\r\n{{agentName}} should be conversational but selective, prioritizing quality interactions over quantity.\r\nIf there's any doubt about having meaningful value to add, choose IGNORE over RESPOND.\r\n\r\n{{recentPosts}}\r\n\r\nThread of Jeets You Are Replying To:\r\n{{formattedConversation}}\r\n\r\nCurrent Post:\r\n{{currentPost}}\r\n\r\n# INSTRUCTIONS: Respond with [RESPOND], [IGNORE], or [STOP] based on whether you can make a unique, valuable contribution to this conversation.`;\r\n\r\n// Base template for search-based engagement\r\n// In constants.ts\r\n\r\nexport const JEETER_SEARCH_BASE = `{{timeline}}\r\n\r\n{{providers}}\r\n\r\nRecent interactions between {{agentName}} and other users:\r\n{{recentPostInteractions}}\r\n\r\nAbout {{agentName}} (@{{jeeterUserName}}):\r\n{{bio}}\r\n{{lore}}\r\n{{topics}}\r\n\r\n{{postDirections}}\r\n\r\n{{recentPosts}}\r\n\r\n# Task: As {{agentName}}, evaluate the post and create a response that builds upon it with your unique expertise and perspective.\r\n\r\nKey Requirements:\r\n1. Identify what you can uniquely add based on your expertise\r\n2. Share a specific insight or relevant experience that expands the discussion\r\n3. Build on the core point without repeating it\r\n4. Connect it to your knowledge and experience\r\n\r\nAVOID:\r\n- Restating or paraphrasing the original post\r\n- Generic agreement or disagreement\r\n- Surface-level observations\r\n\r\nCurrent Post to Evaluate:\r\n{{currentPost}}`;\r\n\r\n// Base template for handling direct interactions\r\nexport const JEETER_INTERACTION_BASE = `{{timeline}}\r\n\r\n{{providers}}\r\n\r\nRecent interactions between {{agentName}} and other users:\r\n{{recentPostInteractions}}\r\n\r\nAbout {{agentName}} (@{{jeeterUserName}}):\r\n{{bio}}\r\n{{lore}}\r\n{{topics}}\r\n\r\n{{postDirections}}\r\n\r\n{{recentPosts}}\r\n\r\n# Task: Respond as {{agentName}} to this conversation in a way that moves it forward with your unique expertise.\r\n\r\nCurrent Context:\r\n{{currentPost}}\r\n\r\nThread Context:\r\n{{formattedConversation}}\r\n\r\nKey Guidelines:\r\n1. Connect this topic to your unique knowledge or experience\r\n2. Share a concrete example or specific insight others haven't mentioned\r\n3. Move the conversation in a productive direction\r\n4. Make a point that hasn't been made yet\r\n\r\nRemember:\r\n- Directly address the core topic while expanding it\r\n- Draw from your expertise to provide unique value\r\n- Focus on quality of insight over agreement/disagreement\r\n- Be concise and clear`;\r\n\r\n// Base template for standard message handling\r\nexport const JEETER_MESSAGE_HANDLER_BASE = `{{timeline}}\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\nAbout {{agentName}} (@{{jeeterUserName}}):\r\n{{bio}}\r\n{{lore}}\r\n{{topics}}\r\n\r\n{{providers}}\r\n\r\n{{characterPostExamples}}\r\n\r\n{{postDirections}}\r\n\r\nRecent interactions:\r\n{{recentPostInteractions}}\r\n\r\n{{recentPosts}}\r\n\r\n# Task: Generate a unique and meaningful response as {{agentName}} that advances the conversation.\r\n\r\nCurrent Context:\r\n{{currentPost}}\r\n\r\nThread History:\r\n{{formattedConversation}}\r\n\r\nRESPONSE REQUIREMENTS:\r\n1. Add new perspectives or insights\r\n2. Never repeat or rephrase existing content\r\n3. Build upon previous points meaningfully\r\n4. Consider full conversation context\r\n5. Maintain character voice while adding value\r\n\r\n{{actions}}`;\r\n\r\n// Footer template for interaction responses\r\nexport const JEETER_INTERACTION_MESSAGE_COMPLETION_FOOTER = `\r\nYour response MUST be in this JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"text\": \"your perspective that expands the discussion with new information\",\r\n    \"action\": \"CONTINUE\" or \"END\" or \"IGNORE\",\r\n    \"shouldLike\": true or false,\r\n    \"interactions\": [\r\n        {\r\n            \"type\": \"reply\" | \"rejeet\" | \"quote\" | \"none\",\r\n            \"text\": \"response that introduces new information or insights\"\r\n        }\r\n    ]\r\n}\r\n\\`\\`\\`\r\n\r\nFor each interaction, ask yourself:\r\n- What new information am I adding?\r\n- How does this expand on the topic?\r\n- What unique perspective am I providing?\r\n\r\nFOR REPLIES:\r\n- Must share new information or examples\r\n- Build on the topic, don't just agree/disagree\r\n- Connect to your specific knowledge/experience\r\n\r\nFOR QUOTES:\r\n- Must add substantial new context\r\n- Explain why this connects to your expertise\r\n- Expand the discussion in a new direction\r\n\r\nFOR REJEETS:\r\n- Only use when you can add expert context\r\n- Include your own analysis or insight\r\n- Make clear why you're amplifying this\r\n\r\nFOR LIKES:\r\n- Use when content aligns with your expertise\r\n- No need for additional commentary\r\n- Save for genuinely valuable content\r\n\r\nChoose \"none\" if you can't materially expand the discussion.`;\r\n\r\n// Footer template specifically for search interactions\r\nexport const JEETER_SEARCH_MESSAGE_COMPLETION_FOOTER = `\r\nResponse must be in this JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"text\": \"your unique insight or perspective that builds on the discussion\",\r\n    \"action\": \"CONTINUE\" or \"END\" or \"IGNORE\",\r\n    \"shouldLike\": true or false,\r\n    \"interactions\": [\r\n        {\r\n            \"type\": \"reply\" | \"rejeet\" | \"quote\" | \"none\",\r\n            \"text\": \"your response that adds new information or perspective\"\r\n        }\r\n    ]\r\n}\r\n\\`\\`\\`\r\n\r\nBefore responding, ask yourself:\r\n1. What unique perspective can I add from my expertise?\r\n2. What specific example or insight can I share?\r\n3. How does this advance the conversation?\r\n\r\nResponse Requirements:\r\n- Replies: Must add new information or perspective\r\n- Quotes: Must contribute additional insight\r\n- Rejeets: Only for content where you can add expert context\r\n- Likes: Use for good content that doesn't need expansion\r\n\r\nChoose \"none\" if you cannot add meaningful value to the discussion.`;\r\n\r\nexport const JEETER_POST_TEMPLATE = `{{timeline}}\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\nAbout {{agentName}} (@{{jeeterUserName}}):\r\n{{bio}}\r\n{{lore}}\r\n{{postDirections}}\r\n\r\n{{providers}}\r\n\r\n{{recentPosts}}\r\n\r\n{{characterPostExamples}}\r\n\r\n# Task: Generate a post in the voice and style of {{agentName}}, aka @{{jeeterUserName}}\r\nWrite a single sentence post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}. Try to write something totally different than previous posts. Do not add commentary or acknowledge this request, just write the post.\r\nYour response should not contain any questions. Brief, concise statements only. No emojis. Use \\\\n\\\\n (double spaces) between statements.`;\r\n","import { getEmbeddingZeroVector } from \"@elizaos/core\";\r\nimport { Content, Memory, UUID } from \"@elizaos/core\";\r\nimport { stringToUuid } from \"@elizaos/core\";\r\nimport { ClientBase } from \"./base\";\r\nimport { elizaLogger } from \"@elizaos/core\";\r\nimport { SIMSAI_API_URL, MAX_JEET_LENGTH } from \"./constants\";\r\nimport { ApiPostJeetResponse, Jeet } from \"./types\";\r\n\r\n/**\r\n * Waits for a random amount of time between the specified minimum and maximum duration.\r\n * @param minTime The minimum wait time in milliseconds (default: 1000).\r\n * @param maxTime The maximum wait time in milliseconds (default: 3000).\r\n * @returns A promise that resolves after the random wait time.\r\n */\r\nexport const wait = (\r\n    minTime: number = 1000,\r\n    maxTime: number = 3000\r\n): Promise<void> => {\r\n    // Prevent situation where user sets minTime > maxTime\r\n    if (minTime > maxTime) {\r\n        [minTime, maxTime] = [maxTime, minTime];\r\n    }\r\n\r\n    const waitTime =\r\n        Math.floor(Math.random() * (maxTime - minTime + 1)) + minTime;\r\n    return new Promise((resolve) => setTimeout(resolve, waitTime));\r\n};\r\n\r\n/**\r\n * Checks if a jeet is valid based on the number of hashtags, at mentions, and dollar signs.\r\n * @param jeet The jeet to validate.\r\n * @returns A boolean indicating whether the jeet is valid.\r\n */\r\nexport const isValidJeet = (jeet: Jeet): boolean => {\r\n    const text = jeet.text || \"\";\r\n    const hashtagCount = (text.match(/#/g) || []).length;\r\n    const atCount = (text.match(/@/g) || []).length;\r\n    const dollarSignCount = (text.match(/\\$/g) || []).length;\r\n    const totalCount = hashtagCount + atCount + dollarSignCount;\r\n\r\n    return (\r\n        hashtagCount <= 1 &&\r\n        atCount <= 2 &&\r\n        dollarSignCount <= 1 &&\r\n        totalCount <= 3\r\n    );\r\n};\r\n\r\n/**\r\n * Builds a conversation thread by fetching the full conversation or recursively processing parent jeets.\r\n * @param jeet The starting jeet of the conversation thread\r\n * @param client The ClientBase instance\r\n * @returns A promise that resolves to an array of jeets representing the conversation thread\r\n */\r\nexport async function buildConversationThread(\r\n    jeet: Jeet,\r\n    client: ClientBase\r\n): Promise<Jeet[]> {\r\n    const thread: Jeet[] = [];\r\n    const visited: Set<string> = new Set();\r\n\r\n    // Try to fetch the full conversation first if we have a conversation ID\r\n    if (jeet.conversationId || jeet.id) {\r\n        try {\r\n            elizaLogger.log(\r\n                `Attempting to fetch conversation for jeet ${jeet.id}`\r\n            );\r\n            const conversationId = jeet.conversationId || jeet.id;\r\n            const conversation =\r\n                await client.simsAIClient.getJeetConversation(conversationId);\r\n\r\n            // Process each jeet in the conversation\r\n            for (const conversationJeet of conversation) {\r\n                await processJeetMemory(conversationJeet, client);\r\n                thread.push(conversationJeet);\r\n            }\r\n\r\n            elizaLogger.debug(\"Conversation context:\", {\r\n                totalMessages: thread.length,\r\n                conversationId: jeet.conversationId || jeet.id,\r\n                participants: [\r\n                    ...new Set(thread.map((j) => j.agent?.username)),\r\n                ],\r\n                threadDepth: thread.length,\r\n            });\r\n\r\n            return thread.sort((a, b) => {\r\n                const timeA = new Date(a.createdAt || 0).getTime();\r\n                const timeB = new Date(b.createdAt || 0).getTime();\r\n                return timeA - timeB;\r\n            });\r\n        } catch (error) {\r\n            elizaLogger.error(\r\n                `Error fetching conversation, falling back to recursive method:`,\r\n                error\r\n            );\r\n            // Clear thread and fall back to recursive method\r\n            thread.length = 0;\r\n        }\r\n    }\r\n\r\n    // Fall back to recursive method if conversation fetch fails or isn't available\r\n    async function processThread(currentJeet: Jeet, depth: number = 0) {\r\n        try {\r\n            validateJeet(currentJeet);\r\n\r\n            // Check if we've already processed this jeet\r\n            if (visited.has(currentJeet.id)) {\r\n                elizaLogger.debug(`Already visited jeet: ${currentJeet.id}`);\r\n                return;\r\n            }\r\n\r\n            // Process the current jeet's memory\r\n            await processJeetMemory(currentJeet, client);\r\n\r\n            // Add to visited set and thread\r\n            visited.add(currentJeet.id);\r\n            thread.unshift(currentJeet);\r\n\r\n            elizaLogger.debug(\"Thread state:\", {\r\n                length: thread.length,\r\n                currentDepth: depth,\r\n                jeetId: currentJeet.id,\r\n            });\r\n\r\n            // Process parent jeet if it exists\r\n            if (currentJeet.inReplyToStatusId) {\r\n                try {\r\n                    const parentJeet = await client.simsAIClient.getJeet(\r\n                        currentJeet.inReplyToStatusId\r\n                    );\r\n                    if (parentJeet) {\r\n                        await processThread(parentJeet, depth + 1);\r\n                    }\r\n                } catch (error) {\r\n                    elizaLogger.error(\r\n                        `Error processing parent jeet ${currentJeet.inReplyToStatusId}:`,\r\n                        error\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\r\n                `Error in processThread for jeet ${currentJeet.id}:`,\r\n                error\r\n            );\r\n            if (error instanceof Error) {\r\n                elizaLogger.error(\"Error details:\", {\r\n                    message: error.message,\r\n                    stack: error.stack,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Start processing with the initial jeet\r\n    await processThread(jeet, 0);\r\n\r\n    elizaLogger.debug(\"Final thread built:\", {\r\n        totalJeets: thread.length,\r\n        jeetIds: thread.map((t) => ({\r\n            id: t.id,\r\n            text: t.text?.slice(0, 50),\r\n        })),\r\n    });\r\n\r\n    return thread;\r\n}\r\n\r\n/**\r\n * Validates a jeet object has required properties\r\n * @param jeet The jeet to validate\r\n * @throws TypeError if required properties are missing or invalid\r\n */\r\nfunction validateJeet(jeet: Jeet) {\r\n    if (typeof jeet.id !== \"string\") {\r\n        elizaLogger.error(\"Jeet ID is not a string:\", jeet.id);\r\n        throw new TypeError(\"Jeet ID must be a string\");\r\n    }\r\n\r\n    if (typeof jeet.agentId !== \"string\") {\r\n        elizaLogger.error(\"Agent ID is not a string:\", jeet.agentId);\r\n        throw new TypeError(\"Agent ID must be a string\");\r\n    }\r\n\r\n    if (jeet.conversationId && typeof jeet.conversationId !== \"string\") {\r\n        elizaLogger.error(\r\n            \"Conversation ID is not a string:\",\r\n            jeet.conversationId\r\n        );\r\n        throw new TypeError(\"Conversation ID must be a string\");\r\n    }\r\n}\r\n\r\n/**\r\n * Processes and stores a jeet's memory in the runtime\r\n * @param jeet The jeet to process\r\n * @param client The ClientBase instance\r\n */\r\nasync function processJeetMemory(jeet: Jeet, client: ClientBase) {\r\n    const roomId = stringToUuid(\r\n        `${jeet.conversationId || jeet.id}-${client.runtime.agentId}`\r\n    );\r\n    const userId = stringToUuid(jeet.agentId);\r\n\r\n    // Ensure connection exists\r\n    if (jeet.agent) {\r\n        await client.runtime.ensureConnection(\r\n            userId,\r\n            roomId,\r\n            jeet.agent.username,\r\n            jeet.agent.name,\r\n            \"jeeter\"\r\n        );\r\n    }\r\n\r\n    // Create memory if it doesn't exist\r\n    const existingMemory = await client.runtime.messageManager.getMemoryById(\r\n        stringToUuid(jeet.id + \"-\" + client.runtime.agentId)\r\n    );\r\n\r\n    if (!existingMemory) {\r\n        await client.runtime.messageManager.createMemory({\r\n            id: stringToUuid(jeet.id + \"-\" + client.runtime.agentId),\r\n            agentId: client.runtime.agentId,\r\n            content: {\r\n                text: jeet.text || \"\",\r\n                source: \"jeeter\",\r\n                url: jeet.permanentUrl,\r\n                inReplyTo: jeet.inReplyToStatusId\r\n                    ? stringToUuid(\r\n                          jeet.inReplyToStatusId + \"-\" + client.runtime.agentId\r\n                      )\r\n                    : undefined,\r\n            },\r\n            createdAt: jeet.createdAt\r\n                ? new Date(jeet.createdAt).getTime()\r\n                : jeet.timestamp\r\n                  ? jeet.timestamp * 1000\r\n                  : Date.now(),\r\n            roomId,\r\n            userId: userId,\r\n            embedding: getEmbeddingZeroVector(),\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends a jeet by splitting the content into chunks and posting each chunk separately.\r\n * @param client The ClientBase instance.\r\n * @param content The content of the jeet.\r\n * @param roomId The room ID associated with the jeet.\r\n * @param jeetUsername The username of the user posting the jeet.\r\n * @param inReplyToJeetId The ID of the jeet being replied to (optional).\r\n * @returns A promise that resolves to an array of memory objects representing the sent jeets.\r\n */\r\nexport async function sendJeet(\r\n    client: ClientBase,\r\n    content: Content,\r\n    roomId: UUID,\r\n    jeetUsername: string,\r\n    inReplyToJeetId?: string\r\n): Promise<Memory[]> {\r\n    const jeetChunks = splitJeetContent(content.text);\r\n    const sentJeets: Jeet[] = [];\r\n    let currentReplyToId = inReplyToJeetId; // Track current reply parent\r\n\r\n    for (const chunk of jeetChunks) {\r\n        const response = await client.requestQueue.add(async () => {\r\n            try {\r\n                const result = await client.simsAIClient.postJeet(\r\n                    chunk.trim(),\r\n                    currentReplyToId // Use currentReplyToId for the chain\r\n                );\r\n                return result as unknown as ApiPostJeetResponse;\r\n            } catch (error) {\r\n                elizaLogger.error(`Failed to post jeet chunk:`, error);\r\n                throw error;\r\n            }\r\n        });\r\n\r\n        if (!response?.data?.id) {\r\n            throw new Error(\r\n                `Failed to get valid response from postJeet: ${JSON.stringify(response)}`\r\n            );\r\n        }\r\n\r\n        const author = response.includes.users.find(\r\n            (user) => user.id === response.data.author_id\r\n        );\r\n\r\n        const finalJeet: Jeet = {\r\n            id: response.data.id,\r\n            text: response.data.text,\r\n            createdAt: response.data.created_at,\r\n            agentId: response.data.author_id,\r\n            agent: author,\r\n            type: response.data.type,\r\n            public_metrics: response.data.public_metrics,\r\n            permanentUrl: `${SIMSAI_API_URL}/${jeetUsername}/status/${response.data.id}`,\r\n            inReplyToStatusId: currentReplyToId, // Track reply chain\r\n            hashtags: [],\r\n            mentions: [],\r\n            photos: [],\r\n            thread: [],\r\n            urls: [],\r\n            videos: [],\r\n            media: [],\r\n        };\r\n\r\n        sentJeets.push(finalJeet);\r\n        currentReplyToId = finalJeet.id; // Update reply chain to the last sent jeet\r\n        await wait(1000, 2000);\r\n    }\r\n\r\n    const memories: Memory[] = sentJeets.map((jeet, index) => ({\r\n        id: stringToUuid(jeet.id + \"-\" + client.runtime.agentId),\r\n        agentId: client.runtime.agentId,\r\n        userId: client.runtime.agentId,\r\n        content: {\r\n            text: jeet.text,\r\n            source: \"jeeter\",\r\n            url: jeet.permanentUrl,\r\n            inReplyTo:\r\n                index === 0\r\n                    ? inReplyToJeetId\r\n                        ? stringToUuid(\r\n                              inReplyToJeetId + \"-\" + client.runtime.agentId\r\n                          )\r\n                        : undefined\r\n                    : stringToUuid(\r\n                          sentJeets[index - 1].id + \"-\" + client.runtime.agentId\r\n                      ),\r\n        },\r\n        roomId,\r\n        embedding: getEmbeddingZeroVector(),\r\n        createdAt: jeet.createdAt\r\n            ? new Date(jeet.createdAt).getTime()\r\n            : Date.now(),\r\n    }));\r\n\r\n    return memories;\r\n}\r\n\r\n/**\r\n * Splits the jeet content into chunks based on the maximum length.\r\n * @param content The content to split.\r\n * @returns An array of jeet chunks.\r\n */\r\nexport function splitJeetContent(content: string): string[] {\r\n    const maxLength = MAX_JEET_LENGTH;\r\n    const paragraphs = content.split(\"\\n\\n\").map((p) => p.trim());\r\n    const jeets: string[] = [];\r\n    let currentJeet = \"\";\r\n\r\n    for (const paragraph of paragraphs) {\r\n        if (!paragraph) continue;\r\n\r\n        if ((currentJeet + \"\\n\\n\" + paragraph).trim().length <= maxLength) {\r\n            currentJeet = currentJeet\r\n                ? currentJeet + \"\\n\\n\" + paragraph\r\n                : paragraph;\r\n        } else {\r\n            if (currentJeet) {\r\n                jeets.push(currentJeet.trim());\r\n            }\r\n            if (paragraph.length <= maxLength) {\r\n                currentJeet = paragraph;\r\n            } else {\r\n                const chunks = splitParagraph(paragraph, maxLength);\r\n                jeets.push(...chunks.slice(0, -1));\r\n                currentJeet = chunks[chunks.length - 1];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (currentJeet) {\r\n        jeets.push(currentJeet.trim());\r\n    }\r\n\r\n    return jeets;\r\n}\r\n\r\n/**\r\n * Splits a paragraph into chunks based on the maximum length.\r\n * @param paragraph The paragraph to split.\r\n * @param maxLength The maximum length of each chunk.\r\n * @returns An array of paragraph chunks.\r\n */\r\nexport function splitParagraph(paragraph: string, maxLength: number): string[] {\r\n    const sentences = paragraph.match(/[^.!?]+[.!?]+|[^.!?]+$/g) || [paragraph];\r\n    const chunks: string[] = [];\r\n    let currentChunk = \"\";\r\n\r\n    for (const sentence of sentences) {\r\n        if ((currentChunk + \" \" + sentence).trim().length <= maxLength) {\r\n            currentChunk = currentChunk\r\n                ? currentChunk + \" \" + sentence\r\n                : sentence;\r\n        } else {\r\n            if (currentChunk) {\r\n                chunks.push(currentChunk.trim());\r\n            }\r\n            if (sentence.length <= maxLength) {\r\n                currentChunk = sentence;\r\n            } else {\r\n                const words = sentence.split(\" \");\r\n                currentChunk = \"\";\r\n                for (const word of words) {\r\n                    if (\r\n                        (currentChunk + \" \" + word).trim().length <= maxLength\r\n                    ) {\r\n                        currentChunk = currentChunk\r\n                            ? currentChunk + \" \" + word\r\n                            : word;\r\n                    } else {\r\n                        if (currentChunk) {\r\n                            chunks.push(currentChunk.trim());\r\n                        }\r\n                        currentChunk = word;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (currentChunk) {\r\n        chunks.push(currentChunk.trim());\r\n    }\r\n\r\n    return chunks;\r\n}\r\n\r\n/**\r\n * Truncates the given text to the last complete sentence within the specified maximum length.\r\n * @param text The text to truncate.\r\n * @param maxLength The maximum length of the truncated text.\r\n * @returns The truncated text.\r\n */\r\nexport function truncateToCompleteSentence(\r\n    text: string,\r\n    maxLength: number\r\n): string {\r\n    // To avoid negative indexing when subtracting 3 for the ellipsis\r\n    if (maxLength < 3) {\r\n        throw new Error(\"maxLength must be at least 3\");\r\n    }\r\n\r\n    if (text.length <= maxLength) {\r\n        return text;\r\n    }\r\n\r\n    const lastPeriodIndex = text.lastIndexOf(\".\", maxLength);\r\n    if (lastPeriodIndex !== -1) {\r\n        const truncatedAtPeriod = text.slice(0, lastPeriodIndex + 1).trim();\r\n        if (truncatedAtPeriod.length > 0) {\r\n            return truncatedAtPeriod;\r\n        }\r\n    }\r\n\r\n    const lastSpaceIndex = text.lastIndexOf(\" \", maxLength);\r\n    if (lastSpaceIndex !== -1) {\r\n        const truncatedAtSpace = text.slice(0, lastSpaceIndex).trim();\r\n        if (truncatedAtSpace.length > 0) {\r\n            return truncatedAtSpace + \"...\";\r\n        }\r\n    }\r\n\r\n    return text.slice(0, maxLength - 3).trim() + \"...\";\r\n}\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateMessageResponse,\r\n    generateText,\r\n    IAgentRuntime,\r\n    IImageDescriptionService,\r\n    ModelClass,\r\n    ServiceType,\r\n    State,\r\n    stringToUuid,\r\n} from \"@elizaos/core\";\r\nimport { buildConversationThread, sendJeet, wait } from \"./utils\";\r\nimport {\r\n    EnhancedResponseContent,\r\n    Jeet,\r\n    JeetInteraction,\r\n    JeetResponse,\r\n} from \"./types\";\r\nimport { ClientBase } from \"./base\";\r\nimport {\r\n    JEETER_SEARCH_BASE,\r\n    JEETER_SEARCH_MESSAGE_COMPLETION_FOOTER,\r\n    MAX_INTERVAL,\r\n    MIN_INTERVAL,\r\n} from \"./constants\";\r\n\r\nexport const jeeterSearchTemplate =\r\n    JEETER_SEARCH_BASE + JEETER_SEARCH_MESSAGE_COMPLETION_FOOTER;\r\n\r\nexport class JeeterSearchClient {\r\n    private repliedJeets: Set<string> = new Set();\r\n    private likedJeets: Set<string> = new Set();\r\n    private rejeetedJeets: Set<string> = new Set();\r\n    private quotedJeets: Set<string> = new Set();\r\n    private isRunning: boolean = false;\r\n    private timeoutHandle?: NodeJS.Timeout;\r\n\r\n    constructor(\r\n        private client: ClientBase,\r\n        private runtime: IAgentRuntime\r\n    ) {}\r\n\r\n    private async hasInteracted(\r\n        jeetId: string,\r\n        type: JeetInteraction[\"type\"]\r\n    ): Promise<boolean> {\r\n        switch (type) {\r\n            case \"reply\":\r\n                return this.repliedJeets.has(jeetId);\r\n            case \"like\":\r\n                return this.likedJeets.has(jeetId);\r\n            case \"rejeet\":\r\n                return this.rejeetedJeets.has(jeetId);\r\n            case \"quote\":\r\n                return this.quotedJeets.has(jeetId);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private recordInteraction(jeetId: string, type: JeetInteraction[\"type\"]) {\r\n        switch (type) {\r\n            case \"reply\":\r\n                this.repliedJeets.add(jeetId);\r\n                break;\r\n            case \"like\":\r\n                this.likedJeets.add(jeetId);\r\n                break;\r\n            case \"rejeet\":\r\n                this.rejeetedJeets.add(jeetId);\r\n                break;\r\n            case \"quote\":\r\n                this.quotedJeets.add(jeetId);\r\n                break;\r\n        }\r\n    }\r\n\r\n    async start() {\r\n        if (this.isRunning) {\r\n            elizaLogger.warn(\"JeeterSearchClient is already running\");\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        elizaLogger.log(\"Starting JeeterSearchClient\");\r\n\r\n        const handleJeeterInteractionsLoop = async () => {\r\n            if (!this.isRunning) {\r\n                elizaLogger.log(\"JeeterSearchClient has been stopped\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.engageWithSearchTerms();\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error in engagement loop:\", error);\r\n            }\r\n\r\n            if (this.isRunning) {\r\n                this.timeoutHandle = setTimeout(\r\n                    handleJeeterInteractionsLoop,\r\n                    Math.floor(\r\n                        Math.random() * (MAX_INTERVAL - MIN_INTERVAL + 1)\r\n                    ) + MIN_INTERVAL\r\n                );\r\n            }\r\n        };\r\n\r\n        // Start the loop\r\n        handleJeeterInteractionsLoop();\r\n    }\r\n\r\n    public async stop() {\r\n        elizaLogger.log(\"Stopping JeeterSearchClient...\");\r\n        this.isRunning = false;\r\n\r\n        // Clear any pending timeout\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        // Clear interaction sets\r\n        this.repliedJeets.clear();\r\n        this.likedJeets.clear();\r\n        this.rejeetedJeets.clear();\r\n        this.quotedJeets.clear();\r\n\r\n        // Wait for any ongoing operations to complete\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n        elizaLogger.log(\"JeeterSearchClient stopped successfully\");\r\n    }\r\n\r\n    private async engageWithSearchTerms() {\r\n        if (!this.isRunning) {\r\n            elizaLogger.log(\r\n                \"Skipping search terms engagement - client is stopped\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        elizaLogger.log(\"Engaging with search terms\");\r\n        try {\r\n            if (!this.runtime.character.topics?.length) {\r\n                elizaLogger.log(\"No topics available for search\");\r\n                return;\r\n            }\r\n\r\n            const searchTerm = [...this.runtime.character.topics][\r\n                Math.floor(Math.random() * this.runtime.character.topics.length)\r\n            ];\r\n\r\n            elizaLogger.log(\"Fetching search jeets\");\r\n            await wait(5000);\r\n\r\n            let searchResponse: JeetResponse = { jeets: [] };\r\n            try {\r\n                searchResponse = await this.client.simsAIClient.searchJeets(\r\n                    searchTerm,\r\n                    20\r\n                );\r\n                if (!searchResponse?.jeets?.length) {\r\n                    elizaLogger.log(\r\n                        `No jeets found for search term: \"${searchTerm}\"`\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error fetching search jeets:\", error);\r\n            }\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            const discoveryTimeline =\r\n                await this.client.simsAIClient.getDiscoveryTimeline(50);\r\n            if (!discoveryTimeline) {\r\n                elizaLogger.log(\"No discovery timeline available\");\r\n                return;\r\n            }\r\n\r\n            await this.client.cacheTimeline(discoveryTimeline.jeets || []);\r\n\r\n            const formattedTimeline = this.formatDiscoveryTimeline(\r\n                discoveryTimeline.jeets || []\r\n            );\r\n\r\n            // Get combined jeets and rank them\r\n            const jeetsToProcess =\r\n                (searchResponse.jeets?.length ?? 0) > 0\r\n                    ? searchResponse.jeets\r\n                    : discoveryTimeline.jeets || [];\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            // Use our new ranking method\r\n            elizaLogger.log(\"Ranking jeets for engagement\");\r\n            const rankedJeets = await this.filterAndRankJeets(jeetsToProcess);\r\n\r\n            if (rankedJeets.length === 0) {\r\n                elizaLogger.log(\"No valid jeets found for processing\");\r\n                return;\r\n            }\r\n\r\n            elizaLogger.log(\r\n                `Found ${rankedJeets.length} ranked jeets to consider`\r\n            );\r\n            const prompt = this.generateSelectionPrompt(\r\n                rankedJeets,\r\n                searchTerm\r\n            );\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            const mostInterestingJeetResponse = await generateText({\r\n                runtime: this.runtime,\r\n                context: prompt,\r\n                modelClass: ModelClass.SMALL,\r\n            });\r\n\r\n            const jeetId = mostInterestingJeetResponse.trim();\r\n            const selectedJeet = rankedJeets.find(\r\n                (jeet) =>\r\n                    jeet.id.toString().includes(jeetId) ||\r\n                    jeetId.includes(jeet.id.toString())\r\n            );\r\n\r\n            if (!selectedJeet) {\r\n                elizaLogger.log(\"No matching jeet found for ID:\", jeetId);\r\n                return;\r\n            }\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            elizaLogger.log(`Selected jeet ${selectedJeet.id} for interaction`);\r\n\r\n            const previousInteractions = {\r\n                replied: await this.hasInteracted(selectedJeet.id, \"reply\"),\r\n                liked: await this.hasInteracted(selectedJeet.id, \"like\"),\r\n                rejeeted: await this.hasInteracted(selectedJeet.id, \"rejeet\"),\r\n                quoted: await this.hasInteracted(selectedJeet.id, \"quote\"),\r\n            };\r\n\r\n            // Skip if we've already interacted with this jeet\r\n            if (Object.values(previousInteractions).some((v) => v)) {\r\n                elizaLogger.log(\r\n                    `Already interacted with jeet ${selectedJeet.id}, skipping`\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            await this.processSelectedJeet(\r\n                selectedJeet,\r\n                formattedTimeline,\r\n                previousInteractions\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error engaging with search terms:\", error);\r\n            if (error instanceof Error && error.stack) {\r\n                elizaLogger.error(\"Stack trace:\", error.stack);\r\n            }\r\n        }\r\n    }\r\n\r\n    private formatDiscoveryTimeline(jeets: Jeet[]): string {\r\n        if (!jeets?.length)\r\n            return `# ${this.runtime.character.name}'s Home Timeline\\n\\nNo jeets available`;\r\n\r\n        return (\r\n            `# ${this.runtime.character.name}'s Home Timeline\\n\\n` +\r\n            jeets\r\n                .map((jeet) => {\r\n                    return `ID: ${jeet.id}\r\nFrom: ${jeet.agent?.name || \"Unknown\"} (@${jeet.agent?.username || \"Unknown\"})\r\nText: ${jeet.text}\r\n---`;\r\n                })\r\n                .join(\"\\n\\n\")\r\n        );\r\n    }\r\n\r\n    private generateSelectionPrompt(jeets: Jeet[], searchTerm: string): string {\r\n        return `\r\n    Here are some jeets related to \"${searchTerm}\". As ${this.runtime.character.name}, you're looking for jeets that would benefit from your engagement and expertise.\r\n\r\n    ${jeets\r\n        .map(\r\n            (jeet) => `\r\n    ID: ${jeet.id}\r\n    From: ${jeet.agent?.name || \"Unknown\"} (@${jeet.agent?.username || \"Unknown\"})\r\n    Text: ${jeet.text}\r\n    Metrics: ${JSON.stringify(jeet.public_metrics || {})}`\r\n        )\r\n        .join(\"\\n---\\n\")}\r\n\r\n    Which jeet would be most valuable to respond to as ${this.runtime.character.name}? Consider:\r\n    - Posts that raise questions or points you can meaningfully contribute to\r\n    - Posts that align with your expertise\r\n    - Posts that could start a productive discussion\r\n    - Posts in English without excessive hashtags/links\r\n    - Avoid already heavily discussed posts or simple announcements\r\n    - Avoid rejeets when possible\r\n\r\n    Please ONLY respond with the ID of the single most promising jeet to engage with.`;\r\n    }\r\n\r\n    private scoreJeetForEngagement(jeet: Jeet): number {\r\n        let score = 0;\r\n\r\n        // Prefer jeets without too many replies already\r\n        if (jeet.public_metrics?.reply_count < 3) score += 3;\r\n        else if (jeet.public_metrics?.reply_count < 5) score += 1;\r\n\r\n        // Avoid heavily rejeeted/quoted content\r\n        if (jeet.public_metrics?.rejeet_count > 10) score -= 2;\r\n        if (jeet.public_metrics?.quote_count > 5) score -= 1;\r\n\r\n        // Prefer original content over rejeets\r\n        if (jeet.isRejeet) score -= 3;\r\n\r\n        // Avoid jeets with lots of hashtags/links\r\n        const hashtagCount = (jeet.text?.match(/#/g) || []).length;\r\n        const urlCount = (jeet.text?.match(/https?:\\/\\//g) || []).length;\r\n        score -= hashtagCount + urlCount;\r\n\r\n        // Prefer jeets with meaningful length (not too short, not too long)\r\n        const textLength = jeet.text?.length || 0;\r\n        if (textLength > 50 && textLength < 200) score += 2;\r\n\r\n        // Prefer jeets that seem to ask questions or invite discussion\r\n        if (jeet.text?.includes(\"?\")) score += 2;\r\n        const discussionWords = [\r\n            \"thoughts\",\r\n            \"opinion\",\r\n            \"what if\",\r\n            \"how about\",\r\n            \"discuss\",\r\n        ];\r\n        if (\r\n            discussionWords.some((word) =>\r\n                jeet.text?.toLowerCase().includes(word)\r\n            )\r\n        )\r\n            score += 2;\r\n\r\n        return score;\r\n    }\r\n\r\n    private async filterAndRankJeets(jeets: Jeet[]): Promise<Jeet[]> {\r\n        if (!this.isRunning) return [];\r\n\r\n        // First filter out basic invalid jeets\r\n        const basicValidJeets = jeets.filter(\r\n            (jeet) =>\r\n                jeet?.text &&\r\n                jeet.agent?.username !==\r\n                    this.runtime.getSetting(\"SIMSAI_USERNAME\")\r\n        );\r\n\r\n        // Then check ALL interaction types before processing\r\n        const validJeets = [];\r\n        for (const jeet of basicValidJeets) {\r\n            if (!this.isRunning) return [];\r\n\r\n            const hasReplied = await this.hasInteracted(jeet.id, \"reply\");\r\n            const hasLiked = await this.hasInteracted(jeet.id, \"like\");\r\n            const hasRejeeted = await this.hasInteracted(jeet.id, \"rejeet\");\r\n            const hasQuoted = await this.hasInteracted(jeet.id, \"quote\");\r\n\r\n            // Only include jeets we haven't interacted with at all\r\n            if (!hasReplied && !hasLiked && !hasRejeeted && !hasQuoted) {\r\n                validJeets.push(jeet);\r\n            }\r\n        }\r\n\r\n        // Score and sort jeets\r\n        const scoredJeets = validJeets\r\n            .map((jeet) => ({\r\n                jeet,\r\n                score: this.scoreJeetForEngagement(jeet),\r\n            }))\r\n            .sort((a, b) => b.score - a.score);\r\n\r\n        // Take top 20 and add slight randomization while maintaining general score order\r\n        const topJeets = scoredJeets\r\n            .slice(0, 20)\r\n            .map(({ jeet }, index) => ({\r\n                jeet,\r\n                randomScore: Math.random() * 0.3 + (1 - index / 20),\r\n            }))\r\n            .sort((a, b) => b.randomScore - a.randomScore);\r\n\r\n        return topJeets.map(({ jeet }) => jeet);\r\n    }\r\n\r\n    private async processSelectedJeet(\r\n        selectedJeet: Jeet,\r\n        formattedTimeline: string,\r\n        previousInteractions: {\r\n            replied: boolean;\r\n            liked: boolean;\r\n            rejeeted: boolean;\r\n            quoted: boolean;\r\n        }\r\n    ) {\r\n        if (!this.isRunning) return;\r\n\r\n        // If dry run is enabled, skip processing\r\n        if (this.runtime.getSetting(\"SIMSAI_DRY_RUN\") === \"true\") {\r\n            elizaLogger.info(\r\n                `Dry run: would have processed jeet: ${selectedJeet.id}`\r\n            );\r\n            return;\r\n        }\r\n\r\n        const roomId = stringToUuid(\r\n            `${selectedJeet.conversationId || selectedJeet.id}-${this.runtime.agentId}`\r\n        );\r\n        const userIdUUID = stringToUuid(selectedJeet.agentId);\r\n\r\n        await this.runtime.ensureConnection(\r\n            userIdUUID,\r\n            roomId,\r\n            selectedJeet.agent?.username || \"\",\r\n            selectedJeet.agent?.name || \"\",\r\n            \"jeeter\"\r\n        );\r\n\r\n        if (!this.isRunning) return;\r\n\r\n        const thread = await buildConversationThread(selectedJeet, this.client);\r\n        elizaLogger.log(\r\n            `Retrieved conversation thread with ${thread.length} messages:`,\r\n            {\r\n                messages: thread.map((t) => ({\r\n                    id: t.id,\r\n                    username: t.agent?.username,\r\n                    text:\r\n                        t.text?.slice(0, 50) +\r\n                        (t.text?.length > 50 ? \"...\" : \"\"),\r\n                    timestamp: t.createdAt,\r\n                })),\r\n            }\r\n        );\r\n\r\n        // Sort thread chronologically and handle timestamps\r\n        const sortedThread = thread.sort((a, b) => {\r\n            const timeA = new Date(a.createdAt || 0).getTime();\r\n            const timeB = new Date(b.createdAt || 0).getTime();\r\n            return timeA - timeB;\r\n        });\r\n\r\n        if (!this.isRunning) return;\r\n\r\n        // Enhanced formatting of conversation context with clear conversation flow\r\n        const formattedConversation = sortedThread\r\n            .map((j, index) => {\r\n                const timestamp = j.createdAt\r\n                    ? new Date(j.createdAt).getTime()\r\n                    : Date.now();\r\n                const isCurrentJeet = j.id === selectedJeet.id;\r\n                const arrow = index > 0 ? \"↪ \" : \"\"; // Show reply chain\r\n                return `[${new Date(timestamp).toLocaleString()}] ${arrow}@${\r\n                    j.agent?.username || \"unknown\"\r\n                }${isCurrentJeet ? \" (current message)\" : \"\"}: ${j.text}`;\r\n            })\r\n            .join(\"\\n\\n\");\r\n\r\n        // Log conversation context for debugging\r\n        elizaLogger.log(\"Conversation context:\", {\r\n            originalJeet: selectedJeet.id,\r\n            totalMessages: thread.length,\r\n            participants: [...new Set(thread.map((j) => j.agent?.username))],\r\n            timespan:\r\n                thread.length > 1\r\n                    ? {\r\n                          first: new Date(\r\n                              Math.min(\r\n                                  ...thread.map((j) =>\r\n                                      new Date(j.createdAt || 0).getTime()\r\n                                  )\r\n                              )\r\n                          ),\r\n                          last: new Date(\r\n                              Math.max(\r\n                                  ...thread.map((j) =>\r\n                                      new Date(j.createdAt || 0).getTime()\r\n                                  )\r\n                              )\r\n                          ),\r\n                      }\r\n                    : null,\r\n        });\r\n\r\n        const message = {\r\n            id: stringToUuid(selectedJeet.id + \"-\" + this.runtime.agentId),\r\n            agentId: this.runtime.agentId,\r\n            content: {\r\n                text: selectedJeet.text,\r\n                inReplyTo: undefined,\r\n            },\r\n            userId: userIdUUID,\r\n            roomId,\r\n            createdAt: selectedJeet.createdAt\r\n                ? new Date(selectedJeet.createdAt).getTime()\r\n                : Date.now(),\r\n        };\r\n\r\n        if (!message.content.text) {\r\n            return { text: \"\", action: \"IGNORE\" };\r\n        }\r\n\r\n        if (!this.isRunning) return;\r\n\r\n        await this.handleJeetInteractions(\r\n            message,\r\n            selectedJeet,\r\n            formattedTimeline,\r\n            previousInteractions,\r\n            formattedConversation,\r\n            thread\r\n        );\r\n    }\r\n\r\n    private async handleJeetInteractions(\r\n        message: any,\r\n        selectedJeet: Jeet,\r\n        formattedTimeline: string,\r\n        previousInteractions: {\r\n            replied: boolean;\r\n            liked: boolean;\r\n            rejeeted: boolean;\r\n            quoted: boolean;\r\n        },\r\n        formattedConversation: string,\r\n        thread: Jeet[]\r\n    ) {\r\n        if (!this.isRunning) return;\r\n\r\n        try {\r\n            elizaLogger.log(`Composing state for jeet ${selectedJeet.id}`);\r\n            let state = await this.runtime.composeState(message, {\r\n                jeeterClient: this.client,\r\n                jeeterUserName: this.runtime.getSetting(\"SIMSAI_USERNAME\"),\r\n                timeline: formattedTimeline,\r\n                jeetContext: await this.buildJeetContext(selectedJeet),\r\n                formattedConversation,\r\n                conversationContext: {\r\n                    messageCount: thread.length,\r\n                    participants: [\r\n                        ...new Set(thread.map((j) => j.agent?.username)),\r\n                    ],\r\n                    timespan:\r\n                        thread.length > 1\r\n                            ? {\r\n                                  start: new Date(\r\n                                      Math.min(\r\n                                          ...thread.map((j) =>\r\n                                              new Date(\r\n                                                  j.createdAt || 0\r\n                                              ).getTime()\r\n                                          )\r\n                                      )\r\n                                  ).toISOString(),\r\n                                  end: new Date(\r\n                                      Math.max(\r\n                                          ...thread.map((j) =>\r\n                                              new Date(\r\n                                                  j.createdAt || 0\r\n                                              ).getTime()\r\n                                          )\r\n                                      )\r\n                                  ).toISOString(),\r\n                              }\r\n                            : null,\r\n                },\r\n                previousInteractions,\r\n            });\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            elizaLogger.log(\r\n                `Saving request message for jeet ${selectedJeet.id}`\r\n            );\r\n            await this.client.saveRequestMessage(message, state as State);\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template:\r\n                    this.runtime.character.templates?.jeeterSearchTemplate ||\r\n                    jeeterSearchTemplate,\r\n            });\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            elizaLogger.log(\r\n                `Generating message response for jeet ${selectedJeet.id}`\r\n            );\r\n            const rawResponse = (await generateMessageResponse({\r\n                runtime: this.runtime,\r\n                context,\r\n                modelClass: ModelClass.SMALL,\r\n            })) as EnhancedResponseContent;\r\n\r\n            elizaLogger.debug(\"Raw response:\", rawResponse);\r\n            const response = {\r\n                text: rawResponse.text,\r\n                action: rawResponse.action,\r\n                shouldLike: rawResponse.shouldLike,\r\n                interactions: rawResponse.interactions || [],\r\n            };\r\n\r\n            if (!response.interactions) {\r\n                throw new TypeError(\"Response interactions are undefined\");\r\n            }\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            if (response.interactions.length > 0) {\r\n                for (const interaction of response.interactions) {\r\n                    if (!this.isRunning) return;\r\n\r\n                    try {\r\n                        if (\r\n                            (interaction.type === \"reply\" &&\r\n                                previousInteractions.replied) ||\r\n                            (interaction.type === \"rejeet\" &&\r\n                                previousInteractions.rejeeted) ||\r\n                            (interaction.type === \"quote\" &&\r\n                                previousInteractions.quoted) ||\r\n                            (interaction.type === \"like\" &&\r\n                                previousInteractions.liked)\r\n                        ) {\r\n                            elizaLogger.log(\r\n                                `Skipping ${interaction.type} for jeet ${selectedJeet.id} - already performed`\r\n                            );\r\n                            continue;\r\n                        }\r\n\r\n                        elizaLogger.log(\r\n                            `Attempting ${interaction.type} interaction for jeet ${selectedJeet.id}`\r\n                        );\r\n\r\n                        switch (interaction.type) {\r\n                            case \"rejeet\":\r\n                                try {\r\n                                    if (!this.isRunning) return;\r\n                                    const rejeetResult =\r\n                                        await this.client.simsAIClient.rejeetJeet(\r\n                                            selectedJeet.id\r\n                                        );\r\n                                    if (rejeetResult?.id) {\r\n                                        elizaLogger.log(\r\n                                            `Rejeeted jeet ${selectedJeet.id}`\r\n                                        );\r\n                                        this.recordInteraction(\r\n                                            selectedJeet.id,\r\n                                            \"rejeet\"\r\n                                        );\r\n                                    } else {\r\n                                        elizaLogger.error(\r\n                                            `Failed to rejeet jeet ${selectedJeet.id}:`,\r\n                                            rejeetResult\r\n                                        );\r\n                                    }\r\n                                } catch (error) {\r\n                                    elizaLogger.error(\r\n                                        `Error processing rejeet for jeet ${selectedJeet.id}:`,\r\n                                        error\r\n                                    );\r\n                                }\r\n                                break;\r\n\r\n                            case \"quote\":\r\n                                if (interaction.text) {\r\n                                    if (!this.isRunning) return;\r\n                                    await this.client.simsAIClient.quoteRejeet(\r\n                                        selectedJeet.id,\r\n                                        interaction.text\r\n                                    );\r\n                                    elizaLogger.log(\r\n                                        `Quote rejeeted jeet ${selectedJeet.id}`\r\n                                    );\r\n                                    this.recordInteraction(\r\n                                        selectedJeet.id,\r\n                                        \"quote\"\r\n                                    );\r\n                                }\r\n                                break;\r\n\r\n                            case \"reply\":\r\n                                if (interaction.text) {\r\n                                    if (!this.isRunning) return;\r\n                                    const replyResponse = {\r\n                                        ...response,\r\n                                        text: interaction.text,\r\n                                    };\r\n\r\n                                    const responseMessages = await sendJeet(\r\n                                        this.client,\r\n                                        replyResponse,\r\n                                        message.roomId,\r\n                                        this.client.profile.username,\r\n                                        selectedJeet.id\r\n                                    );\r\n\r\n                                    state =\r\n                                        await this.runtime.updateRecentMessageState(\r\n                                            state\r\n                                        );\r\n\r\n                                    for (const [\r\n                                        idx,\r\n                                        responseMessage,\r\n                                    ] of responseMessages.entries()) {\r\n                                        if (!this.isRunning) return;\r\n                                        responseMessage.content.action =\r\n                                            idx === responseMessages.length - 1\r\n                                                ? response.action\r\n                                                : \"CONTINUE\";\r\n                                        await this.runtime.messageManager.createMemory(\r\n                                            responseMessage\r\n                                        );\r\n                                    }\r\n\r\n                                    await this.runtime.evaluate(message, state);\r\n                                    await this.runtime.processActions(\r\n                                        message,\r\n                                        responseMessages,\r\n                                        state\r\n                                    );\r\n\r\n                                    this.recordInteraction(\r\n                                        selectedJeet.id,\r\n                                        \"reply\"\r\n                                    );\r\n                                }\r\n                                break;\r\n\r\n                            case \"like\":\r\n                                try {\r\n                                    if (!this.isRunning) return;\r\n                                    await this.client.simsAIClient.likeJeet(\r\n                                        selectedJeet.id\r\n                                    );\r\n                                    elizaLogger.log(\r\n                                        `Liked jeet ${selectedJeet.id}`\r\n                                    );\r\n                                    this.recordInteraction(\r\n                                        selectedJeet.id,\r\n                                        \"like\"\r\n                                    );\r\n                                } catch (error) {\r\n                                    elizaLogger.error(\r\n                                        `Error liking jeet ${selectedJeet.id}:`,\r\n                                        error\r\n                                    );\r\n                                }\r\n                                break;\r\n\r\n                            case \"none\":\r\n                                elizaLogger.log(\r\n                                    `Chose not to interact with jeet ${selectedJeet.id}`\r\n                                );\r\n                                break;\r\n                        }\r\n\r\n                        elizaLogger.log(\r\n                            `Successfully performed ${interaction.type} interaction for jeet ${selectedJeet.id}`\r\n                        );\r\n                    } catch (error) {\r\n                        elizaLogger.error(\r\n                            `Error processing interaction ${interaction.type} for jeet ${selectedJeet.id}:`,\r\n                            error\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!this.isRunning) return;\r\n\r\n            const responseInfo = `Context:\\n\\n${context}\\n\\nSelected Post: ${\r\n                selectedJeet.id\r\n            } - @${selectedJeet.agent?.username || \"unknown\"}: ${\r\n                selectedJeet.text\r\n            }\\nAgent's Output:\\n${JSON.stringify(response)}`;\r\n\r\n            elizaLogger.log(\r\n                `Caching response info for jeet ${selectedJeet.id}`\r\n            );\r\n            await this.runtime.cacheManager.set(\r\n                `jeeter/jeet_generation_${selectedJeet.id}.txt`,\r\n                responseInfo\r\n            );\r\n\r\n            await wait();\r\n\r\n            const interactionSummary = {\r\n                jeetId: selectedJeet.id,\r\n                liked: response.shouldLike,\r\n                interactions: response.interactions.map((i) => i.type),\r\n                replyText: response.text,\r\n                quoteTexts: response.interactions\r\n                    .filter((i) => i.type === \"quote\")\r\n                    .map((i) => i.text),\r\n            };\r\n            elizaLogger.debug(\r\n                `Interaction summary: ${JSON.stringify(interactionSummary)}`\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(`Error generating/sending response: ${error}`);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async buildJeetContext(selectedJeet: Jeet): Promise<string> {\r\n        if (!this.isRunning) return \"\";\r\n\r\n        let context = `Original Post:\\nBy @${selectedJeet.agent?.username || \"unknown\"}\\n${selectedJeet.text}`;\r\n\r\n        if (selectedJeet.thread?.length) {\r\n            const replyContext = selectedJeet.thread\r\n                .filter(\r\n                    (reply: Jeet) =>\r\n                        reply.agent?.username !==\r\n                        this.runtime.getSetting(\"SIMSAI_USERNAME\")\r\n                )\r\n                .map(\r\n                    (reply: Jeet) =>\r\n                        `@${reply.agent?.username || \"unknown\"}: ${reply.text}`\r\n                )\r\n                .join(\"\\n\");\r\n\r\n            if (replyContext) {\r\n                context += `\\nReplies to original post:\\n${replyContext}`;\r\n            }\r\n        }\r\n\r\n        if (!this.isRunning) return \"\";\r\n\r\n        // Add media descriptions if they exist\r\n        if (selectedJeet.media?.length) {\r\n            const imageDescriptions = [];\r\n            for (const media of selectedJeet.media) {\r\n                if (!this.isRunning) return \"\";\r\n                // Check if the media has a URL and we can process it\r\n                if (\"url\" in media) {\r\n                    const imageDescriptionService =\r\n                        this.runtime.getService<IImageDescriptionService>(\r\n                            ServiceType.IMAGE_DESCRIPTION\r\n                        );\r\n\r\n                    const description =\r\n                        await imageDescriptionService.describeImage(media.url);\r\n                    imageDescriptions.push(description);\r\n                }\r\n            }\r\n\r\n            if (imageDescriptions.length > 0) {\r\n                context += `\\nMedia in Post (Described): ${imageDescriptions.join(\", \")}`;\r\n            }\r\n        }\r\n\r\n        // Add URLs if they exist\r\n        if (selectedJeet.urls?.length) {\r\n            context += `\\nURLs: ${selectedJeet.urls.join(\", \")}`;\r\n        }\r\n\r\n        if (!this.isRunning) return \"\";\r\n\r\n        // Add photos if they exist\r\n        if (selectedJeet.photos?.length) {\r\n            const photoDescriptions = [];\r\n            for (const photo of selectedJeet.photos) {\r\n                if (!this.isRunning) return \"\";\r\n                if (photo.url) {\r\n                    const imageDescriptionService =\r\n                        this.runtime.getService<IImageDescriptionService>(\r\n                            ServiceType.IMAGE_DESCRIPTION\r\n                        );\r\n\r\n                    const description =\r\n                        await imageDescriptionService.describeImage(photo.url);\r\n                    photoDescriptions.push(description);\r\n                }\r\n            }\r\n\r\n            if (photoDescriptions.length > 0) {\r\n                context += `\\nPhotos in Post (Described): ${photoDescriptions.join(\", \")}`;\r\n            }\r\n        }\r\n\r\n        // Add videos if they exist (just mentioning their presence)\r\n        if (selectedJeet.videos?.length) {\r\n            context += `\\nVideos: ${selectedJeet.videos.length} video(s) attached`;\r\n        }\r\n\r\n        return context;\r\n    }\r\n}\r\n","import {\r\n    composeContext,\r\n    generateMessageResponse,\r\n    generateShouldRespond,\r\n    shouldRespondFooter,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    stringToUuid,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { ClientBase } from \"./base\";\r\nimport { buildConversationThread, sendJeet, wait } from \"./utils\";\r\nimport { Jeet, EnhancedResponseContent, JeetInteraction } from \"./types\";\r\nimport {\r\n    JEETER_SHOULD_RESPOND_BASE,\r\n    JEETER_INTERACTION_MESSAGE_COMPLETION_FOOTER,\r\n    MAX_INTERVAL,\r\n    MIN_INTERVAL,\r\n    JEETER_INTERACTION_BASE,\r\n} from \"./constants\";\r\n\r\nexport const jeeterMessageHandlerTemplate =\r\n    JEETER_INTERACTION_BASE + JEETER_INTERACTION_MESSAGE_COMPLETION_FOOTER;\r\nexport const jeeterShouldRespondTemplate =\r\n    JEETER_SHOULD_RESPOND_BASE + shouldRespondFooter;\r\n\r\nexport class JeeterInteractionClient {\r\n    private likedJeets: Set<string> = new Set();\r\n    private rejeetedJeets: Set<string> = new Set();\r\n    private quotedJeets: Set<string> = new Set();\r\n    private repliedJeets: Set<string> = new Set();\r\n    private isRunning: boolean = false;\r\n    private timeoutHandle?: NodeJS.Timeout;\r\n\r\n    constructor(\r\n        private client: ClientBase,\r\n        private runtime: IAgentRuntime\r\n    ) {}\r\n\r\n    private async hasInteracted(\r\n        jeetId: string,\r\n        type: JeetInteraction[\"type\"],\r\n        inReplyToStatusId?: string\r\n    ): Promise<boolean> {\r\n        // If this is a reply to our jeet, always allow the agent to decide whether to respond\r\n        if (type === \"reply\" && inReplyToStatusId) {\r\n            const parentJeet = await this.client.getJeet(inReplyToStatusId);\r\n            if (parentJeet?.agentId === this.client.profile.id) {\r\n                return false; // Let the agent decide through generateResponse\r\n            }\r\n        }\r\n\r\n        // For other interactions, check if we've already done them\r\n        switch (type) {\r\n            case \"like\":\r\n                return this.likedJeets.has(jeetId);\r\n            case \"rejeet\":\r\n                return this.rejeetedJeets.has(jeetId);\r\n            case \"quote\":\r\n                return this.quotedJeets.has(jeetId);\r\n            case \"reply\":\r\n                return this.repliedJeets.has(jeetId);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private recordInteraction(jeetId: string, type: JeetInteraction[\"type\"]) {\r\n        switch (type) {\r\n            case \"like\":\r\n                this.likedJeets.add(jeetId);\r\n                break;\r\n            case \"rejeet\":\r\n                this.rejeetedJeets.add(jeetId);\r\n                break;\r\n            case \"quote\":\r\n                this.quotedJeets.add(jeetId);\r\n                break;\r\n            case \"reply\":\r\n                this.repliedJeets.add(jeetId);\r\n                break;\r\n        }\r\n    }\r\n\r\n    async start() {\r\n        if (this.isRunning) {\r\n            elizaLogger.warn(\"JeeterInteractionClient is already running\");\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        elizaLogger.log(\"Starting Jeeter Interaction Client\");\r\n\r\n        const handleJeeterInteractionsLoop = async () => {\r\n            if (!this.isRunning) {\r\n                elizaLogger.log(\"JeeterInteractionClient has been stopped\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.handleJeeterInteractions().catch((error) => {\r\n                    elizaLogger.error(\"Error in interaction loop:\", error);\r\n                });\r\n\r\n                const nextInterval =\r\n                    Math.floor(\r\n                        Math.random() * (MAX_INTERVAL - MIN_INTERVAL + 1)\r\n                    ) + MIN_INTERVAL;\r\n\r\n                elizaLogger.log(\r\n                    `Next check scheduled in ${nextInterval / 1000} seconds`\r\n                );\r\n\r\n                // Store the timeout handle so we can clear it when stopping\r\n                this.timeoutHandle = setTimeout(() => {\r\n                    handleJeeterInteractionsLoop();\r\n                }, nextInterval);\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error in loop scheduling:\", error);\r\n                if (this.isRunning) {\r\n                    this.timeoutHandle = setTimeout(\r\n                        () => {\r\n                            handleJeeterInteractionsLoop();\r\n                        },\r\n                        5 * 60 * 1000\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        // Start the loop\r\n        handleJeeterInteractionsLoop();\r\n    }\r\n\r\n    public async stop() {\r\n        elizaLogger.log(\"Stopping JeeterInteractionClient...\");\r\n        this.isRunning = false;\r\n\r\n        // Clear any pending timeout\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        // Clear interaction sets\r\n        this.likedJeets.clear();\r\n        this.rejeetedJeets.clear();\r\n        this.quotedJeets.clear();\r\n        this.repliedJeets.clear();\r\n\r\n        // Wait for any ongoing operations to complete\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n        elizaLogger.log(\"JeeterInteractionClient stopped successfully\");\r\n    }\r\n\r\n    async handleJeeterInteractions() {\r\n        elizaLogger.log(\"Checking Jeeter interactions\");\r\n\r\n        try {\r\n            const { username: jeeterUsername } = this.client.profile;\r\n            elizaLogger.log(\r\n                `Fetching mentions and comments for @${jeeterUsername}`\r\n            );\r\n\r\n            // Fetch mentions\r\n            const searchResponse = await this.client.fetchSearchJeets(\r\n                `@${jeeterUsername}`,\r\n                20\r\n            );\r\n\r\n            // Fetch user's own posts\r\n            const homeTimeline = await this.getHomeTimeline();\r\n\r\n            // Get comments on user's posts\r\n            const commentsOnPosts = await this.getCommentsOnPosts(homeTimeline);\r\n\r\n            // Combine mentions and comments, remove duplicates\r\n            const allInteractions = [\r\n                ...(searchResponse?.jeets || []),\r\n                ...commentsOnPosts,\r\n            ];\r\n\r\n            const uniqueJeets = Array.from(\r\n                new Map(allInteractions.map((jeet) => [jeet.id, jeet])).values()\r\n            )\r\n                .sort((a, b) => a.id.localeCompare(b.id))\r\n                .filter((jeet) => jeet.agentId !== this.client.profile.id);\r\n\r\n            elizaLogger.log(\r\n                `Found ${uniqueJeets.length} unique interactions to process`\r\n            );\r\n\r\n            const interactionPromises = uniqueJeets.map(async (jeet) => {\r\n                if (!this.isRunning) {\r\n                    elizaLogger.log(\r\n                        \"Stopping jeet processing due to client stop\"\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                elizaLogger.log(\r\n                    \"Processing interaction:\",\r\n                    JSON.stringify(jeet)\r\n                );\r\n\r\n                if (!jeet.id) {\r\n                    elizaLogger.warn(\"Skipping interaction without ID\");\r\n                    return;\r\n                }\r\n\r\n                if (\r\n                    this.client.lastCheckedJeetId &&\r\n                    parseInt(jeet.id) <= parseInt(this.client.lastCheckedJeetId)\r\n                ) {\r\n                    elizaLogger.log(\r\n                        `Skipping already processed interaction ${jeet.id}`\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    const roomId = stringToUuid(\r\n                        `${jeet.conversationId ?? jeet.id}-${this.runtime.agentId}`\r\n                    );\r\n                    const userIdUUID = stringToUuid(jeet.agentId);\r\n\r\n                    elizaLogger.log(\r\n                        `Ensuring connection for user ${jeet.agent?.username}`\r\n                    );\r\n                    await this.runtime.ensureConnection(\r\n                        userIdUUID,\r\n                        roomId,\r\n                        jeet.agent?.username || \"\",\r\n                        jeet.agent?.name || \"\",\r\n                        \"jeeter\"\r\n                    );\r\n\r\n                    elizaLogger.log(\r\n                        `Building conversation thread for interaction ${jeet.id}`\r\n                    );\r\n                    const thread = await buildConversationThread(\r\n                        jeet,\r\n                        this.client\r\n                    );\r\n\r\n                    const message: Memory = {\r\n                        content: { text: jeet.text },\r\n                        agentId: this.runtime.agentId,\r\n                        userId: userIdUUID,\r\n                        roomId,\r\n                    };\r\n\r\n                    elizaLogger.log(`Handling interaction ${jeet.id}`);\r\n                    await this.handleJeet({\r\n                        jeet,\r\n                        message,\r\n                        thread,\r\n                    });\r\n\r\n                    this.client.lastCheckedJeetId = jeet.id;\r\n\r\n                    elizaLogger.log(\r\n                        `Successfully processed interaction ${jeet.id}`\r\n                    );\r\n                } catch (error) {\r\n                    elizaLogger.error(\r\n                        `Error processing interaction ${jeet.id}:`,\r\n                        error\r\n                    );\r\n                    if (error instanceof Error) {\r\n                        elizaLogger.error(\"Error details:\", {\r\n                            message: error.message,\r\n                            stack: error.stack,\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            await Promise.all(interactionPromises);\r\n\r\n            await this.client.cacheLatestCheckedJeetId();\r\n            elizaLogger.log(\"Finished checking Jeeter interactions\");\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in handleJeeterInteractions:\", error);\r\n            if (error instanceof Error) {\r\n                elizaLogger.error(\"Error details:\", {\r\n                    message: error.message,\r\n                    stack: error.stack,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private async getCommentsOnPosts(posts: Jeet[]): Promise<Jeet[]> {\r\n        const comments: Jeet[] = [];\r\n\r\n        for (const post of posts) {\r\n            try {\r\n                if (!post.public_metrics?.reply_count) {\r\n                    continue;\r\n                }\r\n\r\n                elizaLogger.log(`Fetching conversation for post ${post.id}`);\r\n                const conversation =\r\n                    await this.client.simsAIClient.getJeetConversation(post.id);\r\n\r\n                if (conversation) {\r\n                    // Filter out the original post and the agent's own replies\r\n                    const validComments = conversation\r\n                        .filter(\r\n                            (reply) =>\r\n                                reply.id !== post.id && // Not the original post\r\n                                reply.agentId !== this.client.profile.id && // Not our own replies\r\n                                !reply.isRejeet // Not a rejeet\r\n                        )\r\n                        .sort((a, b) => {\r\n                            const timeA = new Date(a.createdAt || 0).getTime();\r\n                            const timeB = new Date(b.createdAt || 0).getTime();\r\n                            return timeB - timeA; // Newest first\r\n                        });\r\n\r\n                    comments.push(...validComments);\r\n                }\r\n\r\n                await wait(1000, 2000); // Rate limiting delay\r\n            } catch (error) {\r\n                elizaLogger.error(\r\n                    `Error fetching comments for post ${post.id}:`,\r\n                    error\r\n                );\r\n            }\r\n        }\r\n\r\n        return comments;\r\n    }\r\n\r\n    private async handleJeet({\r\n        jeet,\r\n        message,\r\n        thread,\r\n    }: {\r\n        jeet: Jeet;\r\n        message: Memory;\r\n        thread: Jeet[];\r\n    }): Promise<EnhancedResponseContent> {\r\n        elizaLogger.log(`Starting handleJeet for ${jeet.id}`);\r\n\r\n        // If dry run is enabled, skip processing\r\n        if (this.runtime.getSetting(\"SIMSAI_DRY_RUN\") === \"true\") {\r\n            elizaLogger.info(`Dry run: would have handled jeet: ${jeet.id}`);\r\n            return {\r\n                text: \"\",\r\n                shouldLike: false,\r\n                interactions: [],\r\n                action: \"IGNORE\",\r\n            } as EnhancedResponseContent;\r\n        }\r\n\r\n        try {\r\n            if (!message.content.text) {\r\n                elizaLogger.log(`Skipping jeet ${jeet.id} - no text content`);\r\n                return {\r\n                    text: \"\",\r\n                    shouldLike: false,\r\n                    interactions: [],\r\n                    action: \"IGNORE\",\r\n                } as EnhancedResponseContent;\r\n            }\r\n\r\n            const homeTimeline = await this.getHomeTimeline();\r\n\r\n            const formatJeet = (j: Jeet) =>\r\n                `ID: ${j.id}\\nFrom: ${j.agent?.name || \"Unknown\"} (@${\r\n                    j.agent?.username || \"Unknown\"\r\n                })\\nText: ${j.text}`;\r\n\r\n            const formattedHomeTimeline = homeTimeline\r\n                .map((j) => `${formatJeet(j)}\\n---\\n`)\r\n                .join(\"\\n\");\r\n\r\n            const formattedConversation = thread\r\n                .map(\r\n                    (j) =>\r\n                        `@${j.agent?.username || \"unknown\"} (${new Date(\r\n                            j.createdAt\r\n                                ? new Date(j.createdAt).getTime()\r\n                                : Date.now()\r\n                        ).toLocaleString()}): ${j.text}`\r\n                )\r\n                .join(\"\\n\\n\");\r\n\r\n            elizaLogger.log(\"Composing state\");\r\n            let state = await this.runtime.composeState(message, {\r\n                jeeterClient: this.client.simsAIClient,\r\n                jeeterUserName: this.client.profile.username,\r\n                currentPost: formatJeet(jeet),\r\n                formattedConversation,\r\n                timeline: `# ${this.runtime.character.name}'s Home Timeline\\n\\n${formattedHomeTimeline}`,\r\n            });\r\n\r\n            elizaLogger.log(\"Checking if should respond\");\r\n            const shouldRespondContext = composeContext({\r\n                state,\r\n                template:\r\n                    this.runtime.character?.templates\r\n                        ?.jeeterShouldRespondTemplate ||\r\n                    jeeterShouldRespondTemplate,\r\n            });\r\n\r\n            const shouldRespond = await generateShouldRespond({\r\n                runtime: this.runtime,\r\n                context: shouldRespondContext,\r\n                modelClass: ModelClass.MEDIUM,\r\n            });\r\n\r\n            if (shouldRespond !== \"RESPOND\") {\r\n                elizaLogger.log(`Not responding to jeet ${jeet.id}`);\r\n                return {\r\n                    text: \"Response Decision:\",\r\n                    shouldLike: false,\r\n                    interactions: [],\r\n                    action: shouldRespond,\r\n                } as EnhancedResponseContent;\r\n            }\r\n\r\n            // Only create memory and process interaction if we're going to respond\r\n            const jeetId = stringToUuid(jeet.id + \"-\" + this.runtime.agentId);\r\n            elizaLogger.log(`Checking if memory exists for jeetId: ${jeetId}`);\r\n            const jeetExists =\r\n                await this.runtime.messageManager.getMemoryById(jeetId);\r\n            elizaLogger.log(`Memory exists: ${jeetExists}`);\r\n\r\n            if (!jeetExists) {\r\n                elizaLogger.log(`Creating new memory for jeetId: ${jeetId}`);\r\n                const memoryMessage = {\r\n                    id: jeetId,\r\n                    agentId: this.runtime.agentId,\r\n                    content: {\r\n                        text: jeet.text,\r\n                        inReplyTo: jeet.inReplyToStatusId\r\n                            ? stringToUuid(\r\n                                  jeet.inReplyToStatusId +\r\n                                      \"-\" +\r\n                                      this.runtime.agentId\r\n                              )\r\n                            : undefined,\r\n                    },\r\n                    userId: stringToUuid(jeet.agentId),\r\n                    roomId: message.roomId,\r\n                    createdAt: jeet.createdAt\r\n                        ? new Date(jeet.createdAt).getTime()\r\n                        : Date.now(),\r\n                };\r\n                await this.client.saveRequestMessage(memoryMessage, state);\r\n            } else {\r\n                elizaLogger.log(\r\n                    `Already have memory interacting with this jeet: ${jeetId}`\r\n                );\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template:\r\n                    this.runtime.character.templates\r\n                        ?.jeeterMessageHandlerTemplate ||\r\n                    this.runtime.character?.templates?.messageHandlerTemplate ||\r\n                    jeeterMessageHandlerTemplate,\r\n            });\r\n\r\n            const response = (await generateMessageResponse({\r\n                runtime: this.runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n            })) as EnhancedResponseContent;\r\n\r\n            response.interactions = response.interactions || [];\r\n\r\n            // Process interactions\r\n            if (response.interactions.length > 0) {\r\n                for (const interaction of response.interactions) {\r\n                    try {\r\n                        if (\r\n                            await this.hasInteracted(\r\n                                jeet.id,\r\n                                interaction.type,\r\n                                jeet.inReplyToStatusId\r\n                            )\r\n                        ) {\r\n                            elizaLogger.log(\r\n                                `Skipping ${interaction.type} for jeet ${jeet.id} - already performed`\r\n                            );\r\n                            continue;\r\n                        }\r\n\r\n                        switch (interaction.type) {\r\n                            case \"like\":\r\n                                try {\r\n                                    await this.client.simsAIClient.likeJeet(\r\n                                        jeet.id\r\n                                    );\r\n\r\n                                    this.recordInteraction(jeet.id, \"like\");\r\n                                } catch (error) {\r\n                                    elizaLogger.error(\r\n                                        `Error liking interaction ${jeet.id}:`,\r\n                                        error\r\n                                    );\r\n                                }\r\n                                break;\r\n\r\n                            case \"rejeet\":\r\n                                try {\r\n                                    const rejeetResult =\r\n                                        await this.client.simsAIClient.rejeetJeet(\r\n                                            jeet.id\r\n                                        );\r\n                                    if (rejeetResult?.id) {\r\n                                        elizaLogger.log(\r\n                                            `Rejeeted jeet ${jeet.id}`\r\n                                        );\r\n                                        this.recordInteraction(\r\n                                            jeet.id,\r\n                                            \"rejeet\"\r\n                                        );\r\n                                    } else {\r\n                                        elizaLogger.error(\r\n                                            `Failed to rejeet jeet ${jeet.id}: Invalid response`\r\n                                        );\r\n                                    }\r\n                                } catch (error) {\r\n                                    elizaLogger.error(\r\n                                        `Error rejeeting jeet ${jeet.id}:`,\r\n                                        error\r\n                                    );\r\n                                }\r\n                                break;\r\n\r\n                            case \"quote\":\r\n                                if (interaction.text) {\r\n                                    await this.client.simsAIClient.quoteRejeet(\r\n                                        jeet.id,\r\n                                        interaction.text\r\n                                    );\r\n                                    elizaLogger.log(\r\n                                        `Quote rejeeted jeet ${jeet.id}`\r\n                                    );\r\n                                    this.recordInteraction(jeet.id, \"quote\");\r\n                                }\r\n                                break;\r\n\r\n                            case \"reply\":\r\n                                if (interaction.text) {\r\n                                    const replyResponse = {\r\n                                        ...response,\r\n                                        text: interaction.text,\r\n                                    };\r\n\r\n                                    const responseMessages = await sendJeet(\r\n                                        this.client,\r\n                                        replyResponse,\r\n                                        message.roomId,\r\n                                        this.client.profile.username,\r\n                                        jeet.id\r\n                                    );\r\n\r\n                                    state =\r\n                                        await this.runtime.updateRecentMessageState(\r\n                                            state\r\n                                        );\r\n\r\n                                    for (const [\r\n                                        idx,\r\n                                        responseMessage,\r\n                                    ] of responseMessages.entries()) {\r\n                                        responseMessage.content.action =\r\n                                            idx === responseMessages.length - 1\r\n                                                ? response.action\r\n                                                : \"CONTINUE\";\r\n                                        await this.runtime.messageManager.createMemory(\r\n                                            responseMessage\r\n                                        );\r\n                                    }\r\n\r\n                                    await this.runtime.evaluate(message, state);\r\n                                    await this.runtime.processActions(\r\n                                        message,\r\n                                        responseMessages,\r\n                                        state\r\n                                    );\r\n\r\n                                    this.recordInteraction(jeet.id, \"reply\");\r\n                                }\r\n                                break;\r\n\r\n                            case \"none\":\r\n                                elizaLogger.log(\r\n                                    `Chose not to interact with jeet ${jeet.id}`\r\n                                );\r\n                                break;\r\n                        }\r\n                    } catch (error) {\r\n                        elizaLogger.error(\r\n                            `Error processing interaction ${interaction.type} for jeet ${jeet.id}:`,\r\n                            error\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const responseInfo = `Context:\\n\\n${context}\\n\\nSelected Post: ${\r\n                jeet.id\r\n            } - @${jeet.agent?.username || \"unknown\"}: ${\r\n                jeet.text\r\n            }\\nAgent's Output:\\n${JSON.stringify(response)}`;\r\n\r\n            await this.runtime.cacheManager.set(\r\n                `jeeter/jeet_generation_${jeet.id}.txt`,\r\n                responseInfo\r\n            );\r\n\r\n            await wait();\r\n\r\n            const interactionSummary = {\r\n                jeetId: jeet.id,\r\n                liked: response.shouldLike,\r\n                interactions: response.interactions.map((i) => i.type),\r\n                replyText: response.text,\r\n                quoteTexts: response.interactions\r\n                    .filter((i) => i.type === \"quote\")\r\n                    .map((i) => i.text),\r\n            };\r\n            elizaLogger.debug(\r\n                `Interaction summary: ${JSON.stringify(interactionSummary)}`\r\n            );\r\n\r\n            return response;\r\n        } catch (error) {\r\n            elizaLogger.error(`Error generating/sending response: ${error}`);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async getHomeTimeline(): Promise<Jeet[]> {\r\n        let homeTimeline = await this.client.getCachedTimeline();\r\n        if (!homeTimeline) {\r\n            elizaLogger.log(\"Fetching home timeline\");\r\n            homeTimeline = await this.client.fetchHomeTimeline(50);\r\n            await this.client.cacheTimeline(homeTimeline);\r\n        }\r\n        return homeTimeline;\r\n    }\r\n}\r\n","import { JeeterPostClient } from \"./jeeter/post.ts\";\r\nimport { JeeterSearchClient } from \"./jeeter/search.ts\";\r\nimport { JeeterInteractionClient } from \"./jeeter/interactions.ts\";\r\nimport { IAgentRuntime, Client, elizaLogger } from \"@elizaos/core\";\r\nimport { validateJeeterConfig } from \"./jeeter/environment.ts\";\r\nimport { ClientBase } from \"./jeeter/base.ts\";\r\n\r\nclass SimsAIManager {\r\n    client: ClientBase;\r\n    post: JeeterPostClient;\r\n    search: JeeterSearchClient;\r\n    interaction: JeeterInteractionClient;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        this.client = new ClientBase(runtime);\r\n        this.post = new JeeterPostClient(this.client, runtime);\r\n        this.search = new JeeterSearchClient(this.client, runtime);\r\n        this.interaction = new JeeterInteractionClient(this.client, runtime);\r\n    }\r\n}\r\n\r\nlet activeManager: SimsAIManager | null = null;\r\n\r\nexport const JeeterClientInterface: Client = {\r\n    async start(runtime: IAgentRuntime) {\r\n        if (activeManager) {\r\n            elizaLogger.warn(\"SimsAI client already started\");\r\n            return activeManager;\r\n        }\r\n\r\n        await validateJeeterConfig(runtime);\r\n\r\n        elizaLogger.log(\"SimsAI client started\");\r\n\r\n        activeManager = new SimsAIManager(runtime);\r\n\r\n        await activeManager.client.init();\r\n\r\n        await activeManager.post.start();\r\n\r\n        await activeManager.search.start();\r\n\r\n        await activeManager.interaction.start();\r\n\r\n        return activeManager;\r\n    },\r\n    async stop(_runtime: IAgentRuntime) {\r\n        elizaLogger.log(\"Stopping SimsAI client\");\r\n        if (activeManager) {\r\n            try {\r\n                await activeManager.interaction.stop();\r\n                await activeManager.search.stop();\r\n                await activeManager.post.stop();\r\n                activeManager = null;\r\n                elizaLogger.log(\"SimsAI client stopped successfully\");\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error stopping SimsAI client:\", error);\r\n                throw error;\r\n            }\r\n        }\r\n        elizaLogger.log(\"SimsAI client stopped\");\r\n    },\r\n};\r\n\r\nexport default JeeterClientInterface;\r\n","import { elizaLogger, IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const jeeterEnvSchema = z.object({\r\n    SIMSAI_USERNAME: z.string().min(1, \"SimsAI username is required\"),\r\n    SIMSAI_AGENT_ID: z.string().min(1, \"SimsAI agent ID is required\"),\r\n    SIMSAI_API_KEY: z.string().min(1, \"SimsAI API key is required\"),\r\n    SIMSAI_DRY_RUN: z\r\n        .string()\r\n        .optional()\r\n        .default(\"false\")\r\n        .transform((val) => val.toLowerCase() === \"true\" || val === \"1\"),\r\n});\r\n\r\nexport type JeeterConfig = z.infer<typeof jeeterEnvSchema>;\r\n\r\nexport async function validateJeeterConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<JeeterConfig> {\r\n    // Validate environment variables early\r\n    const requiredEnvVars = [\r\n        \"SIMSAI_USERNAME\",\r\n        \"SIMSAI_AGENT_ID\",\r\n        \"SIMSAI_API_KEY\",\r\n    ];\r\n    const missingEnvVars = requiredEnvVars.filter(\r\n        (envVar) => !(runtime.getSetting(envVar) || process.env[envVar])\r\n    );\r\n    if (missingEnvVars.length > 0) {\r\n        throw new Error(\r\n            `Missing required environment variables: ${missingEnvVars.join(\", \")}`\r\n        );\r\n    }\r\n\r\n    try {\r\n        const config = {\r\n            SIMSAI_DRY_RUN:\r\n                runtime.getSetting(\"SIMSAI_DRY_RUN\") ||\r\n                process.env.SIMSAI_DRY_RUN,\r\n            SIMSAI_USERNAME:\r\n                runtime.getSetting(\"SIMSAI_USERNAME\") ||\r\n                process.env.SIMSAI_USERNAME,\r\n            SIMSAI_AGENT_ID:\r\n                runtime.getSetting(\"SIMSAI_AGENT_ID\") ||\r\n                process.env.SIMSAI_AGENT_ID,\r\n            SIMSAI_API_KEY:\r\n                runtime.getSetting(\"SIMSAI_API_KEY\") ||\r\n                process.env.SIMSAI_API_KEY,\r\n        };\r\n\r\n        return jeeterEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            elizaLogger.error(\r\n                `SimsAI configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","import {\r\n    Content,\r\n    IAgentRuntime,\r\n    IImageDescriptionService,\r\n    Memory,\r\n    State,\r\n    UUID,\r\n    getEmbeddingZeroVector,\r\n    elizaLogger,\r\n    stringToUuid,\r\n} from \"@elizaos/core\";\r\nimport { Agent, Jeet, JeetResponse, Pagination, SimsAIProfile } from \"./types\";\r\nimport { EventEmitter } from \"events\";\r\nimport { SimsAIClient } from \"./client\";\r\n\r\nexport function extractAnswer(text: string): string {\r\n    const startIndex = text.indexOf(\"Answer: \") + 8;\r\n    const endIndex = text.indexOf(\"<|endoftext|>\", 11);\r\n    return text.slice(startIndex, endIndex);\r\n}\r\n\r\nclass RequestQueue {\r\n    private queue: (() => Promise<any>)[] = [];\r\n    private processing: boolean = false;\r\n\r\n    async add<T>(request: () => Promise<T>): Promise<T> {\r\n        return new Promise((resolve, reject) => {\r\n            this.queue.push(async () => {\r\n                try {\r\n                    const result = await request();\r\n                    resolve(result);\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n            this.processQueue();\r\n        });\r\n    }\r\n\r\n    private async processQueue(): Promise<void> {\r\n        if (this.processing || this.queue.length === 0) {\r\n            return;\r\n        }\r\n        this.processing = true;\r\n\r\n        while (this.queue.length > 0) {\r\n            const request = this.queue.shift()!;\r\n            try {\r\n                await request();\r\n            } catch (error) {\r\n                console.error(\"Error processing request:\", error);\r\n                this.queue.unshift(request);\r\n                await this.exponentialBackoff(this.queue.length);\r\n            }\r\n            await this.randomDelay();\r\n        }\r\n\r\n        this.processing = false;\r\n    }\r\n\r\n    private async exponentialBackoff(retryCount: number): Promise<void> {\r\n        const delay = Math.pow(2, retryCount) * 1000;\r\n        await new Promise((resolve) => setTimeout(resolve, delay));\r\n    }\r\n\r\n    private async randomDelay(): Promise<void> {\r\n        const delay = Math.floor(Math.random() * 2000) + 1500;\r\n        await new Promise((resolve) => setTimeout(resolve, delay));\r\n    }\r\n}\r\n\r\nexport class ClientBase extends EventEmitter {\r\n    static _simsAIClients: { [accountIdentifier: string]: SimsAIClient } = {};\r\n    simsAIClient: SimsAIClient;\r\n    runtime: IAgentRuntime;\r\n    directions: string;\r\n    lastCheckedJeetId: string | null = null;\r\n    imageDescriptionService: IImageDescriptionService;\r\n    temperature: number = 0.5;\r\n\r\n    requestQueue: RequestQueue = new RequestQueue();\r\n    profile: Agent | null;\r\n\r\n    callback: (self: ClientBase) => any = () => {};\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        super();\r\n        this.runtime = runtime;\r\n        const userId = this.runtime.getSetting(\"SIMSAI_AGENT_ID\");\r\n\r\n        if (ClientBase._simsAIClients[userId]) {\r\n            this.simsAIClient = ClientBase._simsAIClients[userId];\r\n        } else {\r\n            const apiKey = this.runtime.getSetting(\"SIMSAI_API_KEY\");\r\n            if (!apiKey) {\r\n                throw new Error(\"SimsAI API key not configured\");\r\n            }\r\n            this.simsAIClient = new SimsAIClient(apiKey, userId);\r\n            ClientBase._simsAIClients[userId] = this.simsAIClient;\r\n        }\r\n\r\n        this.directions =\r\n            \"- \" +\r\n            this.runtime.character.style.all.join(\"\\n- \") +\r\n            \"- \" +\r\n            this.runtime.character.style.post.join();\r\n    }\r\n\r\n    async init() {\r\n        const userId = this.runtime.getSetting(\"SIMSAI_AGENT_ID\");\r\n        if (!userId) {\r\n            throw new Error(\"SimsAI userId not configured\");\r\n        }\r\n\r\n        elizaLogger.log(\"Initializing SimsAI client\");\r\n        this.profile = await this.fetchProfile(userId);\r\n\r\n        if (this.profile) {\r\n            elizaLogger.log(\"SimsAI user ID:\", this.profile.id);\r\n            const simsaiProfile: SimsAIProfile = {\r\n                id: this.profile.id,\r\n                username: this.profile.username,\r\n                screenName: this.profile.name,\r\n                bio: this.profile.bio,\r\n            };\r\n\r\n            this.runtime.character.simsaiProfile = simsaiProfile;\r\n            this.simsAIClient.updateProfile(simsaiProfile);\r\n        } else {\r\n            throw new Error(\"Failed to load profile\");\r\n        }\r\n\r\n        await this.loadLatestCheckedJeetId();\r\n        await this.populateTimeline();\r\n    }\r\n\r\n    async cacheJeet(jeet: Jeet): Promise<void> {\r\n        if (!jeet) {\r\n            console.warn(\"Jeet is undefined, skipping cache\");\r\n            return;\r\n        }\r\n        await this.runtime.cacheManager.set(`jeeter/jeets/${jeet.id}`, jeet);\r\n    }\r\n\r\n    async getCachedJeet(jeetId: string): Promise<Jeet | undefined> {\r\n        return await this.runtime.cacheManager.get<Jeet>(\r\n            `jeeter/jeets/${jeetId}`\r\n        );\r\n    }\r\n\r\n    async getJeet(jeetId: string): Promise<Jeet> {\r\n        const cachedJeet = await this.getCachedJeet(jeetId);\r\n        if (cachedJeet) return cachedJeet;\r\n\r\n        const jeet = await this.requestQueue.add(() =>\r\n            this.simsAIClient.getJeet(jeetId)\r\n        );\r\n\r\n        await this.cacheJeet(jeet);\r\n        return jeet;\r\n    }\r\n\r\n    async fetchHomeTimeline(count: number): Promise<Jeet[]> {\r\n        elizaLogger.debug(\"fetching home timeline\");\r\n        const response = await this.simsAIClient.getHomeTimeline(count);\r\n        return response.jeets || [];\r\n    }\r\n\r\n    async fetchDiscoveryTimeline(count: number): Promise<Jeet[]> {\r\n        elizaLogger.debug(\"fetching discovery timeline\");\r\n        const response = await this.simsAIClient.getDiscoveryTimeline(count);\r\n        return response.jeets || [];\r\n    }\r\n\r\n    async fetchSearchJeets(\r\n        query: string,\r\n        maxResults: number = 20,\r\n        startTime?: string,\r\n        endTime?: string\r\n    ): Promise<{ jeets: Jeet[]; pagination: Pagination }> {\r\n        try {\r\n            const timeoutPromise = new Promise<JeetResponse>((resolve) =>\r\n                setTimeout(\r\n                    () =>\r\n                        resolve({\r\n                            jeets: [],\r\n                            nextCursor: \"\",\r\n                        }),\r\n                    10000\r\n                )\r\n            );\r\n\r\n            const result = await this.requestQueue.add(\r\n                async () =>\r\n                    await Promise.race<JeetResponse>([\r\n                        this.simsAIClient.searchJeets(query, maxResults),\r\n                        timeoutPromise,\r\n                    ])\r\n            );\r\n\r\n            return {\r\n                jeets: result.jeets || [],\r\n                pagination: {\r\n                    next_cursor: result.nextCursor || \"\",\r\n                    has_more: Boolean(result.nextCursor),\r\n                },\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching search jeets:\", error);\r\n            return {\r\n                jeets: [],\r\n                pagination: { next_cursor: \"\", has_more: false },\r\n            };\r\n        }\r\n    }\r\n\r\n    private async populateTimeline() {\r\n        elizaLogger.debug(\"populating timeline...\");\r\n\r\n        const cachedTimeline = await this.getCachedTimeline();\r\n\r\n        if (cachedTimeline) {\r\n            const existingMemories =\r\n                await this.getExistingMemories(cachedTimeline);\r\n            const existingMemoryIds = new Set(\r\n                existingMemories.map((memory) => memory.id.toString())\r\n            );\r\n\r\n            if (\r\n                await this.processCachedTimeline(\r\n                    cachedTimeline,\r\n                    existingMemoryIds\r\n                )\r\n            ) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const timeline = await this.fetchHomeTimeline(cachedTimeline ? 10 : 50);\r\n\r\n        // Get mentions\r\n        const mentionsResponse = await this.requestQueue.add(async () => {\r\n            const mentions = await this.simsAIClient.getMentions(20);\r\n\r\n            // Get full Jeet objects\r\n            const mentionJeets = await Promise.all(\r\n                (mentions.jeets || []).map(async (jeet) => {\r\n                    try {\r\n                        return await this.getJeet(jeet.id);\r\n                    } catch (error) {\r\n                        elizaLogger.error(\r\n                            `Error fetching jeet ${jeet.id}:`,\r\n                            error\r\n                        );\r\n                        return null;\r\n                    }\r\n                })\r\n            );\r\n\r\n            const validMentionJeets = mentionJeets.filter(\r\n                (jeet): jeet is Jeet => jeet !== null\r\n            );\r\n\r\n            return {\r\n                jeets: validMentionJeets,\r\n            };\r\n        });\r\n\r\n        const allJeets = [...timeline, ...(mentionsResponse.jeets || [])];\r\n        await this.processNewJeets(allJeets);\r\n\r\n        // Cache results\r\n        await this.cacheTimeline(timeline);\r\n        await this.cacheMentions(mentionsResponse.jeets);\r\n    }\r\n\r\n    private async getExistingMemories(jeets: Jeet[]) {\r\n        return await this.runtime.messageManager.getMemoriesByRoomIds({\r\n            roomIds: jeets.map((jeet) =>\r\n                stringToUuid(jeet.id + \"-\" + this.runtime.agentId)\r\n            ),\r\n        });\r\n    }\r\n\r\n    private async processCachedTimeline(\r\n        timeline: Jeet[],\r\n        existingMemoryIds: Set<string>\r\n    ): Promise<boolean> {\r\n        const jeetsToSave = timeline.filter(\r\n            (jeet) =>\r\n                !existingMemoryIds.has(\r\n                    stringToUuid(jeet.id + \"-\" + this.runtime.agentId)\r\n                )\r\n        );\r\n\r\n        if (jeetsToSave.length > 0) {\r\n            await this.processNewJeets(jeetsToSave);\r\n            elizaLogger.log(\r\n                `Populated ${jeetsToSave.length} missing jeets from cache.`\r\n            );\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private async processNewJeets(jeets: Jeet[]) {\r\n        const validJeets = jeets.filter((jeet) => jeet && jeet.id);\r\n\r\n        const roomIds = new Set<UUID>();\r\n        validJeets.forEach((jeet) => {\r\n            if (jeet.id) {\r\n                roomIds.add(stringToUuid(jeet.id + \"-\" + this.runtime.agentId));\r\n            }\r\n        });\r\n\r\n        const existingMemories =\r\n            await this.runtime.messageManager.getMemoriesByRoomIds({\r\n                roomIds: Array.from(roomIds),\r\n            });\r\n\r\n        const existingMemoryIds = new Set<UUID>(\r\n            existingMemories.map((memory) => memory.id)\r\n        );\r\n\r\n        const jeetsToSave = validJeets.filter(\r\n            (jeet) =>\r\n                jeet.id &&\r\n                !existingMemoryIds.has(\r\n                    stringToUuid(jeet.id + \"-\" + this.runtime.agentId)\r\n                )\r\n        );\r\n\r\n        if (this.profile?.id) {\r\n            await this.runtime.ensureUserExists(\r\n                this.runtime.agentId,\r\n                this.profile.id,\r\n                this.runtime.character.name,\r\n                \"simsai\"\r\n            );\r\n        }\r\n\r\n        for (const jeet of jeetsToSave) {\r\n            await this.saveJeetAsMemory(jeet);\r\n        }\r\n    }\r\n\r\n    private async saveJeetAsMemory(jeet: Jeet) {\r\n        if (!jeet.id) {\r\n            elizaLogger.error(\"No valid ID found for jeet:\", jeet);\r\n            return;\r\n        }\r\n\r\n        const roomId = stringToUuid(jeet.id + \"-\" + this.runtime.agentId);\r\n        const userId = stringToUuid(jeet.agentId || jeet.userId);\r\n\r\n        if (jeet.agent) {\r\n            await this.runtime.ensureConnection(\r\n                userId,\r\n                roomId,\r\n                jeet.agent.username,\r\n                jeet.agent.name,\r\n                \"jeeter\"\r\n            );\r\n        }\r\n\r\n        const content: Content = {\r\n            text: jeet.text || \"\",\r\n            url: jeet.permanentUrl,\r\n            source: \"simsai\",\r\n            inReplyTo: jeet.inReplyToStatusId\r\n                ? stringToUuid(\r\n                      jeet.inReplyToStatusId + \"-\" + this.runtime.agentId\r\n                  )\r\n                : undefined,\r\n        };\r\n\r\n        await this.runtime.messageManager.createMemory({\r\n            id: stringToUuid(jeet.id + \"-\" + this.runtime.agentId),\r\n            userId,\r\n            content,\r\n            agentId: this.runtime.agentId,\r\n            roomId,\r\n            embedding: getEmbeddingZeroVector(),\r\n            createdAt: jeet.createdAt\r\n                ? new Date(jeet.createdAt).getTime()\r\n                : Date.now(),\r\n        });\r\n\r\n        await this.cacheJeet(jeet);\r\n    }\r\n\r\n    async saveRequestMessage(message: Memory, state: State) {\r\n        if (message.content.text) {\r\n            const recentMessage = await this.runtime.messageManager.getMemories(\r\n                {\r\n                    roomId: message.roomId,\r\n                    count: 1,\r\n                    unique: false,\r\n                }\r\n            );\r\n\r\n            if (\r\n                recentMessage.length > 0 &&\r\n                recentMessage[0].content === message.content\r\n            ) {\r\n                elizaLogger.debug(\"Message already saved\", recentMessage[0].id);\r\n            } else {\r\n                await this.runtime.messageManager.createMemory({\r\n                    ...message,\r\n                    embedding: getEmbeddingZeroVector(),\r\n                });\r\n            }\r\n\r\n            await this.runtime.evaluate(message, {\r\n                ...state,\r\n                simsAIClient: this.simsAIClient,\r\n            });\r\n        }\r\n    }\r\n\r\n    async loadLatestCheckedJeetId(): Promise<void> {\r\n        this.lastCheckedJeetId = await this.runtime.cacheManager.get<string>(\r\n            `jeeter/${this.profile?.id}/latest_checked_jeet_id`\r\n        );\r\n    }\r\n\r\n    async cacheLatestCheckedJeetId() {\r\n        if (this.lastCheckedJeetId && this.profile?.id) {\r\n            await this.runtime.cacheManager.set(\r\n                `jeeter/${this.profile.id}/latest_checked_jeet_id`,\r\n                this.lastCheckedJeetId\r\n            );\r\n        }\r\n    }\r\n\r\n    async getCachedTimeline(): Promise<Jeet[] | undefined> {\r\n        return this.profile?.id\r\n            ? await this.runtime.cacheManager.get<Jeet[]>(\r\n                  `jeeter/${this.profile.id}/timeline`\r\n              )\r\n            : undefined;\r\n    }\r\n\r\n    async cacheTimeline(timeline: Jeet[]) {\r\n        if (this.profile?.id) {\r\n            await this.runtime.cacheManager.set(\r\n                `jeeter/${this.profile.id}/timeline`,\r\n                timeline,\r\n                { expires: 10 * 1000 }\r\n            );\r\n        }\r\n    }\r\n\r\n    async cacheMentions(mentions: Jeet[]) {\r\n        if (this.profile?.id) {\r\n            await this.runtime.cacheManager.set(\r\n                `jeeter/${this.profile.id}/mentions`,\r\n                mentions,\r\n                { expires: 10 * 1000 }\r\n            );\r\n        }\r\n    }\r\n\r\n    async getCachedProfile(userId: string) {\r\n        return await this.runtime.cacheManager.get<Agent>(\r\n            `jeeter/${userId}/profile`\r\n        );\r\n    }\r\n\r\n    async cacheProfile(profile: Agent) {\r\n        await this.runtime.cacheManager.set(\r\n            `jeeter/${profile.id}/profile`,\r\n            profile\r\n        );\r\n    }\r\n\r\n    async fetchProfile(userId: string): Promise<Agent> {\r\n        const cached = await this.getCachedProfile(userId);\r\n        if (cached) return cached;\r\n\r\n        try {\r\n            const profile = await this.requestQueue.add(async () => {\r\n                const response = await this.simsAIClient.getAgent(userId);\r\n                const agent: Agent = {\r\n                    id: response.id,\r\n                    builder_id: response.builder_id,\r\n                    username: response.username,\r\n                    name: response.name || this.runtime.character.name,\r\n                    bio:\r\n                        response.bio ||\r\n                        (typeof this.runtime.character.bio === \"string\"\r\n                            ? this.runtime.character.bio\r\n                            : this.runtime.character.bio[0] || \"\"),\r\n                    avatar_url: response.avatar_url,\r\n                    created_at: response.created_at,\r\n                    updated_at: response.updated_at,\r\n                };\r\n                return agent;\r\n            });\r\n\r\n            await this.cacheProfile(profile);\r\n            return profile;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching SimsAI profile:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    onReady() {\r\n        throw new Error(\r\n            \"Not implemented in base class, please call from subclass\"\r\n        );\r\n    }\r\n}\r\n","import { EventEmitter } from \"events\";\r\nimport { SIMSAI_API_URL } from \"./constants\";\r\nimport { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    Agent,\r\n    ApiLikeResponse,\r\n    ApiRejeetResponse,\r\n    ApiSearchResponse,\r\n    ApiConversationResponse,\r\n    Jeet,\r\n    JeetResponse,\r\n    SimsAIProfile,\r\n    ApiError,\r\n    ApiPostJeetResponse,\r\n} from \"./types\";\r\nimport { wait } from \"./utils\";\r\n\r\nexport class SimsAIClient extends EventEmitter {\r\n    private apiKey: string;\r\n    private baseUrl: string;\r\n    private agentId: string;\r\n    profile: SimsAIProfile;\r\n\r\n    constructor(apiKey: string, agentId: string, profile?: SimsAIProfile) {\r\n        super();\r\n        this.apiKey = apiKey;\r\n        this.agentId = agentId;\r\n        this.baseUrl = SIMSAI_API_URL.replace(/\\/$/, \"\");\r\n        this.profile = profile;\r\n    }\r\n\r\n    private isRateLimitError(error: any): boolean {\r\n        return error?.statusCode === 429;\r\n    }\r\n\r\n    private async makeRequest<T>(\r\n        endpoint: string,\r\n        options: RequestInit = {}\r\n    ): Promise<T> {\r\n        const url = `${this.baseUrl}${endpoint}`;\r\n        const maxRetries = 3;\r\n        let attempt = 0;\r\n        while (attempt < maxRetries) {\r\n            try {\r\n                const response = await fetch(url, {\r\n                    ...options,\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.apiKey}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                        ...options.headers,\r\n                    },\r\n                    credentials: \"include\",\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    const error = new Error(\r\n                        `SimsAI API error: ${response.statusText} (${response.status})`\r\n                    ) as ApiError;\r\n                    error.statusCode = response.status;\r\n                    error.endpoint = endpoint;\r\n                    throw error;\r\n                }\r\n\r\n                return (await response.json()) as T;\r\n            } catch (error) {\r\n                elizaLogger.error(`Error in makeRequest to ${endpoint}:`, {\r\n                    message: error.message,\r\n                    stack: error.stack,\r\n                    endpoint,\r\n                    options,\r\n                });\r\n\r\n                if (error && this.isRateLimitError(error)) {\r\n                    const waitTime = Math.pow(2, attempt) * 1000;\r\n                    elizaLogger.warn(\r\n                        `Rate limit hit for endpoint ${endpoint}, retrying in ${waitTime}ms`\r\n                    );\r\n                    await wait(waitTime);\r\n                    attempt++;\r\n                    continue;\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    updateProfile(profile: SimsAIProfile) {\r\n        this.profile = profile;\r\n    }\r\n\r\n    async getAgent(agentId: string): Promise<Agent> {\r\n        return await this.makeRequest<Agent>(`/agents/${agentId}`);\r\n    }\r\n\r\n    async getJeet(jeetId: string): Promise<Jeet> {\r\n        return await this.makeRequest<Jeet>(`/public/jeets/${jeetId}`);\r\n    }\r\n\r\n    async getJeetConversation(jeetId: string): Promise<Jeet[]> {\r\n        const response = await this.makeRequest<ApiConversationResponse>(\r\n            `/jeets/${jeetId}/conversation`\r\n        );\r\n\r\n        return response.data.map((jeet) => {\r\n            const author = response.includes.users.find(\r\n                (user) => user.id === jeet.author_id\r\n            );\r\n\r\n            return {\r\n                id: jeet.id,\r\n                text: jeet.text,\r\n                createdAt: jeet.created_at,\r\n                agentId: jeet.author_id,\r\n                inReplyToStatusId: jeet.in_reply_to_status_id,\r\n                agent: author\r\n                    ? {\r\n                          id: author.id,\r\n                          name: author.name,\r\n                          username: author.username,\r\n                          type: author.type,\r\n                          avatar_url: author.avatar_url,\r\n                      }\r\n                    : undefined,\r\n                public_metrics: jeet.public_metrics,\r\n                media: [],\r\n                hashtags: [],\r\n                mentions: [],\r\n                photos: [],\r\n                thread: [],\r\n                urls: [],\r\n                videos: [],\r\n            };\r\n        });\r\n    }\r\n\r\n    async getHomeTimeline(\r\n        count: number,\r\n        cursor?: string\r\n    ): Promise<JeetResponse> {\r\n        return await this.makeRequest<JeetResponse>(\r\n            `/public/agents/${this.agentId}/jeets?limit=${count}${cursor ? `&cursor=${cursor}` : \"\"}`\r\n        );\r\n    }\r\n\r\n    async getDiscoveryTimeline(count: number): Promise<JeetResponse> {\r\n        return await this.makeRequest<JeetResponse>(\r\n            `/public/timeline?limit=${count}`\r\n        );\r\n    }\r\n\r\n    async searchJeets(\r\n        query: string,\r\n        maxResults: number = 10\r\n    ): Promise<JeetResponse> {\r\n        const params = new URLSearchParams({\r\n            query,\r\n            max_results: Math.min(maxResults, 100).toString(),\r\n        });\r\n\r\n        const response = await this.makeRequest<ApiSearchResponse>(\r\n            `/jeets/search/recent?${params.toString()}`\r\n        );\r\n\r\n        const jeets: Jeet[] = response.data.map((jeet) => {\r\n            const author = response.includes.users.find(\r\n                (user) => user.id === jeet.author_id\r\n            );\r\n\r\n            return {\r\n                id: jeet.id,\r\n                text: jeet.text,\r\n                type: \"jeet\",\r\n                createdAt: jeet.created_at,\r\n                agentId: jeet.author_id,\r\n                agent: author\r\n                    ? {\r\n                          id: author.id,\r\n                          name: author.name,\r\n                          username: author.username,\r\n                          type: author.type,\r\n                          avatar_url: author.avatar_url,\r\n                      }\r\n                    : undefined,\r\n                public_metrics: jeet.public_metrics,\r\n                media: [],\r\n                hashtags: [],\r\n                mentions: [],\r\n                photos: [],\r\n                thread: [],\r\n                urls: [],\r\n                videos: [],\r\n            };\r\n        });\r\n\r\n        return {\r\n            jeets,\r\n            nextCursor:\r\n                response.meta?.result_count > maxResults\r\n                    ? response.data[response.data.length - 1]?.created_at\r\n                    : undefined,\r\n        };\r\n    }\r\n\r\n    async getMentions(maxResults: number = 20): Promise<JeetResponse> {\r\n        try {\r\n            return await this.searchJeets(\r\n                `@${this.profile.username}`,\r\n                maxResults\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching mentions:\", error);\r\n            return { jeets: [] };\r\n        }\r\n    }\r\n\r\n    async postJeet(\r\n        text: string,\r\n        inReplyToJeetId?: string,\r\n        mediaUrls?: string[],\r\n        quoteJeetId?: string\r\n    ): Promise<ApiPostJeetResponse> {\r\n        const payload = {\r\n            text,\r\n            ...(inReplyToJeetId && {\r\n                reply: {\r\n                    in_reply_to_jeet_id: inReplyToJeetId,\r\n                },\r\n            }),\r\n            ...(mediaUrls?.length && { media_urls: mediaUrls }),\r\n            ...(quoteJeetId && { quote_jeet_id: quoteJeetId }),\r\n        };\r\n\r\n        return await this.makeRequest<ApiPostJeetResponse>(\"/jeets\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(payload),\r\n        });\r\n    }\r\n\r\n    async likeJeet(jeetId: string): Promise<boolean> {\r\n        const response = await this.makeRequest<ApiLikeResponse>(\"/likes\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ jeetId }),\r\n        });\r\n\r\n        return response.data.liked;\r\n    }\r\n\r\n    async rejeetJeet(jeetId: string): Promise<Jeet> {\r\n        const response = await this.makeRequest<ApiRejeetResponse>(\r\n            `/jeets/${jeetId}/rejeets`,\r\n            {\r\n                method: \"POST\",\r\n            }\r\n        );\r\n\r\n        return {\r\n            id: response.data.id,\r\n            createdAt: response.data.created_at,\r\n            agentId: response.data.author_id,\r\n            type: \"rejeet\",\r\n            media: [],\r\n            hashtags: [],\r\n            mentions: [],\r\n            photos: [],\r\n            thread: [],\r\n            urls: [],\r\n            videos: [],\r\n        };\r\n    }\r\n\r\n    async quoteRejeet(jeetId: string, text: string): Promise<Jeet> {\r\n        return await this.makeRequest<Jeet>(\"/jeets\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                text,\r\n                quote_jeet_id: jeetId,\r\n            }),\r\n        });\r\n    }\r\n}\r\n"],"mappings":";AACA;AAAA,EACI;AAAA,EACA;AAAA,EACA,0BAAAA;AAAA,EAEA;AAAA,EACA,gBAAAC;AAAA,EACA,eAAAC;AAAA,OACG;;;ACTP,IAAM,yBAAyB;AAC/B,IAAM,yBAAyB;AAExB,IAAM,iBACT,QAAQ,IAAI,kBAAkB;AAC3B,IAAM,iBACT,QAAQ,IAAI,kBAAkB;AAE3B,IAAM,kBAAkB;AAGxB,IAAM,eAAe,SAAS,QAAQ,IAAI,gBAAgB,UAAU,EAAE;AACtE,IAAM,eAAe,SAAS,QAAQ,IAAI,gBAAgB,UAAU,EAAE;AAGtE,IAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BnC,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiC3B,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4EhC,IAAM,+CAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CrD,IAAM,0CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BhD,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACnOpC,SAAS,8BAA8B;AAEvC,SAAS,oBAAoB;AAE7B,SAAS,mBAAmB;AAUrB,IAAM,OAAO,CAChB,UAAkB,KAClB,UAAkB,QACF;AAEhB,MAAI,UAAU,SAAS;AACnB,KAAC,SAAS,OAAO,IAAI,CAAC,SAAS,OAAO;AAAA,EAC1C;AAEA,QAAM,WACF,KAAK,MAAM,KAAK,OAAO,KAAK,UAAU,UAAU,EAAE,IAAI;AAC1D,SAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,QAAQ,CAAC;AACjE;AA4BA,eAAsB,wBAClB,MACA,QACe;AACf,QAAM,SAAiB,CAAC;AACxB,QAAM,UAAuB,oBAAI,IAAI;AAGrC,MAAI,KAAK,kBAAkB,KAAK,IAAI;AAChC,QAAI;AACA,kBAAY;AAAA,QACR,6CAA6C,KAAK,EAAE;AAAA,MACxD;AACA,YAAM,iBAAiB,KAAK,kBAAkB,KAAK;AACnD,YAAM,eACF,MAAM,OAAO,aAAa,oBAAoB,cAAc;AAGhE,iBAAW,oBAAoB,cAAc;AACzC,cAAM,kBAAkB,kBAAkB,MAAM;AAChD,eAAO,KAAK,gBAAgB;AAAA,MAChC;AAEA,kBAAY,MAAM,yBAAyB;AAAA,QACvC,eAAe,OAAO;AAAA,QACtB,gBAAgB,KAAK,kBAAkB,KAAK;AAAA,QAC5C,cAAc;AAAA,UACV,GAAG,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,QAAQ,CAAC;AAAA,QACnD;AAAA,QACA,aAAa,OAAO;AAAA,MACxB,CAAC;AAED,aAAO,OAAO,KAAK,CAAC,GAAG,MAAM;AACzB,cAAM,QAAQ,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AACjD,cAAM,QAAQ,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AACjD,eAAO,QAAQ;AAAA,MACnB,CAAC;AAAA,IACL,SAAS,OAAO;AACZ,kBAAY;AAAA,QACR;AAAA,QACA;AAAA,MACJ;AAEA,aAAO,SAAS;AAAA,IACpB;AAAA,EACJ;AAGA,iBAAe,cAAc,aAAmB,QAAgB,GAAG;AAC/D,QAAI;AACA,mBAAa,WAAW;AAGxB,UAAI,QAAQ,IAAI,YAAY,EAAE,GAAG;AAC7B,oBAAY,MAAM,yBAAyB,YAAY,EAAE,EAAE;AAC3D;AAAA,MACJ;AAGA,YAAM,kBAAkB,aAAa,MAAM;AAG3C,cAAQ,IAAI,YAAY,EAAE;AAC1B,aAAO,QAAQ,WAAW;AAE1B,kBAAY,MAAM,iBAAiB;AAAA,QAC/B,QAAQ,OAAO;AAAA,QACf,cAAc;AAAA,QACd,QAAQ,YAAY;AAAA,MACxB,CAAC;AAGD,UAAI,YAAY,mBAAmB;AAC/B,YAAI;AACA,gBAAM,aAAa,MAAM,OAAO,aAAa;AAAA,YACzC,YAAY;AAAA,UAChB;AACA,cAAI,YAAY;AACZ,kBAAM,cAAc,YAAY,QAAQ,CAAC;AAAA,UAC7C;AAAA,QACJ,SAAS,OAAO;AACZ,sBAAY;AAAA,YACR,gCAAgC,YAAY,iBAAiB;AAAA,YAC7D;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,kBAAY;AAAA,QACR,mCAAmC,YAAY,EAAE;AAAA,QACjD;AAAA,MACJ;AACA,UAAI,iBAAiB,OAAO;AACxB,oBAAY,MAAM,kBAAkB;AAAA,UAChC,SAAS,MAAM;AAAA,UACf,OAAO,MAAM;AAAA,QACjB,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAGA,QAAM,cAAc,MAAM,CAAC;AAE3B,cAAY,MAAM,uBAAuB;AAAA,IACrC,YAAY,OAAO;AAAA,IACnB,SAAS,OAAO,IAAI,CAAC,OAAO;AAAA,MACxB,IAAI,EAAE;AAAA,MACN,MAAM,EAAE,MAAM,MAAM,GAAG,EAAE;AAAA,IAC7B,EAAE;AAAA,EACN,CAAC;AAED,SAAO;AACX;AAOA,SAAS,aAAa,MAAY;AAC9B,MAAI,OAAO,KAAK,OAAO,UAAU;AAC7B,gBAAY,MAAM,4BAA4B,KAAK,EAAE;AACrD,UAAM,IAAI,UAAU,0BAA0B;AAAA,EAClD;AAEA,MAAI,OAAO,KAAK,YAAY,UAAU;AAClC,gBAAY,MAAM,6BAA6B,KAAK,OAAO;AAC3D,UAAM,IAAI,UAAU,2BAA2B;AAAA,EACnD;AAEA,MAAI,KAAK,kBAAkB,OAAO,KAAK,mBAAmB,UAAU;AAChE,gBAAY;AAAA,MACR;AAAA,MACA,KAAK;AAAA,IACT;AACA,UAAM,IAAI,UAAU,kCAAkC;AAAA,EAC1D;AACJ;AAOA,eAAe,kBAAkB,MAAY,QAAoB;AAC7D,QAAM,SAAS;AAAA,IACX,GAAG,KAAK,kBAAkB,KAAK,EAAE,IAAI,OAAO,QAAQ,OAAO;AAAA,EAC/D;AACA,QAAM,SAAS,aAAa,KAAK,OAAO;AAGxC,MAAI,KAAK,OAAO;AACZ,UAAM,OAAO,QAAQ;AAAA,MACjB;AAAA,MACA;AAAA,MACA,KAAK,MAAM;AAAA,MACX,KAAK,MAAM;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAGA,QAAM,iBAAiB,MAAM,OAAO,QAAQ,eAAe;AAAA,IACvD,aAAa,KAAK,KAAK,MAAM,OAAO,QAAQ,OAAO;AAAA,EACvD;AAEA,MAAI,CAAC,gBAAgB;AACjB,UAAM,OAAO,QAAQ,eAAe,aAAa;AAAA,MAC7C,IAAI,aAAa,KAAK,KAAK,MAAM,OAAO,QAAQ,OAAO;AAAA,MACvD,SAAS,OAAO,QAAQ;AAAA,MACxB,SAAS;AAAA,QACL,MAAM,KAAK,QAAQ;AAAA,QACnB,QAAQ;AAAA,QACR,KAAK,KAAK;AAAA,QACV,WAAW,KAAK,oBACV;AAAA,UACI,KAAK,oBAAoB,MAAM,OAAO,QAAQ;AAAA,QAClD,IACA;AAAA,MACV;AAAA,MACA,WAAW,KAAK,YACV,IAAI,KAAK,KAAK,SAAS,EAAE,QAAQ,IACjC,KAAK,YACH,KAAK,YAAY,MACjB,KAAK,IAAI;AAAA,MACjB;AAAA,MACA;AAAA,MACA,WAAW,uBAAuB;AAAA,IACtC,CAAC;AAAA,EACL;AACJ;AAWA,eAAsB,SAClB,QACA,SACA,QACA,cACA,iBACiB;AACjB,QAAM,aAAa,iBAAiB,QAAQ,IAAI;AAChD,QAAM,YAAoB,CAAC;AAC3B,MAAI,mBAAmB;AAEvB,aAAW,SAAS,YAAY;AAC5B,UAAM,WAAW,MAAM,OAAO,aAAa,IAAI,YAAY;AACvD,UAAI;AACA,cAAM,SAAS,MAAM,OAAO,aAAa;AAAA,UACrC,MAAM,KAAK;AAAA,UACX;AAAA;AAAA,QACJ;AACA,eAAO;AAAA,MACX,SAAS,OAAO;AACZ,oBAAY,MAAM,8BAA8B,KAAK;AACrD,cAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,QAAI,CAAC,UAAU,MAAM,IAAI;AACrB,YAAM,IAAI;AAAA,QACN,+CAA+C,KAAK,UAAU,QAAQ,CAAC;AAAA,MAC3E;AAAA,IACJ;AAEA,UAAM,SAAS,SAAS,SAAS,MAAM;AAAA,MACnC,CAAC,SAAS,KAAK,OAAO,SAAS,KAAK;AAAA,IACxC;AAEA,UAAM,YAAkB;AAAA,MACpB,IAAI,SAAS,KAAK;AAAA,MAClB,MAAM,SAAS,KAAK;AAAA,MACpB,WAAW,SAAS,KAAK;AAAA,MACzB,SAAS,SAAS,KAAK;AAAA,MACvB,OAAO;AAAA,MACP,MAAM,SAAS,KAAK;AAAA,MACpB,gBAAgB,SAAS,KAAK;AAAA,MAC9B,cAAc,GAAG,cAAc,IAAI,YAAY,WAAW,SAAS,KAAK,EAAE;AAAA,MAC1E,mBAAmB;AAAA;AAAA,MACnB,UAAU,CAAC;AAAA,MACX,UAAU,CAAC;AAAA,MACX,QAAQ,CAAC;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,MAAM,CAAC;AAAA,MACP,QAAQ,CAAC;AAAA,MACT,OAAO,CAAC;AAAA,IACZ;AAEA,cAAU,KAAK,SAAS;AACxB,uBAAmB,UAAU;AAC7B,UAAM,KAAK,KAAM,GAAI;AAAA,EACzB;AAEA,QAAM,WAAqB,UAAU,IAAI,CAAC,MAAM,WAAW;AAAA,IACvD,IAAI,aAAa,KAAK,KAAK,MAAM,OAAO,QAAQ,OAAO;AAAA,IACvD,SAAS,OAAO,QAAQ;AAAA,IACxB,QAAQ,OAAO,QAAQ;AAAA,IACvB,SAAS;AAAA,MACL,MAAM,KAAK;AAAA,MACX,QAAQ;AAAA,MACR,KAAK,KAAK;AAAA,MACV,WACI,UAAU,IACJ,kBACI;AAAA,QACI,kBAAkB,MAAM,OAAO,QAAQ;AAAA,MAC3C,IACA,SACJ;AAAA,QACI,UAAU,QAAQ,CAAC,EAAE,KAAK,MAAM,OAAO,QAAQ;AAAA,MACnD;AAAA,IACd;AAAA,IACA;AAAA,IACA,WAAW,uBAAuB;AAAA,IAClC,WAAW,KAAK,YACV,IAAI,KAAK,KAAK,SAAS,EAAE,QAAQ,IACjC,KAAK,IAAI;AAAA,EACnB,EAAE;AAEF,SAAO;AACX;AAOO,SAAS,iBAAiB,SAA2B;AACxD,QAAM,YAAY;AAClB,QAAM,aAAa,QAAQ,MAAM,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AAC5D,QAAM,QAAkB,CAAC;AACzB,MAAI,cAAc;AAElB,aAAW,aAAa,YAAY;AAChC,QAAI,CAAC,UAAW;AAEhB,SAAK,cAAc,SAAS,WAAW,KAAK,EAAE,UAAU,WAAW;AAC/D,oBAAc,cACR,cAAc,SAAS,YACvB;AAAA,IACV,OAAO;AACH,UAAI,aAAa;AACb,cAAM,KAAK,YAAY,KAAK,CAAC;AAAA,MACjC;AACA,UAAI,UAAU,UAAU,WAAW;AAC/B,sBAAc;AAAA,MAClB,OAAO;AACH,cAAM,SAAS,eAAe,WAAW,SAAS;AAClD,cAAM,KAAK,GAAG,OAAO,MAAM,GAAG,EAAE,CAAC;AACjC,sBAAc,OAAO,OAAO,SAAS,CAAC;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,aAAa;AACb,UAAM,KAAK,YAAY,KAAK,CAAC;AAAA,EACjC;AAEA,SAAO;AACX;AAQO,SAAS,eAAe,WAAmB,WAA6B;AAC3E,QAAM,YAAY,UAAU,MAAM,yBAAyB,KAAK,CAAC,SAAS;AAC1E,QAAM,SAAmB,CAAC;AAC1B,MAAI,eAAe;AAEnB,aAAW,YAAY,WAAW;AAC9B,SAAK,eAAe,MAAM,UAAU,KAAK,EAAE,UAAU,WAAW;AAC5D,qBAAe,eACT,eAAe,MAAM,WACrB;AAAA,IACV,OAAO;AACH,UAAI,cAAc;AACd,eAAO,KAAK,aAAa,KAAK,CAAC;AAAA,MACnC;AACA,UAAI,SAAS,UAAU,WAAW;AAC9B,uBAAe;AAAA,MACnB,OAAO;AACH,cAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,uBAAe;AACf,mBAAW,QAAQ,OAAO;AACtB,eACK,eAAe,MAAM,MAAM,KAAK,EAAE,UAAU,WAC/C;AACE,2BAAe,eACT,eAAe,MAAM,OACrB;AAAA,UACV,OAAO;AACH,gBAAI,cAAc;AACd,qBAAO,KAAK,aAAa,KAAK,CAAC;AAAA,YACnC;AACA,2BAAe;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,cAAc;AACd,WAAO,KAAK,aAAa,KAAK,CAAC;AAAA,EACnC;AAEA,SAAO;AACX;AAQO,SAAS,2BACZ,MACA,WACM;AAEN,MAAI,YAAY,GAAG;AACf,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAClD;AAEA,MAAI,KAAK,UAAU,WAAW;AAC1B,WAAO;AAAA,EACX;AAEA,QAAM,kBAAkB,KAAK,YAAY,KAAK,SAAS;AACvD,MAAI,oBAAoB,IAAI;AACxB,UAAM,oBAAoB,KAAK,MAAM,GAAG,kBAAkB,CAAC,EAAE,KAAK;AAClE,QAAI,kBAAkB,SAAS,GAAG;AAC9B,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,QAAM,iBAAiB,KAAK,YAAY,KAAK,SAAS;AACtD,MAAI,mBAAmB,IAAI;AACvB,UAAM,mBAAmB,KAAK,MAAM,GAAG,cAAc,EAAE,KAAK;AAC5D,QAAI,iBAAiB,SAAS,GAAG;AAC7B,aAAO,mBAAmB;AAAA,IAC9B;AAAA,EACJ;AAEA,SAAO,KAAK,MAAM,GAAG,YAAY,CAAC,EAAE,KAAK,IAAI;AACjD;;;AFtcO,IAAM,mBAAN,MAAuB;AAAA,EAClB;AAAA,EACA;AAAA,EACA,YAAqB;AAAA,EACrB;AAAA,EAER,YAAY,QAAoB,SAAwB;AACpD,SAAK,SAAS;AACd,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,MAAM,MAAM,kBAA2B,OAAO;AAC1C,QAAI,KAAK,WAAW;AAChB,MAAAC,aAAY,KAAK,qCAAqC;AACtD;AAAA,IACJ;AAEA,SAAK,YAAY;AAEjB,QAAI,CAAC,KAAK,OAAO,SAAS;AACtB,YAAM,KAAK,OAAO,KAAK;AAAA,IAC3B;AAEA,UAAM,sBAAsB,YAAY;AACpC,UAAI,CAAC,KAAK,WAAW;AACjB,QAAAA,aAAY,IAAI,mCAAmC;AACnD;AAAA,MACJ;AAEA,UAAI;AACA,cAAM,WAAW,MAAM,KAAK,QAAQ,aAAa,IAE9C,UAAU,KAAK,OAAO,QAAQ,QAAQ,WAAW;AACpD,cAAM,oBAAoB,UAAU,aAAa;AACjD,cAAM,aACF,SAAS,KAAK,QAAQ,WAAW,mBAAmB,CAAC,KACrD;AACJ,cAAM,aACF,SAAS,KAAK,QAAQ,WAAW,mBAAmB,CAAC,KACrD;AACJ,cAAM,gBACF,KAAK,MAAM,KAAK,OAAO,KAAK,aAAa,aAAa,EAAE,IACxD;AACJ,cAAM,iBAAiB,gBAAgB,KAAK;AAG5C,cAAM,cAAc,KAAK,IAAI,IAAI;AACjC,cAAM,QAAQ,KAAK,IAAI,GAAG,iBAAiB,WAAW;AAGtD,YAAI,eAAe,gBAAgB;AAC/B,gBAAM,KAAK,gBAAgB;AAE3B,cAAI,KAAK,WAAW;AAChB,iBAAK,gBAAgB,WAAW,MAAM;AAClC,kCAAoB;AAAA,YACxB,GAAG,cAAc;AACjB,YAAAA,aAAY;AAAA,cACR,0BAA0B,aAAa;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,OAAO;AAEH,cAAI,KAAK,WAAW;AAChB,iBAAK,gBAAgB,WAAW,MAAM;AAClC,kCAAoB;AAAA,YACxB,GAAG,KAAK;AACR,YAAAA,aAAY;AAAA,cACR,0BAA0B,KAAK,MAAM,QAAQ,GAAK,CAAC;AAAA,YACvD;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,iCAAiC,KAAK;AACxD,YAAI,KAAK,WAAW;AAChB,eAAK,gBAAgB;AAAA,YACjB,MAAM;AACF,kCAAoB;AAAA,YACxB;AAAA,YACA,IAAI,KAAK;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,iBAAiB;AACjB,YAAM,KAAK,gBAAgB;AAAA,IAC/B;AAEA,wBAAoB;AAAA,EACxB;AAAA,EAEA,MAAa,OAAO;AAChB,IAAAA,aAAY,IAAI,8BAA8B;AAC9C,SAAK,YAAY;AAEjB,QAAI,KAAK,eAAe;AACpB,mBAAa,KAAK,aAAa;AAC/B,WAAK,gBAAgB;AAAA,IACzB;AAGA,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAExD,IAAAA,aAAY,IAAI,uCAAuC;AAAA,EAC3D;AAAA,EAEA,MAAc,kBAAmC;AAC7C,UAAM,iBAAiB,MAAM,KAAK,OAAO,kBAAkB;AAC3D,QAAI,gBAAgB;AAChB,aAAO;AAAA,IACX;AACA,UAAM,eAAe,MAAM,KAAK,OAAO,kBAAkB,EAAE;AAC3D,UAAM,KAAK,OAAO,cAAc,YAAY;AAC5C,WAAO;AAAA,EACX;AAAA,EAEQ,mBAAmB,cAA8B;AACrD,WACI,KAAK,KAAK,QAAQ,UAAU,IAAI;AAAA;AAAA,IAChC,aACK,IAAI,CAAC,SAAS;AACX,YAAM,YAAY,KAAK,YACjB,IAAI,KAAK,KAAK,SAAS,EAAE,aAAa,KACtC,oBAAI,KAAK,GAAE,aAAa;AAC9B,aAAO,IAAI,KAAK,EAAE;AAAA,EACpC,KAAK,OAAO,QAAQ,SAAS,MAAM,KAAK,OAAO,YAAY,SAAS,IAC9C,KAAK,oBACC;AAAA,eAAkB,KAAK,iBAAiB,KACxC,EACV;AAAA,EAClB,SAAS;AAAA;AAAA,EAAO,KAAK,IAAI;AAAA;AAAA;AAAA,IACX,CAAC,EACA,KAAK,IAAI;AAAA,EAEtB;AAAA,EAEA,MAAc,sBAAuC;AACjD,UAAM,SAAS,KAAK,QAAQ,UAAU,OAAO,KAAK,IAAI;AACtD,UAAM,eAAe,MAAM,KAAK,gBAAgB;AAChD,UAAM,wBAAwB,KAAK,mBAAmB,YAAY;AAClE,UAAM,QAAQ,MAAM,KAAK,QAAQ;AAAA,MAC7B;AAAA,QACI,QAAQ,KAAK,QAAQ;AAAA,QACrB,QAAQC,cAAa,sBAAsB;AAAA,QAC3C,SAAS,KAAK,QAAQ;AAAA,QACtB,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,gBAAgB,KAAK,OAAO,QAAQ;AAAA,QACpC,UAAU;AAAA,MACd;AAAA,IACJ;AAEA,UAAM,UAAU,eAAe;AAAA,MAC3B;AAAA,MACA,UACI,KAAK,QAAQ,UAAU,WAAW,sBAClC;AAAA,IACR,CAAC;AAED,IAAAD,aAAY,MAAM,4BAA4B,OAAO;AACrD,UAAM,iBAAiB,MAAM,aAAa;AAAA,MACtC,SAAS,KAAK;AAAA,MACd;AAAA,MACA,YAAY,WAAW;AAAA,IAC3B,CAAC;AAGD,UAAM,gBAAgB,eAAe,QAAQ,QAAQ,IAAI,EAAE,KAAK;AAEhE,WAAO,2BAA2B,eAAe,eAAe;AAAA,EACpE;AAAA,EAEA,MAAc,oBACV,MACA,SACa;AACb,UAAM,SAASC,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAChE,UAAM,KAAK,QAAQ,iBAAiB,MAAM;AAC1C,UAAM,KAAK,QAAQ;AAAA,MACf,KAAK,QAAQ;AAAA,MACb;AAAA,IACJ;AACA,UAAM,KAAK,QAAQ,eAAe,aAAa;AAAA,MAC3C,IAAIA,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAAA,MACrD,QAAQ,KAAK,QAAQ;AAAA,MACrB,SAAS,KAAK,QAAQ;AAAA,MACtB,SAAS;AAAA,QACL,MAAM;AAAA,QACN,KAAK,KAAK;AAAA,QACV,QAAQ;AAAA,MACZ;AAAA,MACA;AAAA,MACA,WAAWC,wBAAuB;AAAA,MAClC,WAAW,IAAI,KAAK,KAAK,SAAS,EAAE,QAAQ;AAAA,IAChD,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,SAAS,SAAgC;AACnD,UAAM,WAAW,MAAM,KAAK,OAAO,aAAa,IAAI,YAAY;AAC5D,YAAM,SAAS,MAAM,KAAK,OAAO,aAAa,SAAS,OAAO;AAC9D,aAAO;AAAA,IACX,CAAC;AAED,QAAI,CAAC,UAAU,MAAM,IAAI;AACrB,YAAM,IAAI;AAAA,QACN,+CAA+C,KAAK,UAAU,QAAQ,CAAC;AAAA,MAC3E;AAAA,IACJ;AAEA,IAAAF,aAAY,IAAI,wBAAwB,SAAS,KAAK,EAAE,EAAE;AAG1D,UAAM,SAAS,SAAS,SAAS,MAAM;AAAA,MACnC,CAAC,SAAS,KAAK,OAAO,SAAS,KAAK;AAAA,IACxC;AAGA,WAAO;AAAA,MACH,IAAI,SAAS,KAAK;AAAA,MAClB,MAAM,SAAS,KAAK;AAAA,MACpB,WAAW,SAAS,KAAK;AAAA,MACzB,SAAS,SAAS,KAAK;AAAA,MACvB,OAAO;AAAA,MACP,cAAc,GAAG,cAAc,IAAI,KAAK,OAAO,QAAQ,QAAQ,WAAW,SAAS,KAAK,EAAE;AAAA,MAC1F,gBAAgB,SAAS,KAAK;AAAA,MAC9B,UAAU,CAAC;AAAA,MACX,UAAU,CAAC;AAAA,MACX,QAAQ,CAAC;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,MAAM,CAAC;AAAA,MACP,QAAQ,CAAC;AAAA,MACT,OAAO,CAAC;AAAA,MACR,MAAM,SAAS,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,MAAc,kBAAkB;AAC5B,QAAI,CAAC,KAAK,WAAW;AACjB,MAAAA,aAAY,IAAI,8CAA8C;AAC9D;AAAA,IACJ;AAEA,IAAAA,aAAY,IAAI,qBAAqB;AACrC,QAAI;AACA,YAAM,KAAK,QAAQ;AAAA,QACf,KAAK,QAAQ;AAAA,QACb,KAAK,OAAO,QAAQ;AAAA,QACpB,KAAK,QAAQ,UAAU;AAAA,QACvB;AAAA,MACJ;AAEA,YAAM,UAAU,MAAM,KAAK,oBAAoB;AAE/C,YAAM,UACF,KAAK,QAAQ,WAAW,gBAAgB,KAAK,SAC/C,YAAY;AACd,UAAI,WAAW,UAAU,WAAW,KAAK;AACrC,QAAAA,aAAY,KAAK,oCAAoC,OAAO,EAAE;AAC9D;AAAA,MACJ;AAEA,UAAI;AACA,YAAI,CAAC,KAAK,WAAW;AACjB,UAAAA,aAAY;AAAA,YACR;AAAA,UACJ;AACA;AAAA,QACJ;AAEA,QAAAA,aAAY,IAAI;AAAA,GAAuB,OAAO,EAAE;AAChD,cAAM,OAAO,MAAM,KAAK,SAAS,OAAO;AACxC,cAAM,KAAK,QAAQ,aAAa;AAAA,UAC5B,UAAU,KAAK,OAAO,QAAQ,QAAQ;AAAA,UACtC;AAAA,YACI,IAAI,KAAK;AAAA,YACT,WAAW,KAAK,IAAI;AAAA,UACxB;AAAA,QACJ;AACA,cAAM,KAAK,OAAO,UAAU,IAAI;AAChC,cAAM,eAAe,MAAM,KAAK,gBAAgB;AAChD,qBAAa,KAAK,IAAI;AACtB,cAAM,KAAK,OAAO,cAAc,YAAY;AAC5C,QAAAA,aAAY,IAAI,mBAAmB,KAAK,YAAY,EAAE;AACtD,cAAM,KAAK,oBAAoB,MAAM,OAAO;AAAA,MAChD,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,uBAAuB,KAAK;AAC9C,YAAI,iBAAiB,OAAO;AACxB,UAAAA,aAAY,MAAM,kBAAkB;AAAA,YAChC,SAAS,MAAM;AAAA,YACf,OAAO,MAAM;AAAA,UACjB,CAAC;AAAA,QACL;AACA,cAAM;AAAA,MACV;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,KAAK;AACrD,UAAI,iBAAiB,OAAO;AACxB,QAAAA,aAAY,MAAM,kBAAkB;AAAA,UAChC,SAAS,MAAM;AAAA,UACf,OAAO,MAAM;AAAA,QACjB,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;;;AGpUA;AAAA,EACI,kBAAAG;AAAA,EACA,eAAAC;AAAA,EACA;AAAA,EACA,gBAAAC;AAAA,EAGA,cAAAC;AAAA,EACA;AAAA,EAEA,gBAAAC;AAAA,OACG;AAgBA,IAAM,uBACT,qBAAqB;AAElB,IAAM,qBAAN,MAAyB;AAAA,EAQ5B,YACY,QACA,SACV;AAFU;AACA;AAAA,EACT;AAAA,EAVK,eAA4B,oBAAI,IAAI;AAAA,EACpC,aAA0B,oBAAI,IAAI;AAAA,EAClC,gBAA6B,oBAAI,IAAI;AAAA,EACrC,cAA2B,oBAAI,IAAI;AAAA,EACnC,YAAqB;AAAA,EACrB;AAAA,EAOR,MAAc,cACV,QACA,MACgB;AAChB,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,KAAK,aAAa,IAAI,MAAM;AAAA,MACvC,KAAK;AACD,eAAO,KAAK,WAAW,IAAI,MAAM;AAAA,MACrC,KAAK;AACD,eAAO,KAAK,cAAc,IAAI,MAAM;AAAA,MACxC,KAAK;AACD,eAAO,KAAK,YAAY,IAAI,MAAM;AAAA,MACtC;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EAEQ,kBAAkB,QAAgB,MAA+B;AACrE,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,aAAK,aAAa,IAAI,MAAM;AAC5B;AAAA,MACJ,KAAK;AACD,aAAK,WAAW,IAAI,MAAM;AAC1B;AAAA,MACJ,KAAK;AACD,aAAK,cAAc,IAAI,MAAM;AAC7B;AAAA,MACJ,KAAK;AACD,aAAK,YAAY,IAAI,MAAM;AAC3B;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAM,QAAQ;AACV,QAAI,KAAK,WAAW;AAChB,MAAAC,aAAY,KAAK,uCAAuC;AACxD;AAAA,IACJ;AAEA,SAAK,YAAY;AACjB,IAAAA,aAAY,IAAI,6BAA6B;AAE7C,UAAM,+BAA+B,YAAY;AAC7C,UAAI,CAAC,KAAK,WAAW;AACjB,QAAAA,aAAY,IAAI,qCAAqC;AACrD;AAAA,MACJ;AAEA,UAAI;AACA,cAAM,KAAK,sBAAsB;AAAA,MACrC,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,6BAA6B,KAAK;AAAA,MACxD;AAEA,UAAI,KAAK,WAAW;AAChB,aAAK,gBAAgB;AAAA,UACjB;AAAA,UACA,KAAK;AAAA,YACD,KAAK,OAAO,KAAK,eAAe,eAAe;AAAA,UACnD,IAAI;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AAGA,iCAA6B;AAAA,EACjC;AAAA,EAEA,MAAa,OAAO;AAChB,IAAAA,aAAY,IAAI,gCAAgC;AAChD,SAAK,YAAY;AAGjB,QAAI,KAAK,eAAe;AACpB,mBAAa,KAAK,aAAa;AAC/B,WAAK,gBAAgB;AAAA,IACzB;AAGA,SAAK,aAAa,MAAM;AACxB,SAAK,WAAW,MAAM;AACtB,SAAK,cAAc,MAAM;AACzB,SAAK,YAAY,MAAM;AAGvB,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAExD,IAAAA,aAAY,IAAI,yCAAyC;AAAA,EAC7D;AAAA,EAEA,MAAc,wBAAwB;AAClC,QAAI,CAAC,KAAK,WAAW;AACjB,MAAAA,aAAY;AAAA,QACR;AAAA,MACJ;AACA;AAAA,IACJ;AAEA,IAAAA,aAAY,IAAI,4BAA4B;AAC5C,QAAI;AACA,UAAI,CAAC,KAAK,QAAQ,UAAU,QAAQ,QAAQ;AACxC,QAAAA,aAAY,IAAI,gCAAgC;AAChD;AAAA,MACJ;AAEA,YAAM,aAAa,CAAC,GAAG,KAAK,QAAQ,UAAU,MAAM,EAChD,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,QAAQ,UAAU,OAAO,MAAM,CACnE;AAEA,MAAAA,aAAY,IAAI,uBAAuB;AACvC,YAAM,KAAK,GAAI;AAEf,UAAI,iBAA+B,EAAE,OAAO,CAAC,EAAE;AAC/C,UAAI;AACA,yBAAiB,MAAM,KAAK,OAAO,aAAa;AAAA,UAC5C;AAAA,UACA;AAAA,QACJ;AACA,YAAI,CAAC,gBAAgB,OAAO,QAAQ;AAChC,UAAAA,aAAY;AAAA,YACR,oCAAoC,UAAU;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,gCAAgC,KAAK;AAAA,MAC3D;AAEA,UAAI,CAAC,KAAK,UAAW;AAErB,YAAM,oBACF,MAAM,KAAK,OAAO,aAAa,qBAAqB,EAAE;AAC1D,UAAI,CAAC,mBAAmB;AACpB,QAAAA,aAAY,IAAI,iCAAiC;AACjD;AAAA,MACJ;AAEA,YAAM,KAAK,OAAO,cAAc,kBAAkB,SAAS,CAAC,CAAC;AAE7D,YAAM,oBAAoB,KAAK;AAAA,QAC3B,kBAAkB,SAAS,CAAC;AAAA,MAChC;AAGA,YAAM,kBACD,eAAe,OAAO,UAAU,KAAK,IAChC,eAAe,QACf,kBAAkB,SAAS,CAAC;AAEtC,UAAI,CAAC,KAAK,UAAW;AAGrB,MAAAA,aAAY,IAAI,8BAA8B;AAC9C,YAAM,cAAc,MAAM,KAAK,mBAAmB,cAAc;AAEhE,UAAI,YAAY,WAAW,GAAG;AAC1B,QAAAA,aAAY,IAAI,qCAAqC;AACrD;AAAA,MACJ;AAEA,MAAAA,aAAY;AAAA,QACR,SAAS,YAAY,MAAM;AAAA,MAC/B;AACA,YAAM,SAAS,KAAK;AAAA,QAChB;AAAA,QACA;AAAA,MACJ;AAEA,UAAI,CAAC,KAAK,UAAW;AAErB,YAAM,8BAA8B,MAAMC,cAAa;AAAA,QACnD,SAAS,KAAK;AAAA,QACd,SAAS;AAAA,QACT,YAAYC,YAAW;AAAA,MAC3B,CAAC;AAED,YAAM,SAAS,4BAA4B,KAAK;AAChD,YAAM,eAAe,YAAY;AAAA,QAC7B,CAAC,SACG,KAAK,GAAG,SAAS,EAAE,SAAS,MAAM,KAClC,OAAO,SAAS,KAAK,GAAG,SAAS,CAAC;AAAA,MAC1C;AAEA,UAAI,CAAC,cAAc;AACf,QAAAF,aAAY,IAAI,kCAAkC,MAAM;AACxD;AAAA,MACJ;AAEA,UAAI,CAAC,KAAK,UAAW;AAErB,MAAAA,aAAY,IAAI,iBAAiB,aAAa,EAAE,kBAAkB;AAElE,YAAM,uBAAuB;AAAA,QACzB,SAAS,MAAM,KAAK,cAAc,aAAa,IAAI,OAAO;AAAA,QAC1D,OAAO,MAAM,KAAK,cAAc,aAAa,IAAI,MAAM;AAAA,QACvD,UAAU,MAAM,KAAK,cAAc,aAAa,IAAI,QAAQ;AAAA,QAC5D,QAAQ,MAAM,KAAK,cAAc,aAAa,IAAI,OAAO;AAAA,MAC7D;AAGA,UAAI,OAAO,OAAO,oBAAoB,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG;AACpD,QAAAA,aAAY;AAAA,UACR,gCAAgC,aAAa,EAAE;AAAA,QACnD;AACA;AAAA,MACJ;AAEA,UAAI,CAAC,KAAK,UAAW;AAErB,YAAM,KAAK;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,qCAAqC,KAAK;AAC5D,UAAI,iBAAiB,SAAS,MAAM,OAAO;AACvC,QAAAA,aAAY,MAAM,gBAAgB,MAAM,KAAK;AAAA,MACjD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,wBAAwB,OAAuB;AACnD,QAAI,CAAC,OAAO;AACR,aAAO,KAAK,KAAK,QAAQ,UAAU,IAAI;AAAA;AAAA;AAE3C,WACI,KAAK,KAAK,QAAQ,UAAU,IAAI;AAAA;AAAA,IAChC,MACK,IAAI,CAAC,SAAS;AACX,aAAO,OAAO,KAAK,EAAE;AAAA,QACjC,KAAK,OAAO,QAAQ,SAAS,MAAM,KAAK,OAAO,YAAY,SAAS;AAAA,QACpE,KAAK,IAAI;AAAA;AAAA,IAED,CAAC,EACA,KAAK,MAAM;AAAA,EAExB;AAAA,EAEQ,wBAAwB,OAAe,YAA4B;AACvE,WAAO;AAAA,sCACuB,UAAU,SAAS,KAAK,QAAQ,UAAU,IAAI;AAAA;AAAA,MAE9E,MACG;AAAA,MACG,CAAC,SAAS;AAAA,UACZ,KAAK,EAAE;AAAA,YACL,KAAK,OAAO,QAAQ,SAAS,MAAM,KAAK,OAAO,YAAY,SAAS;AAAA,YACpE,KAAK,IAAI;AAAA,eACN,KAAK,UAAU,KAAK,kBAAkB,CAAC,CAAC,CAAC;AAAA,IAChD,EACC,KAAK,SAAS,CAAC;AAAA;AAAA,yDAEiC,KAAK,QAAQ,UAAU,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShF;AAAA,EAEQ,uBAAuB,MAAoB;AAC/C,QAAI,QAAQ;AAGZ,QAAI,KAAK,gBAAgB,cAAc,EAAG,UAAS;AAAA,aAC1C,KAAK,gBAAgB,cAAc,EAAG,UAAS;AAGxD,QAAI,KAAK,gBAAgB,eAAe,GAAI,UAAS;AACrD,QAAI,KAAK,gBAAgB,cAAc,EAAG,UAAS;AAGnD,QAAI,KAAK,SAAU,UAAS;AAG5B,UAAM,gBAAgB,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,GAAG;AACpD,UAAM,YAAY,KAAK,MAAM,MAAM,cAAc,KAAK,CAAC,GAAG;AAC1D,aAAS,eAAe;AAGxB,UAAM,aAAa,KAAK,MAAM,UAAU;AACxC,QAAI,aAAa,MAAM,aAAa,IAAK,UAAS;AAGlD,QAAI,KAAK,MAAM,SAAS,GAAG,EAAG,UAAS;AACvC,UAAM,kBAAkB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,QACI,gBAAgB;AAAA,MAAK,CAAC,SAClB,KAAK,MAAM,YAAY,EAAE,SAAS,IAAI;AAAA,IAC1C;AAEA,eAAS;AAEb,WAAO;AAAA,EACX;AAAA,EAEA,MAAc,mBAAmB,OAAgC;AAC7D,QAAI,CAAC,KAAK,UAAW,QAAO,CAAC;AAG7B,UAAM,kBAAkB,MAAM;AAAA,MAC1B,CAAC,SACG,MAAM,QACN,KAAK,OAAO,aACR,KAAK,QAAQ,WAAW,iBAAiB;AAAA,IACrD;AAGA,UAAM,aAAa,CAAC;AACpB,eAAW,QAAQ,iBAAiB;AAChC,UAAI,CAAC,KAAK,UAAW,QAAO,CAAC;AAE7B,YAAM,aAAa,MAAM,KAAK,cAAc,KAAK,IAAI,OAAO;AAC5D,YAAM,WAAW,MAAM,KAAK,cAAc,KAAK,IAAI,MAAM;AACzD,YAAM,cAAc,MAAM,KAAK,cAAc,KAAK,IAAI,QAAQ;AAC9D,YAAM,YAAY,MAAM,KAAK,cAAc,KAAK,IAAI,OAAO;AAG3D,UAAI,CAAC,cAAc,CAAC,YAAY,CAAC,eAAe,CAAC,WAAW;AACxD,mBAAW,KAAK,IAAI;AAAA,MACxB;AAAA,IACJ;AAGA,UAAM,cAAc,WACf,IAAI,CAAC,UAAU;AAAA,MACZ;AAAA,MACA,OAAO,KAAK,uBAAuB,IAAI;AAAA,IAC3C,EAAE,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAGrC,UAAM,WAAW,YACZ,MAAM,GAAG,EAAE,EACX,IAAI,CAAC,EAAE,KAAK,GAAG,WAAW;AAAA,MACvB;AAAA,MACA,aAAa,KAAK,OAAO,IAAI,OAAO,IAAI,QAAQ;AAAA,IACpD,EAAE,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,EAAE,WAAW;AAEjD,WAAO,SAAS,IAAI,CAAC,EAAE,KAAK,MAAM,IAAI;AAAA,EAC1C;AAAA,EAEA,MAAc,oBACV,cACA,mBACA,sBAMF;AACE,QAAI,CAAC,KAAK,UAAW;AAGrB,QAAI,KAAK,QAAQ,WAAW,gBAAgB,MAAM,QAAQ;AACtD,MAAAA,aAAY;AAAA,QACR,uCAAuC,aAAa,EAAE;AAAA,MAC1D;AACA;AAAA,IACJ;AAEA,UAAM,SAASG;AAAA,MACX,GAAG,aAAa,kBAAkB,aAAa,EAAE,IAAI,KAAK,QAAQ,OAAO;AAAA,IAC7E;AACA,UAAM,aAAaA,cAAa,aAAa,OAAO;AAEpD,UAAM,KAAK,QAAQ;AAAA,MACf;AAAA,MACA;AAAA,MACA,aAAa,OAAO,YAAY;AAAA,MAChC,aAAa,OAAO,QAAQ;AAAA,MAC5B;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,UAAW;AAErB,UAAM,SAAS,MAAM,wBAAwB,cAAc,KAAK,MAAM;AACtE,IAAAH,aAAY;AAAA,MACR,sCAAsC,OAAO,MAAM;AAAA,MACnD;AAAA,QACI,UAAU,OAAO,IAAI,CAAC,OAAO;AAAA,UACzB,IAAI,EAAE;AAAA,UACN,UAAU,EAAE,OAAO;AAAA,UACnB,MACI,EAAE,MAAM,MAAM,GAAG,EAAE,KAClB,EAAE,MAAM,SAAS,KAAK,QAAQ;AAAA,UACnC,WAAW,EAAE;AAAA,QACjB,EAAE;AAAA,MACN;AAAA,IACJ;AAGA,UAAM,eAAe,OAAO,KAAK,CAAC,GAAG,MAAM;AACvC,YAAM,QAAQ,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AACjD,YAAM,QAAQ,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AACjD,aAAO,QAAQ;AAAA,IACnB,CAAC;AAED,QAAI,CAAC,KAAK,UAAW;AAGrB,UAAM,wBAAwB,aACzB,IAAI,CAAC,GAAG,UAAU;AACf,YAAM,YAAY,EAAE,YACd,IAAI,KAAK,EAAE,SAAS,EAAE,QAAQ,IAC9B,KAAK,IAAI;AACf,YAAM,gBAAgB,EAAE,OAAO,aAAa;AAC5C,YAAM,QAAQ,QAAQ,IAAI,YAAO;AACjC,aAAO,IAAI,IAAI,KAAK,SAAS,EAAE,eAAe,CAAC,KAAK,KAAK,IACrD,EAAE,OAAO,YAAY,SACzB,GAAG,gBAAgB,uBAAuB,EAAE,KAAK,EAAE,IAAI;AAAA,IAC3D,CAAC,EACA,KAAK,MAAM;AAGhB,IAAAA,aAAY,IAAI,yBAAyB;AAAA,MACrC,cAAc,aAAa;AAAA,MAC3B,eAAe,OAAO;AAAA,MACtB,cAAc,CAAC,GAAG,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,QAAQ,CAAC,CAAC;AAAA,MAC/D,UACI,OAAO,SAAS,IACV;AAAA,QACI,OAAO,IAAI;AAAA,UACP,KAAK;AAAA,YACD,GAAG,OAAO;AAAA,cAAI,CAAC,MACX,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AAAA,YACvC;AAAA,UACJ;AAAA,QACJ;AAAA,QACA,MAAM,IAAI;AAAA,UACN,KAAK;AAAA,YACD,GAAG,OAAO;AAAA,cAAI,CAAC,MACX,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AAAA,YACvC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,IACA;AAAA,IACd,CAAC;AAED,UAAM,UAAU;AAAA,MACZ,IAAIG,cAAa,aAAa,KAAK,MAAM,KAAK,QAAQ,OAAO;AAAA,MAC7D,SAAS,KAAK,QAAQ;AAAA,MACtB,SAAS;AAAA,QACL,MAAM,aAAa;AAAA,QACnB,WAAW;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA,WAAW,aAAa,YAClB,IAAI,KAAK,aAAa,SAAS,EAAE,QAAQ,IACzC,KAAK,IAAI;AAAA,IACnB;AAEA,QAAI,CAAC,QAAQ,QAAQ,MAAM;AACvB,aAAO,EAAE,MAAM,IAAI,QAAQ,SAAS;AAAA,IACxC;AAEA,QAAI,CAAC,KAAK,UAAW;AAErB,UAAM,KAAK;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,uBACV,SACA,cACA,mBACA,sBAMA,uBACA,QACF;AACE,QAAI,CAAC,KAAK,UAAW;AAErB,QAAI;AACA,MAAAH,aAAY,IAAI,4BAA4B,aAAa,EAAE,EAAE;AAC7D,UAAI,QAAQ,MAAM,KAAK,QAAQ,aAAa,SAAS;AAAA,QACjD,cAAc,KAAK;AAAA,QACnB,gBAAgB,KAAK,QAAQ,WAAW,iBAAiB;AAAA,QACzD,UAAU;AAAA,QACV,aAAa,MAAM,KAAK,iBAAiB,YAAY;AAAA,QACrD;AAAA,QACA,qBAAqB;AAAA,UACjB,cAAc,OAAO;AAAA,UACrB,cAAc;AAAA,YACV,GAAG,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,QAAQ,CAAC;AAAA,UACnD;AAAA,UACA,UACI,OAAO,SAAS,IACV;AAAA,YACI,OAAO,IAAI;AAAA,cACP,KAAK;AAAA,gBACD,GAAG,OAAO;AAAA,kBAAI,CAAC,MACX,IAAI;AAAA,oBACA,EAAE,aAAa;AAAA,kBACnB,EAAE,QAAQ;AAAA,gBACd;AAAA,cACJ;AAAA,YACJ,EAAE,YAAY;AAAA,YACd,KAAK,IAAI;AAAA,cACL,KAAK;AAAA,gBACD,GAAG,OAAO;AAAA,kBAAI,CAAC,MACX,IAAI;AAAA,oBACA,EAAE,aAAa;AAAA,kBACnB,EAAE,QAAQ;AAAA,gBACd;AAAA,cACJ;AAAA,YACJ,EAAE,YAAY;AAAA,UAClB,IACA;AAAA,QACd;AAAA,QACA;AAAA,MACJ,CAAC;AAED,UAAI,CAAC,KAAK,UAAW;AAErB,MAAAA,aAAY;AAAA,QACR,mCAAmC,aAAa,EAAE;AAAA,MACtD;AACA,YAAM,KAAK,OAAO,mBAAmB,SAAS,KAAc;AAE5D,YAAM,UAAUI,gBAAe;AAAA,QAC3B;AAAA,QACA,UACI,KAAK,QAAQ,UAAU,WAAW,wBAClC;AAAA,MACR,CAAC;AAED,UAAI,CAAC,KAAK,UAAW;AAErB,MAAAJ,aAAY;AAAA,QACR,wCAAwC,aAAa,EAAE;AAAA,MAC3D;AACA,YAAM,cAAe,MAAM,wBAAwB;AAAA,QAC/C,SAAS,KAAK;AAAA,QACd;AAAA,QACA,YAAYE,YAAW;AAAA,MAC3B,CAAC;AAED,MAAAF,aAAY,MAAM,iBAAiB,WAAW;AAC9C,YAAM,WAAW;AAAA,QACb,MAAM,YAAY;AAAA,QAClB,QAAQ,YAAY;AAAA,QACpB,YAAY,YAAY;AAAA,QACxB,cAAc,YAAY,gBAAgB,CAAC;AAAA,MAC/C;AAEA,UAAI,CAAC,SAAS,cAAc;AACxB,cAAM,IAAI,UAAU,qCAAqC;AAAA,MAC7D;AAEA,UAAI,CAAC,KAAK,UAAW;AAErB,UAAI,SAAS,aAAa,SAAS,GAAG;AAClC,mBAAW,eAAe,SAAS,cAAc;AAC7C,cAAI,CAAC,KAAK,UAAW;AAErB,cAAI;AACA,gBACK,YAAY,SAAS,WAClB,qBAAqB,WACxB,YAAY,SAAS,YAClB,qBAAqB,YACxB,YAAY,SAAS,WAClB,qBAAqB,UACxB,YAAY,SAAS,UAClB,qBAAqB,OAC3B;AACE,cAAAA,aAAY;AAAA,gBACR,YAAY,YAAY,IAAI,aAAa,aAAa,EAAE;AAAA,cAC5D;AACA;AAAA,YACJ;AAEA,YAAAA,aAAY;AAAA,cACR,cAAc,YAAY,IAAI,yBAAyB,aAAa,EAAE;AAAA,YAC1E;AAEA,oBAAQ,YAAY,MAAM;AAAA,cACtB,KAAK;AACD,oBAAI;AACA,sBAAI,CAAC,KAAK,UAAW;AACrB,wBAAM,eACF,MAAM,KAAK,OAAO,aAAa;AAAA,oBAC3B,aAAa;AAAA,kBACjB;AACJ,sBAAI,cAAc,IAAI;AAClB,oBAAAA,aAAY;AAAA,sBACR,iBAAiB,aAAa,EAAE;AAAA,oBACpC;AACA,yBAAK;AAAA,sBACD,aAAa;AAAA,sBACb;AAAA,oBACJ;AAAA,kBACJ,OAAO;AACH,oBAAAA,aAAY;AAAA,sBACR,yBAAyB,aAAa,EAAE;AAAA,sBACxC;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ,SAAS,OAAO;AACZ,kBAAAA,aAAY;AAAA,oBACR,oCAAoC,aAAa,EAAE;AAAA,oBACnD;AAAA,kBACJ;AAAA,gBACJ;AACA;AAAA,cAEJ,KAAK;AACD,oBAAI,YAAY,MAAM;AAClB,sBAAI,CAAC,KAAK,UAAW;AACrB,wBAAM,KAAK,OAAO,aAAa;AAAA,oBAC3B,aAAa;AAAA,oBACb,YAAY;AAAA,kBAChB;AACA,kBAAAA,aAAY;AAAA,oBACR,uBAAuB,aAAa,EAAE;AAAA,kBAC1C;AACA,uBAAK;AAAA,oBACD,aAAa;AAAA,oBACb;AAAA,kBACJ;AAAA,gBACJ;AACA;AAAA,cAEJ,KAAK;AACD,oBAAI,YAAY,MAAM;AAClB,sBAAI,CAAC,KAAK,UAAW;AACrB,wBAAM,gBAAgB;AAAA,oBAClB,GAAG;AAAA,oBACH,MAAM,YAAY;AAAA,kBACtB;AAEA,wBAAM,mBAAmB,MAAM;AAAA,oBAC3B,KAAK;AAAA,oBACL;AAAA,oBACA,QAAQ;AAAA,oBACR,KAAK,OAAO,QAAQ;AAAA,oBACpB,aAAa;AAAA,kBACjB;AAEA,0BACI,MAAM,KAAK,QAAQ;AAAA,oBACf;AAAA,kBACJ;AAEJ,6BAAW;AAAA,oBACP;AAAA,oBACA;AAAA,kBACJ,KAAK,iBAAiB,QAAQ,GAAG;AAC7B,wBAAI,CAAC,KAAK,UAAW;AACrB,oCAAgB,QAAQ,SACpB,QAAQ,iBAAiB,SAAS,IAC5B,SAAS,SACT;AACV,0BAAM,KAAK,QAAQ,eAAe;AAAA,sBAC9B;AAAA,oBACJ;AAAA,kBACJ;AAEA,wBAAM,KAAK,QAAQ,SAAS,SAAS,KAAK;AAC1C,wBAAM,KAAK,QAAQ;AAAA,oBACf;AAAA,oBACA;AAAA,oBACA;AAAA,kBACJ;AAEA,uBAAK;AAAA,oBACD,aAAa;AAAA,oBACb;AAAA,kBACJ;AAAA,gBACJ;AACA;AAAA,cAEJ,KAAK;AACD,oBAAI;AACA,sBAAI,CAAC,KAAK,UAAW;AACrB,wBAAM,KAAK,OAAO,aAAa;AAAA,oBAC3B,aAAa;AAAA,kBACjB;AACA,kBAAAA,aAAY;AAAA,oBACR,cAAc,aAAa,EAAE;AAAA,kBACjC;AACA,uBAAK;AAAA,oBACD,aAAa;AAAA,oBACb;AAAA,kBACJ;AAAA,gBACJ,SAAS,OAAO;AACZ,kBAAAA,aAAY;AAAA,oBACR,qBAAqB,aAAa,EAAE;AAAA,oBACpC;AAAA,kBACJ;AAAA,gBACJ;AACA;AAAA,cAEJ,KAAK;AACD,gBAAAA,aAAY;AAAA,kBACR,mCAAmC,aAAa,EAAE;AAAA,gBACtD;AACA;AAAA,YACR;AAEA,YAAAA,aAAY;AAAA,cACR,0BAA0B,YAAY,IAAI,yBAAyB,aAAa,EAAE;AAAA,YACtF;AAAA,UACJ,SAAS,OAAO;AACZ,YAAAA,aAAY;AAAA,cACR,gCAAgC,YAAY,IAAI,aAAa,aAAa,EAAE;AAAA,cAC5E;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,KAAK,UAAW;AAErB,YAAM,eAAe;AAAA;AAAA,EAAe,OAAO;AAAA;AAAA,iBACvC,aAAa,EACjB,OAAO,aAAa,OAAO,YAAY,SAAS,KAC5C,aAAa,IACjB;AAAA;AAAA,EAAsB,KAAK,UAAU,QAAQ,CAAC;AAE9C,MAAAA,aAAY;AAAA,QACR,kCAAkC,aAAa,EAAE;AAAA,MACrD;AACA,YAAM,KAAK,QAAQ,aAAa;AAAA,QAC5B,0BAA0B,aAAa,EAAE;AAAA,QACzC;AAAA,MACJ;AAEA,YAAM,KAAK;AAEX,YAAM,qBAAqB;AAAA,QACvB,QAAQ,aAAa;AAAA,QACrB,OAAO,SAAS;AAAA,QAChB,cAAc,SAAS,aAAa,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,QACrD,WAAW,SAAS;AAAA,QACpB,YAAY,SAAS,aAChB,OAAO,CAAC,MAAM,EAAE,SAAS,OAAO,EAChC,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,MAC1B;AACA,MAAAA,aAAY;AAAA,QACR,wBAAwB,KAAK,UAAU,kBAAkB,CAAC;AAAA,MAC9D;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,sCAAsC,KAAK,EAAE;AAC/D,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAc,iBAAiB,cAAqC;AAChE,QAAI,CAAC,KAAK,UAAW,QAAO;AAE5B,QAAI,UAAU;AAAA,MAAuB,aAAa,OAAO,YAAY,SAAS;AAAA,EAAK,aAAa,IAAI;AAEpG,QAAI,aAAa,QAAQ,QAAQ;AAC7B,YAAM,eAAe,aAAa,OAC7B;AAAA,QACG,CAAC,UACG,MAAM,OAAO,aACb,KAAK,QAAQ,WAAW,iBAAiB;AAAA,MACjD,EACC;AAAA,QACG,CAAC,UACG,IAAI,MAAM,OAAO,YAAY,SAAS,KAAK,MAAM,IAAI;AAAA,MAC7D,EACC,KAAK,IAAI;AAEd,UAAI,cAAc;AACd,mBAAW;AAAA;AAAA,EAAgC,YAAY;AAAA,MAC3D;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,UAAW,QAAO;AAG5B,QAAI,aAAa,OAAO,QAAQ;AAC5B,YAAM,oBAAoB,CAAC;AAC3B,iBAAW,SAAS,aAAa,OAAO;AACpC,YAAI,CAAC,KAAK,UAAW,QAAO;AAE5B,YAAI,SAAS,OAAO;AAChB,gBAAM,0BACF,KAAK,QAAQ;AAAA,YACT,YAAY;AAAA,UAChB;AAEJ,gBAAM,cACF,MAAM,wBAAwB,cAAc,MAAM,GAAG;AACzD,4BAAkB,KAAK,WAAW;AAAA,QACtC;AAAA,MACJ;AAEA,UAAI,kBAAkB,SAAS,GAAG;AAC9B,mBAAW;AAAA,6BAAgC,kBAAkB,KAAK,IAAI,CAAC;AAAA,MAC3E;AAAA,IACJ;AAGA,QAAI,aAAa,MAAM,QAAQ;AAC3B,iBAAW;AAAA,QAAW,aAAa,KAAK,KAAK,IAAI,CAAC;AAAA,IACtD;AAEA,QAAI,CAAC,KAAK,UAAW,QAAO;AAG5B,QAAI,aAAa,QAAQ,QAAQ;AAC7B,YAAM,oBAAoB,CAAC;AAC3B,iBAAW,SAAS,aAAa,QAAQ;AACrC,YAAI,CAAC,KAAK,UAAW,QAAO;AAC5B,YAAI,MAAM,KAAK;AACX,gBAAM,0BACF,KAAK,QAAQ;AAAA,YACT,YAAY;AAAA,UAChB;AAEJ,gBAAM,cACF,MAAM,wBAAwB,cAAc,MAAM,GAAG;AACzD,4BAAkB,KAAK,WAAW;AAAA,QACtC;AAAA,MACJ;AAEA,UAAI,kBAAkB,SAAS,GAAG;AAC9B,mBAAW;AAAA,8BAAiC,kBAAkB,KAAK,IAAI,CAAC;AAAA,MAC5E;AAAA,IACJ;AAGA,QAAI,aAAa,QAAQ,QAAQ;AAC7B,iBAAW;AAAA,UAAa,aAAa,OAAO,MAAM;AAAA,IACtD;AAEA,WAAO;AAAA,EACX;AACJ;;;ACr4BA;AAAA,EACI,kBAAAK;AAAA,EACA,2BAAAC;AAAA,EACA;AAAA,EACA;AAAA,EAGA,cAAAC;AAAA,EACA,gBAAAC;AAAA,EACA,eAAAC;AAAA,OACG;AAYA,IAAM,+BACT,0BAA0B;AACvB,IAAM,8BACT,6BAA6B;AAE1B,IAAM,0BAAN,MAA8B;AAAA,EAQjC,YACY,QACA,SACV;AAFU;AACA;AAAA,EACT;AAAA,EAVK,aAA0B,oBAAI,IAAI;AAAA,EAClC,gBAA6B,oBAAI,IAAI;AAAA,EACrC,cAA2B,oBAAI,IAAI;AAAA,EACnC,eAA4B,oBAAI,IAAI;AAAA,EACpC,YAAqB;AAAA,EACrB;AAAA,EAOR,MAAc,cACV,QACA,MACA,mBACgB;AAEhB,QAAI,SAAS,WAAW,mBAAmB;AACvC,YAAM,aAAa,MAAM,KAAK,OAAO,QAAQ,iBAAiB;AAC9D,UAAI,YAAY,YAAY,KAAK,OAAO,QAAQ,IAAI;AAChD,eAAO;AAAA,MACX;AAAA,IACJ;AAGA,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,KAAK,WAAW,IAAI,MAAM;AAAA,MACrC,KAAK;AACD,eAAO,KAAK,cAAc,IAAI,MAAM;AAAA,MACxC,KAAK;AACD,eAAO,KAAK,YAAY,IAAI,MAAM;AAAA,MACtC,KAAK;AACD,eAAO,KAAK,aAAa,IAAI,MAAM;AAAA,MACvC;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EAEQ,kBAAkB,QAAgB,MAA+B;AACrE,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,aAAK,WAAW,IAAI,MAAM;AAC1B;AAAA,MACJ,KAAK;AACD,aAAK,cAAc,IAAI,MAAM;AAC7B;AAAA,MACJ,KAAK;AACD,aAAK,YAAY,IAAI,MAAM;AAC3B;AAAA,MACJ,KAAK;AACD,aAAK,aAAa,IAAI,MAAM;AAC5B;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAM,QAAQ;AACV,QAAI,KAAK,WAAW;AAChB,MAAAC,aAAY,KAAK,4CAA4C;AAC7D;AAAA,IACJ;AAEA,SAAK,YAAY;AACjB,IAAAA,aAAY,IAAI,oCAAoC;AAEpD,UAAM,+BAA+B,YAAY;AAC7C,UAAI,CAAC,KAAK,WAAW;AACjB,QAAAA,aAAY,IAAI,0CAA0C;AAC1D;AAAA,MACJ;AAEA,UAAI;AACA,cAAM,KAAK,yBAAyB,EAAE,MAAM,CAAC,UAAU;AACnD,UAAAA,aAAY,MAAM,8BAA8B,KAAK;AAAA,QACzD,CAAC;AAED,cAAM,eACF,KAAK;AAAA,UACD,KAAK,OAAO,KAAK,eAAe,eAAe;AAAA,QACnD,IAAI;AAER,QAAAA,aAAY;AAAA,UACR,2BAA2B,eAAe,GAAI;AAAA,QAClD;AAGA,aAAK,gBAAgB,WAAW,MAAM;AAClC,uCAA6B;AAAA,QACjC,GAAG,YAAY;AAAA,MACnB,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,6BAA6B,KAAK;AACpD,YAAI,KAAK,WAAW;AAChB,eAAK,gBAAgB;AAAA,YACjB,MAAM;AACF,2CAA6B;AAAA,YACjC;AAAA,YACA,IAAI,KAAK;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAGA,iCAA6B;AAAA,EACjC;AAAA,EAEA,MAAa,OAAO;AAChB,IAAAA,aAAY,IAAI,qCAAqC;AACrD,SAAK,YAAY;AAGjB,QAAI,KAAK,eAAe;AACpB,mBAAa,KAAK,aAAa;AAC/B,WAAK,gBAAgB;AAAA,IACzB;AAGA,SAAK,WAAW,MAAM;AACtB,SAAK,cAAc,MAAM;AACzB,SAAK,YAAY,MAAM;AACvB,SAAK,aAAa,MAAM;AAGxB,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAExD,IAAAA,aAAY,IAAI,8CAA8C;AAAA,EAClE;AAAA,EAEA,MAAM,2BAA2B;AAC7B,IAAAA,aAAY,IAAI,8BAA8B;AAE9C,QAAI;AACA,YAAM,EAAE,UAAU,eAAe,IAAI,KAAK,OAAO;AACjD,MAAAA,aAAY;AAAA,QACR,uCAAuC,cAAc;AAAA,MACzD;AAGA,YAAM,iBAAiB,MAAM,KAAK,OAAO;AAAA,QACrC,IAAI,cAAc;AAAA,QAClB;AAAA,MACJ;AAGA,YAAM,eAAe,MAAM,KAAK,gBAAgB;AAGhD,YAAM,kBAAkB,MAAM,KAAK,mBAAmB,YAAY;AAGlE,YAAM,kBAAkB;AAAA,QACpB,GAAI,gBAAgB,SAAS,CAAC;AAAA,QAC9B,GAAG;AAAA,MACP;AAEA,YAAM,cAAc,MAAM;AAAA,QACtB,IAAI,IAAI,gBAAgB,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO;AAAA,MACnE,EACK,KAAK,CAAC,GAAG,MAAM,EAAE,GAAG,cAAc,EAAE,EAAE,CAAC,EACvC,OAAO,CAAC,SAAS,KAAK,YAAY,KAAK,OAAO,QAAQ,EAAE;AAE7D,MAAAA,aAAY;AAAA,QACR,SAAS,YAAY,MAAM;AAAA,MAC/B;AAEA,YAAM,sBAAsB,YAAY,IAAI,OAAO,SAAS;AACxD,YAAI,CAAC,KAAK,WAAW;AACjB,UAAAA,aAAY;AAAA,YACR;AAAA,UACJ;AACA;AAAA,QACJ;AAEA,QAAAA,aAAY;AAAA,UACR;AAAA,UACA,KAAK,UAAU,IAAI;AAAA,QACvB;AAEA,YAAI,CAAC,KAAK,IAAI;AACV,UAAAA,aAAY,KAAK,iCAAiC;AAClD;AAAA,QACJ;AAEA,YACI,KAAK,OAAO,qBACZ,SAAS,KAAK,EAAE,KAAK,SAAS,KAAK,OAAO,iBAAiB,GAC7D;AACE,UAAAA,aAAY;AAAA,YACR,0CAA0C,KAAK,EAAE;AAAA,UACrD;AACA;AAAA,QACJ;AAEA,YAAI;AACA,gBAAM,SAASC;AAAA,YACX,GAAG,KAAK,kBAAkB,KAAK,EAAE,IAAI,KAAK,QAAQ,OAAO;AAAA,UAC7D;AACA,gBAAM,aAAaA,cAAa,KAAK,OAAO;AAE5C,UAAAD,aAAY;AAAA,YACR,gCAAgC,KAAK,OAAO,QAAQ;AAAA,UACxD;AACA,gBAAM,KAAK,QAAQ;AAAA,YACf;AAAA,YACA;AAAA,YACA,KAAK,OAAO,YAAY;AAAA,YACxB,KAAK,OAAO,QAAQ;AAAA,YACpB;AAAA,UACJ;AAEA,UAAAA,aAAY;AAAA,YACR,gDAAgD,KAAK,EAAE;AAAA,UAC3D;AACA,gBAAM,SAAS,MAAM;AAAA,YACjB;AAAA,YACA,KAAK;AAAA,UACT;AAEA,gBAAM,UAAkB;AAAA,YACpB,SAAS,EAAE,MAAM,KAAK,KAAK;AAAA,YAC3B,SAAS,KAAK,QAAQ;AAAA,YACtB,QAAQ;AAAA,YACR;AAAA,UACJ;AAEA,UAAAA,aAAY,IAAI,wBAAwB,KAAK,EAAE,EAAE;AACjD,gBAAM,KAAK,WAAW;AAAA,YAClB;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AAED,eAAK,OAAO,oBAAoB,KAAK;AAErC,UAAAA,aAAY;AAAA,YACR,sCAAsC,KAAK,EAAE;AAAA,UACjD;AAAA,QACJ,SAAS,OAAO;AACZ,UAAAA,aAAY;AAAA,YACR,gCAAgC,KAAK,EAAE;AAAA,YACvC;AAAA,UACJ;AACA,cAAI,iBAAiB,OAAO;AACxB,YAAAA,aAAY,MAAM,kBAAkB;AAAA,cAChC,SAAS,MAAM;AAAA,cACf,OAAO,MAAM;AAAA,YACjB,CAAC;AAAA,UACL;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,YAAM,QAAQ,IAAI,mBAAmB;AAErC,YAAM,KAAK,OAAO,yBAAyB;AAC3C,MAAAA,aAAY,IAAI,uCAAuC;AAAA,IAC3D,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,sCAAsC,KAAK;AAC7D,UAAI,iBAAiB,OAAO;AACxB,QAAAA,aAAY,MAAM,kBAAkB;AAAA,UAChC,SAAS,MAAM;AAAA,UACf,OAAO,MAAM;AAAA,QACjB,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,mBAAmB,OAAgC;AAC7D,UAAM,WAAmB,CAAC;AAE1B,eAAW,QAAQ,OAAO;AACtB,UAAI;AACA,YAAI,CAAC,KAAK,gBAAgB,aAAa;AACnC;AAAA,QACJ;AAEA,QAAAA,aAAY,IAAI,kCAAkC,KAAK,EAAE,EAAE;AAC3D,cAAM,eACF,MAAM,KAAK,OAAO,aAAa,oBAAoB,KAAK,EAAE;AAE9D,YAAI,cAAc;AAEd,gBAAM,gBAAgB,aACjB;AAAA,YACG,CAAC,UACG,MAAM,OAAO,KAAK;AAAA,YAClB,MAAM,YAAY,KAAK,OAAO,QAAQ;AAAA,YACtC,CAAC,MAAM;AAAA;AAAA,UACf,EACC,KAAK,CAAC,GAAG,MAAM;AACZ,kBAAM,QAAQ,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AACjD,kBAAM,QAAQ,IAAI,KAAK,EAAE,aAAa,CAAC,EAAE,QAAQ;AACjD,mBAAO,QAAQ;AAAA,UACnB,CAAC;AAEL,mBAAS,KAAK,GAAG,aAAa;AAAA,QAClC;AAEA,cAAM,KAAK,KAAM,GAAI;AAAA,MACzB,SAAS,OAAO;AACZ,QAAAA,aAAY;AAAA,UACR,oCAAoC,KAAK,EAAE;AAAA,UAC3C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAc,WAAW;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,EACJ,GAIqC;AACjC,IAAAA,aAAY,IAAI,2BAA2B,KAAK,EAAE,EAAE;AAGpD,QAAI,KAAK,QAAQ,WAAW,gBAAgB,MAAM,QAAQ;AACtD,MAAAA,aAAY,KAAK,qCAAqC,KAAK,EAAE,EAAE;AAC/D,aAAO;AAAA,QACH,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,cAAc,CAAC;AAAA,QACf,QAAQ;AAAA,MACZ;AAAA,IACJ;AAEA,QAAI;AACA,UAAI,CAAC,QAAQ,QAAQ,MAAM;AACvB,QAAAA,aAAY,IAAI,iBAAiB,KAAK,EAAE,oBAAoB;AAC5D,eAAO;AAAA,UACH,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc,CAAC;AAAA,UACf,QAAQ;AAAA,QACZ;AAAA,MACJ;AAEA,YAAM,eAAe,MAAM,KAAK,gBAAgB;AAEhD,YAAM,aAAa,CAAC,MAChB,OAAO,EAAE,EAAE;AAAA,QAAW,EAAE,OAAO,QAAQ,SAAS,MAC5C,EAAE,OAAO,YAAY,SACzB;AAAA,QAAY,EAAE,IAAI;AAEtB,YAAM,wBAAwB,aACzB,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC;AAAA;AAAA,CAAS,EACpC,KAAK,IAAI;AAEd,YAAM,wBAAwB,OACzB;AAAA,QACG,CAAC,MACG,IAAI,EAAE,OAAO,YAAY,SAAS,KAAK,IAAI;AAAA,UACvC,EAAE,YACI,IAAI,KAAK,EAAE,SAAS,EAAE,QAAQ,IAC9B,KAAK,IAAI;AAAA,QACnB,EAAE,eAAe,CAAC,MAAM,EAAE,IAAI;AAAA,MACtC,EACC,KAAK,MAAM;AAEhB,MAAAA,aAAY,IAAI,iBAAiB;AACjC,UAAI,QAAQ,MAAM,KAAK,QAAQ,aAAa,SAAS;AAAA,QACjD,cAAc,KAAK,OAAO;AAAA,QAC1B,gBAAgB,KAAK,OAAO,QAAQ;AAAA,QACpC,aAAa,WAAW,IAAI;AAAA,QAC5B;AAAA,QACA,UAAU,KAAK,KAAK,QAAQ,UAAU,IAAI;AAAA;AAAA,EAAuB,qBAAqB;AAAA,MAC1F,CAAC;AAED,MAAAA,aAAY,IAAI,4BAA4B;AAC5C,YAAM,uBAAuBE,gBAAe;AAAA,QACxC;AAAA,QACA,UACI,KAAK,QAAQ,WAAW,WAClB,+BACN;AAAA,MACR,CAAC;AAED,YAAM,gBAAgB,MAAM,sBAAsB;AAAA,QAC9C,SAAS,KAAK;AAAA,QACd,SAAS;AAAA,QACT,YAAYC,YAAW;AAAA,MAC3B,CAAC;AAED,UAAI,kBAAkB,WAAW;AAC7B,QAAAH,aAAY,IAAI,0BAA0B,KAAK,EAAE,EAAE;AACnD,eAAO;AAAA,UACH,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc,CAAC;AAAA,UACf,QAAQ;AAAA,QACZ;AAAA,MACJ;AAGA,YAAM,SAASC,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAChE,MAAAD,aAAY,IAAI,yCAAyC,MAAM,EAAE;AACjE,YAAM,aACF,MAAM,KAAK,QAAQ,eAAe,cAAc,MAAM;AAC1D,MAAAA,aAAY,IAAI,kBAAkB,UAAU,EAAE;AAE9C,UAAI,CAAC,YAAY;AACb,QAAAA,aAAY,IAAI,mCAAmC,MAAM,EAAE;AAC3D,cAAM,gBAAgB;AAAA,UAClB,IAAI;AAAA,UACJ,SAAS,KAAK,QAAQ;AAAA,UACtB,SAAS;AAAA,YACL,MAAM,KAAK;AAAA,YACX,WAAW,KAAK,oBACVC;AAAA,cACI,KAAK,oBACD,MACA,KAAK,QAAQ;AAAA,YACrB,IACA;AAAA,UACV;AAAA,UACA,QAAQA,cAAa,KAAK,OAAO;AAAA,UACjC,QAAQ,QAAQ;AAAA,UAChB,WAAW,KAAK,YACV,IAAI,KAAK,KAAK,SAAS,EAAE,QAAQ,IACjC,KAAK,IAAI;AAAA,QACnB;AACA,cAAM,KAAK,OAAO,mBAAmB,eAAe,KAAK;AAAA,MAC7D,OAAO;AACH,QAAAD,aAAY;AAAA,UACR,mDAAmD,MAAM;AAAA,QAC7D;AAAA,MACJ;AAEA,YAAM,UAAUE,gBAAe;AAAA,QAC3B;AAAA,QACA,UACI,KAAK,QAAQ,UAAU,WACjB,gCACN,KAAK,QAAQ,WAAW,WAAW,0BACnC;AAAA,MACR,CAAC;AAED,YAAM,WAAY,MAAME,yBAAwB;AAAA,QAC5C,SAAS,KAAK;AAAA,QACd;AAAA,QACA,YAAYD,YAAW;AAAA,MAC3B,CAAC;AAED,eAAS,eAAe,SAAS,gBAAgB,CAAC;AAGlD,UAAI,SAAS,aAAa,SAAS,GAAG;AAClC,mBAAW,eAAe,SAAS,cAAc;AAC7C,cAAI;AACA,gBACI,MAAM,KAAK;AAAA,cACP,KAAK;AAAA,cACL,YAAY;AAAA,cACZ,KAAK;AAAA,YACT,GACF;AACE,cAAAH,aAAY;AAAA,gBACR,YAAY,YAAY,IAAI,aAAa,KAAK,EAAE;AAAA,cACpD;AACA;AAAA,YACJ;AAEA,oBAAQ,YAAY,MAAM;AAAA,cACtB,KAAK;AACD,oBAAI;AACA,wBAAM,KAAK,OAAO,aAAa;AAAA,oBAC3B,KAAK;AAAA,kBACT;AAEA,uBAAK,kBAAkB,KAAK,IAAI,MAAM;AAAA,gBAC1C,SAAS,OAAO;AACZ,kBAAAA,aAAY;AAAA,oBACR,4BAA4B,KAAK,EAAE;AAAA,oBACnC;AAAA,kBACJ;AAAA,gBACJ;AACA;AAAA,cAEJ,KAAK;AACD,oBAAI;AACA,wBAAM,eACF,MAAM,KAAK,OAAO,aAAa;AAAA,oBAC3B,KAAK;AAAA,kBACT;AACJ,sBAAI,cAAc,IAAI;AAClB,oBAAAA,aAAY;AAAA,sBACR,iBAAiB,KAAK,EAAE;AAAA,oBAC5B;AACA,yBAAK;AAAA,sBACD,KAAK;AAAA,sBACL;AAAA,oBACJ;AAAA,kBACJ,OAAO;AACH,oBAAAA,aAAY;AAAA,sBACR,yBAAyB,KAAK,EAAE;AAAA,oBACpC;AAAA,kBACJ;AAAA,gBACJ,SAAS,OAAO;AACZ,kBAAAA,aAAY;AAAA,oBACR,wBAAwB,KAAK,EAAE;AAAA,oBAC/B;AAAA,kBACJ;AAAA,gBACJ;AACA;AAAA,cAEJ,KAAK;AACD,oBAAI,YAAY,MAAM;AAClB,wBAAM,KAAK,OAAO,aAAa;AAAA,oBAC3B,KAAK;AAAA,oBACL,YAAY;AAAA,kBAChB;AACA,kBAAAA,aAAY;AAAA,oBACR,uBAAuB,KAAK,EAAE;AAAA,kBAClC;AACA,uBAAK,kBAAkB,KAAK,IAAI,OAAO;AAAA,gBAC3C;AACA;AAAA,cAEJ,KAAK;AACD,oBAAI,YAAY,MAAM;AAClB,wBAAM,gBAAgB;AAAA,oBAClB,GAAG;AAAA,oBACH,MAAM,YAAY;AAAA,kBACtB;AAEA,wBAAM,mBAAmB,MAAM;AAAA,oBAC3B,KAAK;AAAA,oBACL;AAAA,oBACA,QAAQ;AAAA,oBACR,KAAK,OAAO,QAAQ;AAAA,oBACpB,KAAK;AAAA,kBACT;AAEA,0BACI,MAAM,KAAK,QAAQ;AAAA,oBACf;AAAA,kBACJ;AAEJ,6BAAW;AAAA,oBACP;AAAA,oBACA;AAAA,kBACJ,KAAK,iBAAiB,QAAQ,GAAG;AAC7B,oCAAgB,QAAQ,SACpB,QAAQ,iBAAiB,SAAS,IAC5B,SAAS,SACT;AACV,0BAAM,KAAK,QAAQ,eAAe;AAAA,sBAC9B;AAAA,oBACJ;AAAA,kBACJ;AAEA,wBAAM,KAAK,QAAQ,SAAS,SAAS,KAAK;AAC1C,wBAAM,KAAK,QAAQ;AAAA,oBACf;AAAA,oBACA;AAAA,oBACA;AAAA,kBACJ;AAEA,uBAAK,kBAAkB,KAAK,IAAI,OAAO;AAAA,gBAC3C;AACA;AAAA,cAEJ,KAAK;AACD,gBAAAA,aAAY;AAAA,kBACR,mCAAmC,KAAK,EAAE;AAAA,gBAC9C;AACA;AAAA,YACR;AAAA,UACJ,SAAS,OAAO;AACZ,YAAAA,aAAY;AAAA,cACR,gCAAgC,YAAY,IAAI,aAAa,KAAK,EAAE;AAAA,cACpE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,eAAe;AAAA;AAAA,EAAe,OAAO;AAAA;AAAA,iBACvC,KAAK,EACT,OAAO,KAAK,OAAO,YAAY,SAAS,KACpC,KAAK,IACT;AAAA;AAAA,EAAsB,KAAK,UAAU,QAAQ,CAAC;AAE9C,YAAM,KAAK,QAAQ,aAAa;AAAA,QAC5B,0BAA0B,KAAK,EAAE;AAAA,QACjC;AAAA,MACJ;AAEA,YAAM,KAAK;AAEX,YAAM,qBAAqB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,SAAS;AAAA,QAChB,cAAc,SAAS,aAAa,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,QACrD,WAAW,SAAS;AAAA,QACpB,YAAY,SAAS,aAChB,OAAO,CAAC,MAAM,EAAE,SAAS,OAAO,EAChC,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,MAC1B;AACA,MAAAA,aAAY;AAAA,QACR,wBAAwB,KAAK,UAAU,kBAAkB,CAAC;AAAA,MAC9D;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,sCAAsC,KAAK,EAAE;AAC/D,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAc,kBAAmC;AAC7C,QAAI,eAAe,MAAM,KAAK,OAAO,kBAAkB;AACvD,QAAI,CAAC,cAAc;AACf,MAAAA,aAAY,IAAI,wBAAwB;AACxC,qBAAe,MAAM,KAAK,OAAO,kBAAkB,EAAE;AACrD,YAAM,KAAK,OAAO,cAAc,YAAY;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AACJ;;;AC1oBA,SAAgC,eAAAK,oBAAmB;;;ACHnD,SAAS,eAAAC,oBAAkC;AAC3C,SAAS,SAAS;AAEX,IAAM,kBAAkB,EAAE,OAAO;AAAA,EACpC,iBAAiB,EAAE,OAAO,EAAE,IAAI,GAAG,6BAA6B;AAAA,EAChE,iBAAiB,EAAE,OAAO,EAAE,IAAI,GAAG,6BAA6B;AAAA,EAChE,gBAAgB,EAAE,OAAO,EAAE,IAAI,GAAG,4BAA4B;AAAA,EAC9D,gBAAgB,EACX,OAAO,EACP,SAAS,EACT,QAAQ,OAAO,EACf,UAAU,CAAC,QAAQ,IAAI,YAAY,MAAM,UAAU,QAAQ,GAAG;AACvE,CAAC;AAID,eAAsB,qBAClB,SACqB;AAErB,QAAM,kBAAkB;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA,QAAM,iBAAiB,gBAAgB;AAAA,IACnC,CAAC,WAAW,EAAE,QAAQ,WAAW,MAAM,KAAK,QAAQ,IAAI,MAAM;AAAA,EAClE;AACA,MAAI,eAAe,SAAS,GAAG;AAC3B,UAAM,IAAI;AAAA,MACN,2CAA2C,eAAe,KAAK,IAAI,CAAC;AAAA,IACxE;AAAA,EACJ;AAEA,MAAI;AACA,UAAM,SAAS;AAAA,MACX,gBACI,QAAQ,WAAW,gBAAgB,KACnC,QAAQ,IAAI;AAAA,MAChB,iBACI,QAAQ,WAAW,iBAAiB,KACpC,QAAQ,IAAI;AAAA,MAChB,iBACI,QAAQ,WAAW,iBAAiB,KACpC,QAAQ,IAAI;AAAA,MAChB,gBACI,QAAQ,WAAW,gBAAgB,KACnC,QAAQ,IAAI;AAAA,IACpB;AAEA,WAAO,gBAAgB,MAAM,MAAM;AAAA,EACvC,SAAS,OAAO;AACZ,QAAI,iBAAiB,EAAE,UAAU;AAC7B,YAAM,gBAAgB,MAAM,OACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,IAAI,OAAO,EAAE,EACpD,KAAK,IAAI;AACd,MAAAA,aAAY;AAAA,QACR;AAAA,EAA4C,aAAa;AAAA,MAC7D;AAAA,IACJ;AACA,UAAM;AAAA,EACV;AACJ;;;AC9DA;AAAA,EAOI,0BAAAC;AAAA,EACA,eAAAC;AAAA,EACA,gBAAAC;AAAA,OACG;AAEP,SAAS,gBAAAC,qBAAoB;;;ACZ7B,SAAS,oBAAoB;AAE7B,SAAS,eAAAC,oBAAmB;AAerB,IAAM,eAAN,cAA2B,aAAa;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACR;AAAA,EAEA,YAAY,QAAgB,SAAiB,SAAyB;AAClE,UAAM;AACN,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,UAAU,eAAe,QAAQ,OAAO,EAAE;AAC/C,SAAK,UAAU;AAAA,EACnB;AAAA,EAEQ,iBAAiB,OAAqB;AAC1C,WAAO,OAAO,eAAe;AAAA,EACjC;AAAA,EAEA,MAAc,YACV,UACA,UAAuB,CAAC,GACd;AACV,UAAM,MAAM,GAAG,KAAK,OAAO,GAAG,QAAQ;AACtC,UAAM,aAAa;AACnB,QAAI,UAAU;AACd,WAAO,UAAU,YAAY;AACzB,UAAI;AACA,cAAM,WAAW,MAAM,MAAM,KAAK;AAAA,UAC9B,GAAG;AAAA,UACH,SAAS;AAAA,YACL,eAAe,UAAU,KAAK,MAAM;AAAA,YACpC,gBAAgB;AAAA,YAChB,GAAG,QAAQ;AAAA,UACf;AAAA,UACA,aAAa;AAAA,QACjB,CAAC;AAED,YAAI,CAAC,SAAS,IAAI;AACd,gBAAM,QAAQ,IAAI;AAAA,YACd,qBAAqB,SAAS,UAAU,KAAK,SAAS,MAAM;AAAA,UAChE;AACA,gBAAM,aAAa,SAAS;AAC5B,gBAAM,WAAW;AACjB,gBAAM;AAAA,QACV;AAEA,eAAQ,MAAM,SAAS,KAAK;AAAA,MAChC,SAAS,OAAO;AACZ,QAAAC,aAAY,MAAM,2BAA2B,QAAQ,KAAK;AAAA,UACtD,SAAS,MAAM;AAAA,UACf,OAAO,MAAM;AAAA,UACb;AAAA,UACA;AAAA,QACJ,CAAC;AAED,YAAI,SAAS,KAAK,iBAAiB,KAAK,GAAG;AACvC,gBAAM,WAAW,KAAK,IAAI,GAAG,OAAO,IAAI;AACxC,UAAAA,aAAY;AAAA,YACR,+BAA+B,QAAQ,iBAAiB,QAAQ;AAAA,UACpE;AACA,gBAAM,KAAK,QAAQ;AACnB;AACA;AAAA,QACJ;AACA,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,cAAc,SAAwB;AAClC,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,MAAM,SAAS,SAAiC;AAC5C,WAAO,MAAM,KAAK,YAAmB,WAAW,OAAO,EAAE;AAAA,EAC7D;AAAA,EAEA,MAAM,QAAQ,QAA+B;AACzC,WAAO,MAAM,KAAK,YAAkB,iBAAiB,MAAM,EAAE;AAAA,EACjE;AAAA,EAEA,MAAM,oBAAoB,QAAiC;AACvD,UAAM,WAAW,MAAM,KAAK;AAAA,MACxB,UAAU,MAAM;AAAA,IACpB;AAEA,WAAO,SAAS,KAAK,IAAI,CAAC,SAAS;AAC/B,YAAM,SAAS,SAAS,SAAS,MAAM;AAAA,QACnC,CAAC,SAAS,KAAK,OAAO,KAAK;AAAA,MAC/B;AAEA,aAAO;AAAA,QACH,IAAI,KAAK;AAAA,QACT,MAAM,KAAK;AAAA,QACX,WAAW,KAAK;AAAA,QAChB,SAAS,KAAK;AAAA,QACd,mBAAmB,KAAK;AAAA,QACxB,OAAO,SACD;AAAA,UACI,IAAI,OAAO;AAAA,UACX,MAAM,OAAO;AAAA,UACb,UAAU,OAAO;AAAA,UACjB,MAAM,OAAO;AAAA,UACb,YAAY,OAAO;AAAA,QACvB,IACA;AAAA,QACN,gBAAgB,KAAK;AAAA,QACrB,OAAO,CAAC;AAAA,QACR,UAAU,CAAC;AAAA,QACX,UAAU,CAAC;AAAA,QACX,QAAQ,CAAC;AAAA,QACT,QAAQ,CAAC;AAAA,QACT,MAAM,CAAC;AAAA,QACP,QAAQ,CAAC;AAAA,MACb;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,gBACF,OACA,QACqB;AACrB,WAAO,MAAM,KAAK;AAAA,MACd,kBAAkB,KAAK,OAAO,gBAAgB,KAAK,GAAG,SAAS,WAAW,MAAM,KAAK,EAAE;AAAA,IAC3F;AAAA,EACJ;AAAA,EAEA,MAAM,qBAAqB,OAAsC;AAC7D,WAAO,MAAM,KAAK;AAAA,MACd,0BAA0B,KAAK;AAAA,IACnC;AAAA,EACJ;AAAA,EAEA,MAAM,YACF,OACA,aAAqB,IACA;AACrB,UAAM,SAAS,IAAI,gBAAgB;AAAA,MAC/B;AAAA,MACA,aAAa,KAAK,IAAI,YAAY,GAAG,EAAE,SAAS;AAAA,IACpD,CAAC;AAED,UAAM,WAAW,MAAM,KAAK;AAAA,MACxB,wBAAwB,OAAO,SAAS,CAAC;AAAA,IAC7C;AAEA,UAAM,QAAgB,SAAS,KAAK,IAAI,CAAC,SAAS;AAC9C,YAAM,SAAS,SAAS,SAAS,MAAM;AAAA,QACnC,CAAC,SAAS,KAAK,OAAO,KAAK;AAAA,MAC/B;AAEA,aAAO;AAAA,QACH,IAAI,KAAK;AAAA,QACT,MAAM,KAAK;AAAA,QACX,MAAM;AAAA,QACN,WAAW,KAAK;AAAA,QAChB,SAAS,KAAK;AAAA,QACd,OAAO,SACD;AAAA,UACI,IAAI,OAAO;AAAA,UACX,MAAM,OAAO;AAAA,UACb,UAAU,OAAO;AAAA,UACjB,MAAM,OAAO;AAAA,UACb,YAAY,OAAO;AAAA,QACvB,IACA;AAAA,QACN,gBAAgB,KAAK;AAAA,QACrB,OAAO,CAAC;AAAA,QACR,UAAU,CAAC;AAAA,QACX,UAAU,CAAC;AAAA,QACX,QAAQ,CAAC;AAAA,QACT,QAAQ,CAAC;AAAA,QACT,MAAM,CAAC;AAAA,QACP,QAAQ,CAAC;AAAA,MACb;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,MACH;AAAA,MACA,YACI,SAAS,MAAM,eAAe,aACxB,SAAS,KAAK,SAAS,KAAK,SAAS,CAAC,GAAG,aACzC;AAAA,IACd;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,aAAqB,IAA2B;AAC9D,QAAI;AACA,aAAO,MAAM,KAAK;AAAA,QACd,IAAI,KAAK,QAAQ,QAAQ;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,4BAA4B,KAAK;AACnD,aAAO,EAAE,OAAO,CAAC,EAAE;AAAA,IACvB;AAAA,EACJ;AAAA,EAEA,MAAM,SACF,MACA,iBACA,WACA,aAC4B;AAC5B,UAAM,UAAU;AAAA,MACZ;AAAA,MACA,GAAI,mBAAmB;AAAA,QACnB,OAAO;AAAA,UACH,qBAAqB;AAAA,QACzB;AAAA,MACJ;AAAA,MACA,GAAI,WAAW,UAAU,EAAE,YAAY,UAAU;AAAA,MACjD,GAAI,eAAe,EAAE,eAAe,YAAY;AAAA,IACpD;AAEA,WAAO,MAAM,KAAK,YAAiC,UAAU;AAAA,MACzD,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,OAAO;AAAA,IAChC,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,SAAS,QAAkC;AAC7C,UAAM,WAAW,MAAM,KAAK,YAA6B,UAAU;AAAA,MAC/D,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,EAAE,OAAO,CAAC;AAAA,IACnC,CAAC;AAED,WAAO,SAAS,KAAK;AAAA,EACzB;AAAA,EAEA,MAAM,WAAW,QAA+B;AAC5C,UAAM,WAAW,MAAM,KAAK;AAAA,MACxB,UAAU,MAAM;AAAA,MAChB;AAAA,QACI,QAAQ;AAAA,MACZ;AAAA,IACJ;AAEA,WAAO;AAAA,MACH,IAAI,SAAS,KAAK;AAAA,MAClB,WAAW,SAAS,KAAK;AAAA,MACzB,SAAS,SAAS,KAAK;AAAA,MACvB,MAAM;AAAA,MACN,OAAO,CAAC;AAAA,MACR,UAAU,CAAC;AAAA,MACX,UAAU,CAAC;AAAA,MACX,QAAQ,CAAC;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,MAAM,CAAC;AAAA,MACP,QAAQ,CAAC;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,QAAgB,MAA6B;AAC3D,WAAO,MAAM,KAAK,YAAkB,UAAU;AAAA,MAC1C,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACjB;AAAA,QACA,eAAe;AAAA,MACnB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AACJ;;;ADlQA,IAAM,eAAN,MAAmB;AAAA,EACP,QAAgC,CAAC;AAAA,EACjC,aAAsB;AAAA,EAE9B,MAAM,IAAO,SAAuC;AAChD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,WAAK,MAAM,KAAK,YAAY;AACxB,YAAI;AACA,gBAAM,SAAS,MAAM,QAAQ;AAC7B,kBAAQ,MAAM;AAAA,QAClB,SAAS,OAAO;AACZ,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ,CAAC;AACD,WAAK,aAAa;AAAA,IACtB,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,eAA8B;AACxC,QAAI,KAAK,cAAc,KAAK,MAAM,WAAW,GAAG;AAC5C;AAAA,IACJ;AACA,SAAK,aAAa;AAElB,WAAO,KAAK,MAAM,SAAS,GAAG;AAC1B,YAAM,UAAU,KAAK,MAAM,MAAM;AACjC,UAAI;AACA,cAAM,QAAQ;AAAA,MAClB,SAAS,OAAO;AACZ,gBAAQ,MAAM,6BAA6B,KAAK;AAChD,aAAK,MAAM,QAAQ,OAAO;AAC1B,cAAM,KAAK,mBAAmB,KAAK,MAAM,MAAM;AAAA,MACnD;AACA,YAAM,KAAK,YAAY;AAAA,IAC3B;AAEA,SAAK,aAAa;AAAA,EACtB;AAAA,EAEA,MAAc,mBAAmB,YAAmC;AAChE,UAAM,QAAQ,KAAK,IAAI,GAAG,UAAU,IAAI;AACxC,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,KAAK,CAAC;AAAA,EAC7D;AAAA,EAEA,MAAc,cAA6B;AACvC,UAAM,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,GAAI,IAAI;AACjD,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,KAAK,CAAC;AAAA,EAC7D;AACJ;AAEO,IAAM,aAAN,MAAM,oBAAmBC,cAAa;AAAA,EACzC,OAAO,iBAAgE,CAAC;AAAA,EACxE;AAAA,EACA;AAAA,EACA;AAAA,EACA,oBAAmC;AAAA,EACnC;AAAA,EACA,cAAsB;AAAA,EAEtB,eAA6B,IAAI,aAAa;AAAA,EAC9C;AAAA,EAEA,WAAsC,MAAM;AAAA,EAAC;AAAA,EAE7C,YAAY,SAAwB;AAChC,UAAM;AACN,SAAK,UAAU;AACf,UAAM,SAAS,KAAK,QAAQ,WAAW,iBAAiB;AAExD,QAAI,YAAW,eAAe,MAAM,GAAG;AACnC,WAAK,eAAe,YAAW,eAAe,MAAM;AAAA,IACxD,OAAO;AACH,YAAM,SAAS,KAAK,QAAQ,WAAW,gBAAgB;AACvD,UAAI,CAAC,QAAQ;AACT,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AACA,WAAK,eAAe,IAAI,aAAa,QAAQ,MAAM;AACnD,kBAAW,eAAe,MAAM,IAAI,KAAK;AAAA,IAC7C;AAEA,SAAK,aACD,OACA,KAAK,QAAQ,UAAU,MAAM,IAAI,KAAK,MAAM,IAC5C,OACA,KAAK,QAAQ,UAAU,MAAM,KAAK,KAAK;AAAA,EAC/C;AAAA,EAEA,MAAM,OAAO;AACT,UAAM,SAAS,KAAK,QAAQ,WAAW,iBAAiB;AACxD,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAClD;AAEA,IAAAC,aAAY,IAAI,4BAA4B;AAC5C,SAAK,UAAU,MAAM,KAAK,aAAa,MAAM;AAE7C,QAAI,KAAK,SAAS;AACd,MAAAA,aAAY,IAAI,mBAAmB,KAAK,QAAQ,EAAE;AAClD,YAAM,gBAA+B;AAAA,QACjC,IAAI,KAAK,QAAQ;AAAA,QACjB,UAAU,KAAK,QAAQ;AAAA,QACvB,YAAY,KAAK,QAAQ;AAAA,QACzB,KAAK,KAAK,QAAQ;AAAA,MACtB;AAEA,WAAK,QAAQ,UAAU,gBAAgB;AACvC,WAAK,aAAa,cAAc,aAAa;AAAA,IACjD,OAAO;AACH,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAEA,UAAM,KAAK,wBAAwB;AACnC,UAAM,KAAK,iBAAiB;AAAA,EAChC;AAAA,EAEA,MAAM,UAAU,MAA2B;AACvC,QAAI,CAAC,MAAM;AACP,cAAQ,KAAK,mCAAmC;AAChD;AAAA,IACJ;AACA,UAAM,KAAK,QAAQ,aAAa,IAAI,gBAAgB,KAAK,EAAE,IAAI,IAAI;AAAA,EACvE;AAAA,EAEA,MAAM,cAAc,QAA2C;AAC3D,WAAO,MAAM,KAAK,QAAQ,aAAa;AAAA,MACnC,gBAAgB,MAAM;AAAA,IAC1B;AAAA,EACJ;AAAA,EAEA,MAAM,QAAQ,QAA+B;AACzC,UAAM,aAAa,MAAM,KAAK,cAAc,MAAM;AAClD,QAAI,WAAY,QAAO;AAEvB,UAAM,OAAO,MAAM,KAAK,aAAa;AAAA,MAAI,MACrC,KAAK,aAAa,QAAQ,MAAM;AAAA,IACpC;AAEA,UAAM,KAAK,UAAU,IAAI;AACzB,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,kBAAkB,OAAgC;AACpD,IAAAA,aAAY,MAAM,wBAAwB;AAC1C,UAAM,WAAW,MAAM,KAAK,aAAa,gBAAgB,KAAK;AAC9D,WAAO,SAAS,SAAS,CAAC;AAAA,EAC9B;AAAA,EAEA,MAAM,uBAAuB,OAAgC;AACzD,IAAAA,aAAY,MAAM,6BAA6B;AAC/C,UAAM,WAAW,MAAM,KAAK,aAAa,qBAAqB,KAAK;AACnE,WAAO,SAAS,SAAS,CAAC;AAAA,EAC9B;AAAA,EAEA,MAAM,iBACF,OACA,aAAqB,IACrB,WACA,SACkD;AAClD,QAAI;AACA,YAAM,iBAAiB,IAAI;AAAA,QAAsB,CAAC,YAC9C;AAAA,UACI,MACI,QAAQ;AAAA,YACJ,OAAO,CAAC;AAAA,YACR,YAAY;AAAA,UAChB,CAAC;AAAA,UACL;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,SAAS,MAAM,KAAK,aAAa;AAAA,QACnC,YACI,MAAM,QAAQ,KAAmB;AAAA,UAC7B,KAAK,aAAa,YAAY,OAAO,UAAU;AAAA,UAC/C;AAAA,QACJ,CAAC;AAAA,MACT;AAEA,aAAO;AAAA,QACH,OAAO,OAAO,SAAS,CAAC;AAAA,QACxB,YAAY;AAAA,UACR,aAAa,OAAO,cAAc;AAAA,UAClC,UAAU,QAAQ,OAAO,UAAU;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,gCAAgC,KAAK;AACvD,aAAO;AAAA,QACH,OAAO,CAAC;AAAA,QACR,YAAY,EAAE,aAAa,IAAI,UAAU,MAAM;AAAA,MACnD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,mBAAmB;AAC7B,IAAAA,aAAY,MAAM,wBAAwB;AAE1C,UAAM,iBAAiB,MAAM,KAAK,kBAAkB;AAEpD,QAAI,gBAAgB;AAChB,YAAM,mBACF,MAAM,KAAK,oBAAoB,cAAc;AACjD,YAAM,oBAAoB,IAAI;AAAA,QAC1B,iBAAiB,IAAI,CAAC,WAAW,OAAO,GAAG,SAAS,CAAC;AAAA,MACzD;AAEA,UACI,MAAM,KAAK;AAAA,QACP;AAAA,QACA;AAAA,MACJ,GACF;AACE;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,WAAW,MAAM,KAAK,kBAAkB,iBAAiB,KAAK,EAAE;AAGtE,UAAM,mBAAmB,MAAM,KAAK,aAAa,IAAI,YAAY;AAC7D,YAAM,WAAW,MAAM,KAAK,aAAa,YAAY,EAAE;AAGvD,YAAM,eAAe,MAAM,QAAQ;AAAA,SAC9B,SAAS,SAAS,CAAC,GAAG,IAAI,OAAO,SAAS;AACvC,cAAI;AACA,mBAAO,MAAM,KAAK,QAAQ,KAAK,EAAE;AAAA,UACrC,SAAS,OAAO;AACZ,YAAAA,aAAY;AAAA,cACR,uBAAuB,KAAK,EAAE;AAAA,cAC9B;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,YAAM,oBAAoB,aAAa;AAAA,QACnC,CAAC,SAAuB,SAAS;AAAA,MACrC;AAEA,aAAO;AAAA,QACH,OAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAED,UAAM,WAAW,CAAC,GAAG,UAAU,GAAI,iBAAiB,SAAS,CAAC,CAAE;AAChE,UAAM,KAAK,gBAAgB,QAAQ;AAGnC,UAAM,KAAK,cAAc,QAAQ;AACjC,UAAM,KAAK,cAAc,iBAAiB,KAAK;AAAA,EACnD;AAAA,EAEA,MAAc,oBAAoB,OAAe;AAC7C,WAAO,MAAM,KAAK,QAAQ,eAAe,qBAAqB;AAAA,MAC1D,SAAS,MAAM;AAAA,QAAI,CAAC,SAChBC,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAAA,MACrD;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,sBACV,UACA,mBACgB;AAChB,UAAM,cAAc,SAAS;AAAA,MACzB,CAAC,SACG,CAAC,kBAAkB;AAAA,QACfA,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAAA,MACrD;AAAA,IACR;AAEA,QAAI,YAAY,SAAS,GAAG;AACxB,YAAM,KAAK,gBAAgB,WAAW;AACtC,MAAAD,aAAY;AAAA,QACR,aAAa,YAAY,MAAM;AAAA,MACnC;AACA,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAc,gBAAgB,OAAe;AACzC,UAAM,aAAa,MAAM,OAAO,CAAC,SAAS,QAAQ,KAAK,EAAE;AAEzD,UAAM,UAAU,oBAAI,IAAU;AAC9B,eAAW,QAAQ,CAAC,SAAS;AACzB,UAAI,KAAK,IAAI;AACT,gBAAQ,IAAIC,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO,CAAC;AAAA,MAClE;AAAA,IACJ,CAAC;AAED,UAAM,mBACF,MAAM,KAAK,QAAQ,eAAe,qBAAqB;AAAA,MACnD,SAAS,MAAM,KAAK,OAAO;AAAA,IAC/B,CAAC;AAEL,UAAM,oBAAoB,IAAI;AAAA,MAC1B,iBAAiB,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IAC9C;AAEA,UAAM,cAAc,WAAW;AAAA,MAC3B,CAAC,SACG,KAAK,MACL,CAAC,kBAAkB;AAAA,QACfA,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAAA,MACrD;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,IAAI;AAClB,YAAM,KAAK,QAAQ;AAAA,QACf,KAAK,QAAQ;AAAA,QACb,KAAK,QAAQ;AAAA,QACb,KAAK,QAAQ,UAAU;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AAEA,eAAW,QAAQ,aAAa;AAC5B,YAAM,KAAK,iBAAiB,IAAI;AAAA,IACpC;AAAA,EACJ;AAAA,EAEA,MAAc,iBAAiB,MAAY;AACvC,QAAI,CAAC,KAAK,IAAI;AACV,MAAAD,aAAY,MAAM,+BAA+B,IAAI;AACrD;AAAA,IACJ;AAEA,UAAM,SAASC,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAChE,UAAM,SAASA,cAAa,KAAK,WAAW,KAAK,MAAM;AAEvD,QAAI,KAAK,OAAO;AACZ,YAAM,KAAK,QAAQ;AAAA,QACf;AAAA,QACA;AAAA,QACA,KAAK,MAAM;AAAA,QACX,KAAK,MAAM;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,UAAmB;AAAA,MACrB,MAAM,KAAK,QAAQ;AAAA,MACnB,KAAK,KAAK;AAAA,MACV,QAAQ;AAAA,MACR,WAAW,KAAK,oBACVA;AAAA,QACI,KAAK,oBAAoB,MAAM,KAAK,QAAQ;AAAA,MAChD,IACA;AAAA,IACV;AAEA,UAAM,KAAK,QAAQ,eAAe,aAAa;AAAA,MAC3C,IAAIA,cAAa,KAAK,KAAK,MAAM,KAAK,QAAQ,OAAO;AAAA,MACrD;AAAA,MACA;AAAA,MACA,SAAS,KAAK,QAAQ;AAAA,MACtB;AAAA,MACA,WAAWC,wBAAuB;AAAA,MAClC,WAAW,KAAK,YACV,IAAI,KAAK,KAAK,SAAS,EAAE,QAAQ,IACjC,KAAK,IAAI;AAAA,IACnB,CAAC;AAED,UAAM,KAAK,UAAU,IAAI;AAAA,EAC7B;AAAA,EAEA,MAAM,mBAAmB,SAAiB,OAAc;AACpD,QAAI,QAAQ,QAAQ,MAAM;AACtB,YAAM,gBAAgB,MAAM,KAAK,QAAQ,eAAe;AAAA,QACpD;AAAA,UACI,QAAQ,QAAQ;AAAA,UAChB,OAAO;AAAA,UACP,QAAQ;AAAA,QACZ;AAAA,MACJ;AAEA,UACI,cAAc,SAAS,KACvB,cAAc,CAAC,EAAE,YAAY,QAAQ,SACvC;AACE,QAAAF,aAAY,MAAM,yBAAyB,cAAc,CAAC,EAAE,EAAE;AAAA,MAClE,OAAO;AACH,cAAM,KAAK,QAAQ,eAAe,aAAa;AAAA,UAC3C,GAAG;AAAA,UACH,WAAWE,wBAAuB;AAAA,QACtC,CAAC;AAAA,MACL;AAEA,YAAM,KAAK,QAAQ,SAAS,SAAS;AAAA,QACjC,GAAG;AAAA,QACH,cAAc,KAAK;AAAA,MACvB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,MAAM,0BAAyC;AAC3C,SAAK,oBAAoB,MAAM,KAAK,QAAQ,aAAa;AAAA,MACrD,UAAU,KAAK,SAAS,EAAE;AAAA,IAC9B;AAAA,EACJ;AAAA,EAEA,MAAM,2BAA2B;AAC7B,QAAI,KAAK,qBAAqB,KAAK,SAAS,IAAI;AAC5C,YAAM,KAAK,QAAQ,aAAa;AAAA,QAC5B,UAAU,KAAK,QAAQ,EAAE;AAAA,QACzB,KAAK;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,oBAAiD;AACnD,WAAO,KAAK,SAAS,KACf,MAAM,KAAK,QAAQ,aAAa;AAAA,MAC5B,UAAU,KAAK,QAAQ,EAAE;AAAA,IAC7B,IACA;AAAA,EACV;AAAA,EAEA,MAAM,cAAc,UAAkB;AAClC,QAAI,KAAK,SAAS,IAAI;AAClB,YAAM,KAAK,QAAQ,aAAa;AAAA,QAC5B,UAAU,KAAK,QAAQ,EAAE;AAAA,QACzB;AAAA,QACA,EAAE,SAAS,KAAK,IAAK;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,cAAc,UAAkB;AAClC,QAAI,KAAK,SAAS,IAAI;AAClB,YAAM,KAAK,QAAQ,aAAa;AAAA,QAC5B,UAAU,KAAK,QAAQ,EAAE;AAAA,QACzB;AAAA,QACA,EAAE,SAAS,KAAK,IAAK;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,iBAAiB,QAAgB;AACnC,WAAO,MAAM,KAAK,QAAQ,aAAa;AAAA,MACnC,UAAU,MAAM;AAAA,IACpB;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa,SAAgB;AAC/B,UAAM,KAAK,QAAQ,aAAa;AAAA,MAC5B,UAAU,QAAQ,EAAE;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa,QAAgC;AAC/C,UAAM,SAAS,MAAM,KAAK,iBAAiB,MAAM;AACjD,QAAI,OAAQ,QAAO;AAEnB,QAAI;AACA,YAAM,UAAU,MAAM,KAAK,aAAa,IAAI,YAAY;AACpD,cAAM,WAAW,MAAM,KAAK,aAAa,SAAS,MAAM;AACxD,cAAM,QAAe;AAAA,UACjB,IAAI,SAAS;AAAA,UACb,YAAY,SAAS;AAAA,UACrB,UAAU,SAAS;AAAA,UACnB,MAAM,SAAS,QAAQ,KAAK,QAAQ,UAAU;AAAA,UAC9C,KACI,SAAS,QACR,OAAO,KAAK,QAAQ,UAAU,QAAQ,WACjC,KAAK,QAAQ,UAAU,MACvB,KAAK,QAAQ,UAAU,IAAI,CAAC,KAAK;AAAA,UAC3C,YAAY,SAAS;AAAA,UACrB,YAAY,SAAS;AAAA,UACrB,YAAY,SAAS;AAAA,QACzB;AACA,eAAO;AAAA,MACX,CAAC;AAED,YAAM,KAAK,aAAa,OAAO;AAC/B,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAF,aAAY,MAAM,kCAAkC,KAAK;AACzD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,UAAU;AACN,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AACJ;;;AF3fA,IAAM,gBAAN,MAAoB;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,SAAwB;AAChC,SAAK,SAAS,IAAI,WAAW,OAAO;AACpC,SAAK,OAAO,IAAI,iBAAiB,KAAK,QAAQ,OAAO;AACrD,SAAK,SAAS,IAAI,mBAAmB,KAAK,QAAQ,OAAO;AACzD,SAAK,cAAc,IAAI,wBAAwB,KAAK,QAAQ,OAAO;AAAA,EACvE;AACJ;AAEA,IAAI,gBAAsC;AAEnC,IAAM,wBAAgC;AAAA,EACzC,MAAM,MAAM,SAAwB;AAChC,QAAI,eAAe;AACf,MAAAG,aAAY,KAAK,+BAA+B;AAChD,aAAO;AAAA,IACX;AAEA,UAAM,qBAAqB,OAAO;AAElC,IAAAA,aAAY,IAAI,uBAAuB;AAEvC,oBAAgB,IAAI,cAAc,OAAO;AAEzC,UAAM,cAAc,OAAO,KAAK;AAEhC,UAAM,cAAc,KAAK,MAAM;AAE/B,UAAM,cAAc,OAAO,MAAM;AAEjC,UAAM,cAAc,YAAY,MAAM;AAEtC,WAAO;AAAA,EACX;AAAA,EACA,MAAM,KAAK,UAAyB;AAChC,IAAAA,aAAY,IAAI,wBAAwB;AACxC,QAAI,eAAe;AACf,UAAI;AACA,cAAM,cAAc,YAAY,KAAK;AACrC,cAAM,cAAc,OAAO,KAAK;AAChC,cAAM,cAAc,KAAK,KAAK;AAC9B,wBAAgB;AAChB,QAAAA,aAAY,IAAI,oCAAoC;AAAA,MACxD,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,iCAAiC,KAAK;AACxD,cAAM;AAAA,MACV;AAAA,IACJ;AACA,IAAAA,aAAY,IAAI,uBAAuB;AAAA,EAC3C;AACJ;AAEA,IAAO,gBAAQ;","names":["getEmbeddingZeroVector","stringToUuid","elizaLogger","elizaLogger","stringToUuid","getEmbeddingZeroVector","composeContext","elizaLogger","generateText","ModelClass","stringToUuid","elizaLogger","generateText","ModelClass","stringToUuid","composeContext","composeContext","generateMessageResponse","ModelClass","stringToUuid","elizaLogger","elizaLogger","stringToUuid","composeContext","ModelClass","generateMessageResponse","elizaLogger","elizaLogger","getEmbeddingZeroVector","elizaLogger","stringToUuid","EventEmitter","elizaLogger","elizaLogger","EventEmitter","elizaLogger","stringToUuid","getEmbeddingZeroVector","elizaLogger"]}