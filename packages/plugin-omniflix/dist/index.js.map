{"version":3,"sources":["../src/providers/wallet.ts","../src/providers/index.ts","../src/actions/bank/balance.ts","../src/action_examples/bank/balance.ts","../src/actions/bank/send_tokens.ts","../src/providers/bank.ts","../src/action_examples/bank/send_tokens.ts","../src/actions/bank/stake_balance.ts","../src/action_examples/bank/stake_balance.ts","../src/actions/bank/index.ts","../src/actions/staking/delegate_token.ts","../src/providers/staking.ts","../src/action_examples/staking/delegate_token.ts","../src/actions/staking/undelegate_token.ts","../src/action_examples/staking/undelegate_token.ts","../src/actions/staking/redelegate.ts","../src/action_examples/staking/redelegate.ts","../src/actions/staking/cancel_unbonding.ts","../src/action_examples/staking/cancel_unbonding.ts","../src/actions/staking/index.ts","../src/actions/gov/vote_on_proposal.ts","../src/providers/gov.ts","../src/action_examples/gov/vote_on_proposal.ts","../src/actions/gov/index.ts","../src/actions/index.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger, IAgentRuntime, Provider } from \"@elizaos/core\";\r\nimport {\r\n    DirectSecp256k1HdWallet,\r\n    DirectSecp256k1Wallet,\r\n} from \"@cosmjs/proto-signing\";\r\nimport { SigningStargateClient, Coin, GasPrice } from \"@cosmjs/stargate\";\r\nimport { fromHex } from \"@cosmjs/encoding\";\r\n\r\nexport class WalletProvider {\r\n    private wallet: DirectSecp256k1HdWallet | DirectSecp256k1Wallet;\r\n    private client: SigningStargateClient;\r\n\r\n    constructor(\r\n        wallet: DirectSecp256k1HdWallet | DirectSecp256k1Wallet,\r\n        client: SigningStargateClient\r\n    ) {\r\n        this.wallet = wallet;\r\n        this.client = client;\r\n    }\r\n\r\n    async getBalance(address: string): Promise<Coin[]> {\r\n        const balance = await this.client.getBalance(address, \"uflix\");\r\n        return [balance];\r\n    }\r\n\r\n    async getClient(): Promise<SigningStargateClient> {\r\n        return this.client;\r\n    }\r\n\r\n    async getWallet(): Promise<\r\n        DirectSecp256k1HdWallet | DirectSecp256k1Wallet\r\n    > {\r\n        return this.wallet;\r\n    }\r\n\r\n    async getAddress(): Promise<string> {\r\n        const address = await this.wallet.getAccounts();\r\n        return address[0].address;\r\n    }\r\n\r\n    async getMnemonic(): Promise<string | undefined> {\r\n        if (this.wallet instanceof DirectSecp256k1HdWallet) {\r\n            return this.wallet.mnemonic;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const walletProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            const privateKey =\r\n                runtime.getSetting(\"privateKey\") ||\r\n                process.env.OMNIFLIX_PRIVATE_KEY;\r\n            const mnemonic =\r\n                runtime.getSetting(\"mnemonic\") || process.env.OMNIFLIX_MNEMONIC;\r\n            const rpcEndpoint =\r\n                runtime.getSetting(\"rpcEndpoint\") ||\r\n                process.env.OMNIFLIX_RPC_ENDPOINT;\r\n\r\n            if (!rpcEndpoint) {\r\n                elizaLogger.error(\"RPC endpoint not found\");\r\n                return null;\r\n            }\r\n\r\n            if (!privateKey && !mnemonic) {\r\n                elizaLogger.error(\"Neither private key nor mnemonic provided\");\r\n                return null;\r\n            }\r\n\r\n            let wallet: DirectSecp256k1HdWallet | DirectSecp256k1Wallet;\r\n\r\n            if (privateKey) {\r\n                // Convert hex private key to Uint8Array\r\n                const privateKeyBytes = fromHex(\r\n                    privateKey.startsWith(\"0x\")\r\n                        ? privateKey.slice(2)\r\n                        : privateKey\r\n                );\r\n                wallet = await DirectSecp256k1Wallet.fromKey(\r\n                    privateKeyBytes,\r\n                    \"omniflix\"\r\n                );\r\n                elizaLogger.info(\"Wallet initialized with private key\");\r\n            } else if (mnemonic) {\r\n                // Use mnemonic\r\n                wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\r\n                    prefix: \"omniflix\",\r\n                });\r\n                elizaLogger.info(\"Wallet initialized with mnemonic\");\r\n            } else {\r\n                throw new Error(\"Neither private key nor mnemonic available\");\r\n            }\r\n\r\n            const client = await SigningStargateClient.connectWithSigner(\r\n                rpcEndpoint,\r\n                wallet,\r\n                {\r\n                    gasPrice: GasPrice.fromString(\"0.025uflix\"),\r\n                }\r\n            );\r\n\r\n            return new WalletProvider(wallet, client);\r\n        } catch (error) {\r\n            elizaLogger.error(`Error initializing wallet: ${error.message}`);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n\r\nexport default walletProvider;\r\n","import walletProvider from \"./wallet.ts\";\r\n\r\nexport const providers = [\r\n    walletProvider,\r\n]\r\n\r\nexport default providers;","import {\r\n    elizaLogger,\r\n    HandlerCallback,\r\n    type Memory,\r\n    type State,\r\n    type Action,\r\n    type ActionExample,\r\n    type IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport balanceExamples from \"../../action_examples/bank/balance\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet\";\r\n\r\nexport class GetBalanceAction {\r\n    async getBalance(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State\r\n    ): Promise<{ balance: number; address: string }> {\r\n        try {\r\n            let rpcEndpoint =\r\n                runtime.getSetting(\"rpcEndpoint\") ||\r\n                process.env.OMNIFLIX_RPC_ENDPOINT;\r\n            if (!rpcEndpoint) {\r\n                rpcEndpoint = \"https://rpc.omniflix.network:443\";\r\n            }\r\n\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                _state\r\n            );\r\n            const client = await wallet.getClient();\r\n\r\n            // Try to get address from message, fallback to wallet address\r\n            const addressMatch = message.content?.text?.match(\r\n                /omniflix[a-zA-Z0-9]{39}/\r\n            );\r\n            let address: string;\r\n\r\n            if (addressMatch) {\r\n                address = addressMatch[0];\r\n            } else {\r\n                address = await wallet.getAddress();\r\n                if (!address) {\r\n                    throw new Error(\"No wallet address available\");\r\n                }\r\n            }\r\n\r\n            elizaLogger.info(`Checking balance for address: ${address}`);\r\n\r\n            const balance = await client.getBalance(address, \"uflix\");\r\n            if (!balance) {\r\n                return {\r\n                    balance: 0,\r\n                    address: address,\r\n                };\r\n            }\r\n            const balanceInFLIX: number = Number(balance.amount) / 10 ** 6;\r\n\r\n            elizaLogger.info(`Balance of ${address} is ${balanceInFLIX} FLIX`);\r\n            return {\r\n                balance: balanceInFLIX,\r\n                address: address,\r\n            };\r\n        } catch (error) {\r\n            throw new Error(`Balance check failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    name: \"GET_BALANCE\",\r\n    description:\r\n        \"Retrieve the balance of a specified blockchain address in FLIX tokens.\",\r\n    similes: [\"check balance\", \"balance inquiry\", \"account balance\"],\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting GET_BALANCE handler...\");\r\n\r\n        try {\r\n            const action = new GetBalanceAction();\r\n            const { balance, address } = await action.getBalance(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully retrieved balance of ${address}\\nBalance: ${balance} FLIX`,\r\n                    content: {\r\n                        success: true,\r\n                        amount: balance,\r\n                        address: address,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error checking balance: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: balanceExamples as ActionExample[][],\r\n} as Action;\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"What is my balance of my wallet?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Sure thing, I'll check that for you.\",\r\n                action: \"GET_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you tell me how many FLIX I have in my wallet?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll look up your wallet balance now.\",\r\n                action: \"GET_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"What's my total FLIX holdings including staked amount?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll check both your regular and staked balances.\",\r\n                action: \"GET_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to check my balance\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Let me check that for you.\",\r\n                action: \"GET_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"How much FLIX do I have?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Let me check that for you.\",\r\n                action: \"GET_BALANCE\"\r\n            }\r\n        },\r\n    ]\r\n]","import {\r\n    elizaLogger,\r\n    composeContext,\r\n    Content,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    type Memory,\r\n    type State,\r\n    generateObjectDeprecated,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet.ts\";\r\nimport { BankProvider } from \"../../providers/bank.ts\";\r\nimport { bech32 } from \"bech32\";\r\nimport sendTokensExamples from \"../../action_examples/bank/send_tokens\";\r\n\r\nexport interface SendTokensContent extends Content {\r\n    recipient: string;\r\n    amount: string | number;\r\n    denom: string;\r\n}\r\n\r\ninterface validationResult {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nfunction isSendTokensContent(content: Content): validationResult {\r\n    let msg = \"\";\r\n    if (!content.recipient) {\r\n        msg += \"Please provide a recipient address for the transfer request.\";\r\n    } else {\r\n        try {\r\n            const { prefix } = bech32.decode(content.recipient as string);\r\n            if (prefix !== \"omniflix\") {\r\n                msg +=\r\n                    \"Please provide a valid Omniflix address for the transfer request.\";\r\n            }\r\n        } catch {\r\n            msg +=\r\n                \"Please provide a valid Omniflix address for the transfer request.\";\r\n        }\r\n    }\r\n    if (!content.amount) {\r\n        msg += \"Please provide an amount for the transfer request.\";\r\n    }\r\n    if (!content.denom) {\r\n        msg += \"Please provide a denom for the transfer request.\";\r\n    }\r\n    if (msg !== \"\") {\r\n        return {\r\n            success: false,\r\n            message: msg,\r\n        };\r\n    }\r\n    return {\r\n        success: true,\r\n        message: \"Transfer request is valid.\",\r\n    };\r\n}\r\n\r\nconst sendTokensTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"recipient\": \"omniflix1abc123...\",\r\n    \"amount\": \"100\",\r\n    \"denom\": \"uflix\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- recipient wallet address mentioned in the current message\r\n- amount to transfer mentioned in the current message\r\n- denom (uflix/FLIX/flix) mentioned in the current message\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport class SendTokensAction {\r\n    async transfer(\r\n        params: SendTokensContent,\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<string> {\r\n        try {\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const bankProvider = new BankProvider(wallet);\r\n            let url =\r\n                runtime.getSetting(\"OMNIFLIX_API_URL\") ||\r\n                process.env.OMNIFLIX_API_URL;\r\n            if (!url) {\r\n                url = \"https://rest.omniflix.network\";\r\n            }\r\n\r\n            if (params.denom === \"FLIX\" || params.denom === \"flix\") {\r\n                params.denom = \"uflix\";\r\n                if (typeof params.amount === \"number\") {\r\n                    params.amount = params.amount * 1000000;\r\n                } else if (typeof params.amount === \"string\") {\r\n                    params.amount = Number.parseInt(params.amount) * 1000000;\r\n                }\r\n            }\r\n\r\n            const txHash = await bankProvider.sendTokens(params.recipient, {\r\n                amount: params.amount.toString(),\r\n                denom: params.denom,\r\n            });\r\n\r\n            return txHash.transactionHash;\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildTransferDetails = async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n): Promise<SendTokensContent> => {\r\n\r\n    // if (!state) {\r\n    //     state = (await runtime.composeState(message)) as State;\r\n    // } else {\r\n    //     state = await runtime.updateRecentMessageState(state);\r\n    // }\r\n    \r\n    let currentState: State = state;\r\n    if (!currentState) {\r\n        currentState = (await runtime.composeState(message)) as State;\r\n    }\r\n    currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n    const transferContext = composeContext({\r\n        state: currentState,\r\n        template: sendTokensTemplate,\r\n    });\r\n\r\n    const content = await generateObjectDeprecated({\r\n        runtime,\r\n        context: transferContext,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n\r\n    const transferContent = content as SendTokensContent;\r\n\r\n    return transferContent;\r\n};\r\n\r\nexport default {\r\n    name: \"SEND_TOKENS\",\r\n    similes: [\r\n        \"send tokens\",\r\n        \"send FLIX\",\r\n        \"send FLIX to {address}\",\r\n        \"send FLIX to {address} from my omniflix address\",\r\n        \"send {amount} FLIX to {address}\",\r\n        \"send {amount} FLIX to {address} from my omniflix address\",\r\n    ],\r\n    description: \"Send tokens to a specified omniflix address.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting SEND_TOKENS handler...\");\r\n\r\n        const transferDetails = await buildTransferDetails(\r\n            runtime,\r\n            message,\r\n            state\r\n        );\r\n\r\n        const validationResult = isSendTokensContent(transferDetails);\r\n\r\n        if (!validationResult.success) {\r\n            if (callback) {\r\n                callback({\r\n                    text: validationResult.message,\r\n                    content: { error: validationResult.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const action = new SendTokensAction();\r\n            const txHash = await action.transfer(\r\n                transferDetails,\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            state = await runtime.updateRecentMessageState(state);\r\n\r\n            if (callback) {\r\n                let displayAmount = transferDetails.amount;\r\n                let displayDenom = transferDetails.denom;\r\n\r\n                if (transferDetails.denom === \"uflix\") {\r\n                    displayAmount =\r\n                        (transferDetails.amount as number) / 1000000;\r\n                    displayDenom = \"FLIX\";\r\n                }\r\n\r\n                callback({\r\n                    text: `Successfully transferred ${displayAmount} ${displayDenom} to ${transferDetails.recipient}, Transaction: ${txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: txHash,\r\n                        amount: displayAmount,\r\n                        recipient: transferDetails.recipient,\r\n                        denom: displayDenom,\r\n                        ...transferDetails,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: sendTokensTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: sendTokensExamples as ActionExample[][],\r\n} as Action;\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport { DeliverTxResponse } from \"@cosmjs/stargate\";\r\nimport { WalletProvider } from \"./wallet\";\r\nimport { Coin } from \"@cosmjs/stargate\";\r\n\r\nexport class BankProvider {\r\n    private wallet: WalletProvider;\r\n\r\n    constructor(wallet: WalletProvider) {\r\n        this.wallet = wallet;\r\n    }\r\n\r\n    async sendTokens(\r\n        recipient: string,\r\n        amount: Coin\r\n    ): Promise<DeliverTxResponse> {\r\n        try {\r\n            const address = await this.wallet.getAddress();\r\n            const client = await this.wallet.getClient();\r\n            if (!address) {\r\n                throw new Error(\"Could not get address\");\r\n            }\r\n            const tx = await client.sendTokens(\r\n                address,\r\n                recipient,\r\n                [amount],\r\n                \"auto\",\r\n                \"Sent tokens using Eliza\"\r\n            );\r\n            return tx;\r\n        } catch (e) {\r\n            elizaLogger.error(`Error in sendTokens: ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Send 100 FLIX to omniflix1abc123..., please let me know when it's done.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll send 100 FLIX to that address immediately.\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\", \r\n            content: { text: \"Send 50 FLIX to omniflix1abc123def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll send 50 FLIX to that address right away.\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Send tokens\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Please provide the amount of tokens you want to send and the recipient address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"100 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Please provide the recipient address for the transfer.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"omniflix1xyz789...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll send 100 FLIX to omniflix1xyz789... right away.\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Send to omniflix1def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Please specify how many tokens you would like to send.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"75 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll process the transfer of 75 FLIX to omniflix1def456...\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Send 1000 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Please provide the recipient address for the transfer.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"omniflix1invalid\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"Please provide a valid Omniflix address for the transfer request. The address should start with 'omniflix' and contain the correct number of characters.\" }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Send 500 FLIX to omniflix1ghi789...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll check your balance and process the transfer.\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"Error transferring tokens: Insufficient funds in the sender account\" }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you send some FLIX for me?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll help you send FLIX. Please specify how many tokens you want to send and the recipient address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to send 250 FLIX to omniflix1pqr456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll process the transfer of 250 FLIX to omniflix1pqr456...\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you send some tokens?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'm sorry, but I can't perform that action. Please provide a valid address and amount to send tokens.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Omniflix1abc123...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"You have provided recipient address. Please provide the amount of tokens to send.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"100 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll process the transfer of 100 FLIX to omniflix1abc123 using authz account.\",\r\n                action: \"SEND_TOKENS\"\r\n            }\r\n        }\r\n    ]\r\n]","import {\r\n    elizaLogger,\r\n    HandlerCallback,\r\n    type Memory,\r\n    type State,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport stakeBalanceExamples from \"../../action_examples/bank/stake_balance.ts\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet\";\r\n\r\nexport class GetStakeBalanceAction {\r\n    async getStakedBalance(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<{ balance: number; address: string }> {\r\n        try {\r\n            // Extract address from message if provided\r\n            const messageText = message.content?.text?.toLowerCase() || \"\";\r\n            const addressMatch = messageText.match(/omniflix[a-zA-Z0-9]{39}/);\r\n            let queryAddress: string;\r\n\r\n            if (addressMatch) {\r\n                // Use the address provided in the message\r\n                queryAddress = addressMatch[0];\r\n            } else {\r\n                // Fallback to wallet address from environment\r\n                const wallet: WalletProvider = await walletProvider.get(\r\n                    runtime,\r\n                    message,\r\n                    state\r\n                );\r\n                queryAddress = await wallet.getAddress();\r\n            }\r\n\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const client = await wallet.getClient();\r\n\r\n            elizaLogger.info(\r\n                `Checking staked balance for address: ${queryAddress}`\r\n            );\r\n\r\n            const balance = await client.getBalanceStaked(queryAddress);\r\n            if (!balance) {\r\n                return {\r\n                    balance: 0,\r\n                    address: queryAddress,\r\n                };\r\n            }\r\n            const balanceInFLIX: number = Number(balance.amount) / 10 ** 6;\r\n\r\n            elizaLogger.info(\r\n                `Staked balance of ${queryAddress} is ${balanceInFLIX} FLIX`\r\n            );\r\n            return {\r\n                balance: balanceInFLIX,\r\n                address: queryAddress,\r\n            };\r\n        } catch (error) {\r\n            throw new Error(`Staked balance check failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    name: \"GET_STAKE_BALANCE\",\r\n    description:\r\n        \"Retrieve the staked balance of a specified blockchain address in FLIX tokens.\",\r\n    similes: [\r\n        \"check staked balance\",\r\n        \"staked balance inquiry\",\r\n        \"account staked balance\",\r\n    ],\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting GET_STAKE_BALANCE handler...\");\r\n\r\n        try {\r\n            const action = new GetStakeBalanceAction();\r\n            const stakedBalance = await action.getStakedBalance(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully retrieved staked balance of ${stakedBalance.address}\\nStaked Balance: ${stakedBalance.balance} FLIX`,\r\n                    content: {\r\n                        success: true,\r\n                        amount: stakedBalance.balance,\r\n                        address: stakedBalance.address,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error checking staked balance: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: stakeBalanceExamples as ActionExample[][],\r\n} as Action;\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"What is my staked balance of my wallet?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Sure thing, I'll check that for you.\",\r\n                action: \"GET_STAKE_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Check delegated balance for my wallet\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll check delegated balance for that address right away.\",\r\n                action: \"GET_STAKE_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you tell me how many FLIX I have delegated?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll look up your delegated balance now.\",\r\n                action: \"GET_STAKE_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\", \r\n            content: { text: \"Show me the delegated balance of my wallet\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"Let me fetch that delegated balance information for you.\" }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"What's my total FLIX holdings including delegated amount?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll check both your regular and delegated balances.\",\r\n                action: \"GET_STAKE_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to check my delegated balance\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Let me check that for you.\",\r\n                action: \"GET_STAKE_BALANCE\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"How much FLIX do I have delegated ?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Let me check that for you.\",\r\n                action: \"GET_STAKE_BALANCE\"\r\n            }\r\n        },\r\n    ]\r\n]","import { type Action } from \"@elizaos/core\";\r\nimport balance from \"./balance.ts\";\r\nimport sendTokens from \"./send_tokens.ts\";\r\nimport stakeBalance from \"./stake_balance.ts\";\r\n\r\nexport const bankActions: Action[] = [balance, sendTokens, stakeBalance];\r\n\r\nexport default bankActions;\r\n","import {\r\n    elizaLogger,\r\n    composeContext,\r\n    Content,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    type Memory,\r\n    type State,\r\n    generateObjectDeprecated,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet.ts\";\r\nimport { StakingProvider } from \"../../providers/staking.ts\";\r\nimport { bech32 } from \"bech32\";\r\nimport delegateTokensExamples from \"../../action_examples/staking/delegate_token.ts\";\r\n\r\nexport interface DelegateTokensContent extends Content {\r\n    validator_address: string;\r\n    amount: string | number;\r\n    denom: string;\r\n    memo: string;\r\n}\r\n\r\ninterface validationResult {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nfunction isDelegateTokensContent(content: Content): validationResult {\r\n    let msg = \"\";\r\n    if (!content.validator_address) {\r\n        msg += \"Please provide a validator address for the delegation request.\";\r\n    } else {\r\n        try {\r\n            const { prefix } = bech32.decode(\r\n                content.validator_address as string\r\n            );\r\n            if (prefix !== \"omniflixvaloper\") {\r\n                msg +=\r\n                    \"Please provide a valid Omniflix validator address for the delegation request.\";\r\n            }\r\n        } catch (error) {\r\n            msg +=\r\n                \"Please provide a valid Omniflix validator address for the delegation request.\";\r\n        }\r\n    }\r\n    if (!content.amount) {\r\n        msg += \"Please provide an amount for the delegation request.\";\r\n    }\r\n    if (!content.denom) {\r\n        msg += \"Please provide a denom for the delegation request.\";\r\n    }\r\n    if (msg !== \"\") {\r\n        return {\r\n            success: false,\r\n            message: msg,\r\n        };\r\n    }\r\n    return {\r\n        success: true,\r\n        message: \"Delegation request is valid.\",\r\n    };\r\n}\r\n\r\nconst delegateTokensTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"validator_address\": \"omniflixvaloper...\",\r\n    \"amount\": \"100\",\r\n    \"denom\": \"uflix\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token delegation:\r\n- validator_address mentioned in the current message\r\n- amount to delegate mentioned in the current message\r\n- denom mentioned in the current message or recent messages (if any)\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport class DelegateTokensAction {\r\n    async delegate(\r\n        params: DelegateTokensContent,\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<string> {\r\n        try {\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const stakingProvider = new StakingProvider(wallet);\r\n\r\n            if (params.denom === \"FLIX\" || params.denom === \"flix\") {\r\n                params.denom = \"uflix\";\r\n                if (typeof params.amount === \"number\") {\r\n                    params.amount = params.amount * 1000000;\r\n                } else if (typeof params.amount === \"string\") {\r\n                    params.amount = Number.parseInt(params.amount) * 1000000;\r\n                }\r\n            }\r\n\r\n            const txHash = await stakingProvider.delegate(\r\n                params.validator_address,\r\n                {\r\n                    amount: params.amount.toString(),\r\n                    denom: params.denom,\r\n                }\r\n            );\r\n\r\n            return txHash.transactionHash;\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildDelegateTokensContent = async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n): Promise<DelegateTokensContent> => {\r\n\r\n    // if (!state) {\r\n    //     state = (await runtime.composeState(message)) as State;\r\n    // } else {\r\n    //     state = await runtime.updateRecentMessageState(state);\r\n    // }\r\n\r\n    let currentState: State = state;\r\n    if (!currentState) {\r\n        currentState = (await runtime.composeState(message)) as State;\r\n    }\r\n    currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n    const delegateContext = composeContext({\r\n        state: currentState,\r\n        template: delegateTokensTemplate,\r\n    });\r\n\r\n    const content = await generateObjectDeprecated({\r\n        runtime,\r\n        context: delegateContext,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n\r\n    const delegateContent = content as DelegateTokensContent;\r\n\r\n    return delegateContent;\r\n};\r\n\r\nexport default {\r\n    name: \"TOKENS_DELEGATE\",\r\n    similes: [\r\n        \"^delegate\\\\b(?!.*undelegate)(?!.*redelegate)\",\r\n        \"^delegate_tokens\\\\b(?!.*undelegate)(?!.*redelegate)\",\r\n        \"^delegate_FLIX\\\\b(?!.*undelegate)(?!.*redelegate)\",\r\n        \"^delegate\\\\s+FLIX\\\\s+to(?!.*undelegate)(?!.*redelegate)\",\r\n    ],\r\n    description: \"Delegate tokens to a specified omniflix validator address.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting TOKENS_DELEGATE handler...\");\r\n\r\n        const delegateContent = await buildDelegateTokensContent(\r\n            runtime,\r\n            message,\r\n            state\r\n        );\r\n\r\n        const validationResult = isDelegateTokensContent(delegateContent);\r\n        if (!validationResult.success) {\r\n            if (callback) {\r\n                callback({\r\n                    text: validationResult.message,\r\n                    content: { error: validationResult.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const action = new DelegateTokensAction();\r\n            const txHash = await action.delegate(\r\n                delegateContent,\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            state = await runtime.updateRecentMessageState(state);\r\n\r\n            if (callback) {\r\n                if (delegateContent.denom === \"uflix\") {\r\n                    delegateContent.amount =\r\n                        (delegateContent.amount as number) / 1000000;\r\n                }\r\n                callback({\r\n                    text: `Successfully delegated ${delegateContent.amount} FLIX to ${delegateContent.validator_address}\\nTxHash: ${txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: txHash,\r\n                        amount: delegateContent.amount,\r\n                        validator_address: delegateContent.validator_address,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error occurred during TOKENS_DELEGATE please try again later with valid details.`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: delegateTokensTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: delegateTokensExamples as ActionExample[][],\r\n} as Action;\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport { DeliverTxResponse } from \"@cosmjs/stargate\";\r\nimport { WalletProvider } from \"./wallet\";\r\nimport { Coin } from \"@cosmjs/stargate\";\r\n\r\nexport class StakingProvider {\r\n    private wallet: WalletProvider;\r\n\r\n    constructor(wallet: WalletProvider) {\r\n        this.wallet = wallet;\r\n    }\r\n\r\n    async delegate(\r\n        validator_address: string,\r\n        amount: Coin\r\n    ): Promise<DeliverTxResponse> {\r\n        const address = await this.wallet.getAddress();\r\n        if (!address) {\r\n            throw new Error(\"Could not get address\");\r\n        }\r\n        try {\r\n            const client = await this.wallet.getClient();\r\n            const tx = await client.delegateTokens(\r\n                address,\r\n                validator_address,\r\n                amount,\r\n                \"auto\",\r\n                \"Delegated tokens using Eliza\"\r\n            );\r\n            return tx;\r\n        } catch (e) {\r\n            elizaLogger.error(`Error in delegate: ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async undelegate(\r\n        validator_address: string,\r\n        amount: Coin\r\n    ): Promise<DeliverTxResponse> {\r\n        const address = await this.wallet.getAddress();\r\n        if (!address) {\r\n            throw new Error(\"Could not get address\");\r\n        }\r\n        try {\r\n            const client = await this.wallet.getClient();\r\n            const tx = await client.undelegateTokens(\r\n                address,\r\n                validator_address,\r\n                amount,\r\n                \"auto\",\r\n                \"Undelegated tokens using Eliza\"\r\n            );\r\n            return tx;\r\n        } catch (e) {\r\n            elizaLogger.error(`Error in undelegate: ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async redelegate(\r\n        validator_src_address: string,\r\n        validator_dst_address: string,\r\n        amount: Coin\r\n    ): Promise<DeliverTxResponse> {\r\n        const address = await this.wallet.getAddress();\r\n        if (!address) {\r\n            throw new Error(\"Could not get address\");\r\n        }\r\n\r\n        const msg = {\r\n            typeUrl: \"/cosmos.staking.v1beta1.MsgBeginRedelegate\",\r\n            value: {\r\n                delegatorAddress: address.trim(),\r\n                validatorSrcAddress: validator_src_address.trim(),\r\n                validatorDstAddress: validator_dst_address.trim(),\r\n                amount: amount,\r\n            },\r\n        };\r\n        try {\r\n            const client = await this.wallet.getClient();\r\n            const tx = await client.signAndBroadcast(\r\n                address,\r\n                [msg],\r\n                \"auto\",\r\n                \"Redelegated tokens using Eliza\"\r\n            );\r\n            return tx;\r\n        } catch (e) {\r\n            elizaLogger.error(`Error in redelegate: ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async cancelUnbondingDelegation(\r\n        validator_address: string,\r\n        creation_height: number,\r\n        amount: Coin\r\n    ): Promise<DeliverTxResponse> {\r\n        const address = await this.wallet.getAddress();\r\n        if (!address) {\r\n            throw new Error(\"Could not get address\");\r\n        }\r\n\r\n        const msg = {\r\n            typeUrl: \"/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation\",\r\n            value: {\r\n                delegatorAddress: address.trim(),\r\n                validatorAddress: validator_address.trim(),\r\n                amount: amount,\r\n                creationHeight: BigInt(creation_height),\r\n            },\r\n        };\r\n\r\n        try {\r\n            const client = await this.wallet.getClient();\r\n            const tx = await client.signAndBroadcast(\r\n                address.trim(),\r\n                [msg],\r\n                \"auto\",\r\n                \"Cancelled unbonding delegation using Eliza\"\r\n            );\r\n            return tx;\r\n        } catch (e) {\r\n            elizaLogger.error(`Error in cancelUnbondingDelegation: ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Delegate 100 FLIX to omniflixvaloper1abc123..., please let me know when it's done.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll delegate 100 FLIX to that address right away.\",\r\n                action: \"DELEGATE_TOKEN\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\", \r\n            content: { text: \"I want to delegate 50 FLIX to validator omniflixvaloper1abc123def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll process your delegation request of 50 FLIX now.\",\r\n                action: \"DELEGATE_TOKEN\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you delegate 75 FLIX to omniflixvaloper1xyz789...\" } \r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll process your delegation request of 75 FLIX now.\",\r\n                action: \"DELEGATE_TOKEN\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"delegate FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I need more information to process your delegation request. Please provide:\\n1. The amount of FLIX you want to delegate\\n2. The validator address (starting with 'omniflixvaloper')\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to delegate 200 FLIX to omniflixvaloper1def...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll process your delegation request of 200 FLIX now.\",\r\n                action: \"DELEGATE_TOKEN\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"delegate 1000000 FLIX to omniflixvaloper1ghi...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"Processing your delegation of 1000000 FLIX now.\",\r\n                action: \"DELEGATE_TOKEN\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'm sorry, but it seems like you don't have enough FLIX to delegate. Please check your balance and try again.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Okay, can you delegate 100 FLIX instead?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll process your delegation request of 100 FLIX now.\",\r\n                action: \"DELEGATE_TOKEN\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"delegate 100 FLIX to invalidaddress123\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"The validator address you provided is invalid. A valid validator address should start with 'omniflixvaloper'. Please provide a correct validator address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"How do I find validator addresses?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"You can find validator addresses on the OmniFlix Network explorer or through the official OmniFlix staking interface. Would you like me to provide more information about finding validators?\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ]\r\n]","import {\r\n    elizaLogger,\r\n    composeContext,\r\n    Content,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    type Memory,\r\n    type State,\r\n    generateObjectDeprecated,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet.ts\";\r\nimport { StakingProvider } from \"../../providers/staking.ts\";\r\nimport { bech32 } from \"bech32\";\r\nimport undelegateExamples from \"../../action_examples/staking/undelegate_token.ts\";\r\n\r\nexport interface UndelegateTokensContent extends Content {\r\n    validator_address: string;\r\n    amount: string | number;\r\n    denom: string;\r\n    memo: string;\r\n}\r\n\r\ninterface validationResult {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nfunction isUndelegateTokensContent(content: Content): validationResult {\r\n    let msg = \"\";\r\n    if (!content.validator_address) {\r\n        msg +=\r\n            \"Please provide a validator address for the undelegation request.\";\r\n    } else {\r\n        try {\r\n            const { prefix } = bech32.decode(\r\n                content.validator_address as string\r\n            );\r\n            if (prefix !== \"omniflixvaloper\") {\r\n                msg +=\r\n                    \"Please provide a valid Omniflix validator address for the undelegation request.\";\r\n            }\r\n        } catch {\r\n            msg +=\r\n                \"Please provide a valid Omniflix validator address for the undelegation request.\";\r\n        }\r\n    }\r\n    if (!content.amount) {\r\n        msg += \"Please provide an amount for the undelegation request.\";\r\n    }\r\n    if (!content.denom) {\r\n        msg += \"Please provide a denom for the undelegation request.\";\r\n    }\r\n    if (msg !== \"\") {\r\n        return {\r\n            success: false,\r\n            message: msg,\r\n        };\r\n    }\r\n    return {\r\n        success: true,\r\n        message: \"Undelegation request is valid.\",\r\n    };\r\n}\r\n\r\nconst undelegateTokensTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"validator_address\": \"omniflixvaloper...\",\r\n    \"amount\": \"100\",\r\n    \"denom\": \"FLIX\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token undelegation:\r\n- validator_address mentioned in the current message\r\n- amount to undelegate mentioned in the current message\r\n- denom(uflix/flix/FLIX) mentioned in the current message or recent messages (if any)\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport class UndelegateTokensAction {\r\n    async undelegate(\r\n        params: UndelegateTokensContent,\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<string> {\r\n        try {\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const stakingProvider = new StakingProvider(wallet);\r\n            if (params.denom === \"FLIX\" || params.denom === \"flix\") {\r\n                params.denom = \"uflix\";\r\n                if (typeof params.amount === \"number\") {\r\n                    params.amount = params.amount * 1000000;\r\n                } else if (typeof params.amount === \"string\") {\r\n                    params.amount = Number.parseInt(params.amount) * 1000000;\r\n                }\r\n            }\r\n\r\n            const txHash = await stakingProvider.undelegate(\r\n                params.validator_address,\r\n                {\r\n                    amount: params.amount.toString(),\r\n                    denom: params.denom,\r\n                }\r\n            );\r\n\r\n            return txHash.transactionHash;\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildUndelegateTokensContent = async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n): Promise<UndelegateTokensContent> => {\r\n    // if (!state) {\r\n    //     state = (await runtime.composeState(message)) as State;\r\n    // } else {\r\n    //     state = await runtime.updateRecentMessageState(state);\r\n    // }\r\n\r\n    let currentState: State = state;\r\n    if (!currentState) {\r\n        currentState = (await runtime.composeState(message)) as State;\r\n    }\r\n    currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n    const undelegateContext = composeContext({\r\n        state: currentState,\r\n        template: undelegateTokensTemplate,\r\n    });\r\n\r\n    const content = await generateObjectDeprecated({\r\n        runtime,\r\n        context: undelegateContext,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n\r\n    const undelegateContent = content as UndelegateTokensContent;\r\n\r\n    return undelegateContent;\r\n};\r\n\r\nexport default {\r\n    name: \"TOKENS_UNDELEGATE\",\r\n    similes: [\r\n        \"^undelegate\\\\b\",\r\n        \"^undelegate_tokens\\\\b\",\r\n        \"^undelegate_FLIX\\\\b\",\r\n        \"^undelegate\\\\s+FLIX\\\\s+from\",\r\n        \"^remove_delegation\",\r\n        \"^withdraw_delegation\",\r\n    ],\r\n    description:\r\n        \"Undelegate tokens from a specified omniflix validator address.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting TOKENS_UNDELEGATE handler...\");\r\n\r\n        const undelegateContent = await buildUndelegateTokensContent(\r\n            runtime,\r\n            message,\r\n            state\r\n        );\r\n\r\n        const validationResult = isUndelegateTokensContent(undelegateContent);\r\n\r\n        if (!validationResult.success) {\r\n            if (callback) {\r\n                callback({\r\n                    text: validationResult.message,\r\n                    content: { error: validationResult.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const action = new UndelegateTokensAction();\r\n            const txHash = await action.undelegate(\r\n                undelegateContent,\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            state.memo = undelegateContent.memo;\r\n\r\n            state = await runtime.updateRecentMessageState(state);\r\n\r\n            if (callback) {\r\n                if (undelegateContent.denom === \"uflix\") {\r\n                    undelegateContent.amount =\r\n                        (undelegateContent.amount as number) / 1000000;\r\n                }\r\n                callback({\r\n                    text: `Successfully undelegated ${undelegateContent.amount} FLIX from ${undelegateContent.validator_address}\\nTxHash: ${txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: txHash,\r\n                        amount: undelegateContent.amount,\r\n                        validator_address: undelegateContent.validator_address,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: undelegateTokensTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: undelegateExamples as ActionExample[][],\r\n} as Action;\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"undelegate 100 FLIX from omniflixvaloper1abc123..., please let me know when it's done.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll undelegate 100 FLIX from that address right away.\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'm sorry, but it seems that validator omniflixvaloper1xyz... is not a valid validator. Please provide a valid validator address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"omniflixvaloper1abc123...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll help you undelegate 100 FLIX from omniflixvaloper1abc123...\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"When will I receive my tokens?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Your tokens will be available after a 21-day unbonding period. This is a network rule to maintain stability. I'll notify you when they're ready to use.\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\", \r\n            content: { text: \"I want to undelegate 50 FLIX from validator omniflixvaloper1abc123def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll help you undelegate 50 FLIX from that validator. Processing your request now.\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to undelegate another 30 FLIX from the same validator\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'm sorry, but it seems that the amount you want to undelegate is greater than your current delegation. Please provide a valid amount.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"10 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll help you undelegate 10 FLIX from omniflixvaloper1abc123def456...\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"undelegate FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I need more information to process your undelegation request. Please provide:\\n1. The amount of FLIX you want to undelegate\\n2. The validator address (starting with 'omniflixvaloper')\" }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to undelegate 200 FLIX from omniflixvaloper1xyz...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Processing your undelegation of 200 FLIX now.\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Let me undelegate 100 more FLIX from omniflixvaloper1xyz...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Processing the undelegation of 100 FLIX now.\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"undelegate 100 FLIX from invalidaddress123\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"The validator address you provided (invalidaddress123) is invalid. A valid validator address should start with 'omniflixvaloper'. Please provide a correct validator address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"How can I find the correct validator address?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"You can find validator addresses on the OmniFlix Network explorer or through the official OmniFlix staking interface. Would you like me to provide more information about finding validators?\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"undelegate 1000000 FLIX from omniflixvaloper1ghi...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I cannot process this undelegation. The requested amount (1000000 FLIX) exceeds your delegated balance with this validator. Please check your delegated balance and try again with a smaller amount.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"What is my delegated balance with that validator?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Your delegated balance with validator omniflixvaloper1ghi... is 10000 FLIX. Would you like to undelegate a smaller amount?\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Yes, let me undelegate 5000 FLIX instead\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Processing the undelegation of 5000 FLIX now.\",\r\n                action: \"TOKENS_UNDELEGATE\"\r\n            }\r\n        }\r\n    ]\r\n]","import {\r\n    elizaLogger,\r\n    composeContext,\r\n    Content,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    type Memory,\r\n    type State,\r\n    generateObjectDeprecated,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet.ts\";\r\nimport { StakingProvider } from \"../../providers/staking.ts\";\r\nimport { bech32 } from \"bech32\";\r\nimport redelegateExamples from \"../../action_examples/staking/redelegate.ts\";\r\n\r\nexport interface RedelegateTokensContent extends Content {\r\n    validator_src_address: string;\r\n    validator_dst_address: string;\r\n    amount: string | number;\r\n    denom: string;\r\n    memo: string;\r\n}\r\n\r\ninterface validationResult {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nfunction isRedelegateTokensContent(content: Content): validationResult {\r\n    let msg = \"\";\r\n    if (!content.validator_src_address) {\r\n        msg +=\r\n            \"Please provide a validator source address for the redelegation request.\";\r\n    } else {\r\n        try {\r\n            const { prefix } = bech32.decode(\r\n                content.validator_src_address as string\r\n            );\r\n            if (prefix !== \"omniflixvaloper\") {\r\n                msg +=\r\n                    \"Please provide a valid Omniflix validator source address for the redelegation request.\";\r\n            }\r\n        } catch {\r\n            msg +=\r\n                \"Please provide a valid Omniflix validator source address for the redelegation request.\";\r\n        }\r\n    }\r\n    if (!content.validator_dst_address) {\r\n        msg +=\r\n            \"Please provide a validator destination address for the redelegation request.\";\r\n    } else {\r\n        try {\r\n            const { prefix } = bech32.decode(\r\n                content.validator_dst_address as string\r\n            );\r\n            if (prefix !== \"omniflixvaloper\") {\r\n                msg +=\r\n                    \"Please provide a valid Omniflix validator destination address for the redelegation request.\";\r\n            }\r\n        } catch (error) {\r\n            msg +=\r\n                \"Please provide a valid Omniflix validator destination address for the redelegation request.\";\r\n        }\r\n    }\r\n    if (!content.amount) {\r\n        msg += \"Please provide an amount for the redelegation request.\";\r\n    }\r\n    if (!content.denom) {\r\n        msg += \"Please provide a denom for the redelegation request.\";\r\n    }\r\n    if (msg !== \"\") {\r\n        return {\r\n            success: false,\r\n            message: msg,\r\n        };\r\n    }\r\n    return {\r\n        success: true,\r\n        message: \"Redelegation request is valid.\",\r\n    };\r\n}\r\n\r\nconst redelegateTokensTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"validator_src_address\": \"omniflixvaloper...\",\r\n    \"validator_dst_address\": \"omniflixvaloper...\",\r\n    \"amount\": \"100\",\r\n    \"denom\": \"uflix\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token redelegation:\r\n- validator_src_address mentioned in the current message\r\n- validator_dst_address mentioned in the current message\r\n- amount to redelegate mentioned in the current message\r\n- denom(uflix/flix/FLIX) mentioned in the current message or recent messages (if any)\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport class RedelegateTokensAction {\r\n    async redelegate(\r\n        params: RedelegateTokensContent,\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<string> {\r\n        try {\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const stakingProvider = new StakingProvider(wallet);\r\n\r\n            if (params.denom === \"FLIX\" || params.denom === \"flix\") {\r\n                params.denom = \"uflix\";\r\n                if (typeof params.amount === \"number\") {\r\n                    params.amount = params.amount * 1000000;\r\n                } else if (typeof params.amount === \"string\") {\r\n                    params.amount = Number.parseInt(params.amount) * 1000000;\r\n                }\r\n            }\r\n\r\n            const txHash = await stakingProvider.redelegate(\r\n                params.validator_src_address,\r\n                params.validator_dst_address,\r\n                {\r\n                    amount: params.amount.toString(),\r\n                    denom: params.denom,\r\n                }\r\n            );\r\n\r\n            return txHash.transactionHash;\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildRedelegateDetails = async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n): Promise<RedelegateTokensContent> => {\r\n    // if (!state) {\r\n    //     state = (await runtime.composeState(message)) as State;\r\n    // } else {\r\n    //     state = await runtime.updateRecentMessageState(state);\r\n    // }\r\n    let currentState: State = state;\r\n    if (!currentState) {\r\n        currentState = (await runtime.composeState(message)) as State;\r\n    }\r\n    currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n    const redelegateContext = composeContext({\r\n        state: currentState,\r\n        template: redelegateTokensTemplate,\r\n    });\r\n\r\n    const content = await generateObjectDeprecated({\r\n        runtime,\r\n        context: redelegateContext,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n\r\n    const redelegateContent = content as RedelegateTokensContent;\r\n\r\n    return redelegateContent;\r\n};\r\n\r\nexport default {\r\n    name: \"TOKENS_REDELEGATE\",\r\n    similes: [\r\n        \"^redelegate\\\\b(?!.*undelegate)(?!.*delegate\\\\b)\",\r\n        \"^redelegate_tokens\\\\b(?!.*undelegate)(?!.*delegate\\\\b)\",\r\n        \"^redelegate_FLIX\\\\b(?!.*undelegate)(?!.*delegate\\\\b)\",\r\n        \"^redelegate\\\\s+FLIX\\\\s+to(?!.*undelegate)(?!.*delegate\\\\b)\",\r\n    ],\r\n    description: \"Redelegate tokens to a specified omniflix validator address.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting TOKENS_REDELEGATE handler...\");\r\n\r\n        const redelegateDetails = await buildRedelegateDetails(\r\n            runtime,\r\n            message,\r\n            state\r\n        );\r\n\r\n        const validationResult = isRedelegateTokensContent(redelegateDetails);\r\n\r\n        if (!validationResult.success) {\r\n            if (callback) {\r\n                callback({\r\n                    text: validationResult.message,\r\n                    content: { error: validationResult.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const action = new RedelegateTokensAction();\r\n            const txHash = await action.redelegate(\r\n                redelegateDetails,\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            state = await runtime.updateRecentMessageState(state);\r\n\r\n            if (callback) {\r\n                if (redelegateDetails.denom === \"uflix\") {\r\n                    redelegateDetails.amount =\r\n                        (redelegateDetails.amount as number) / 1000000;\r\n                }\r\n                callback({\r\n                    text: `Successfully delegated ${redelegateDetails.amount} FLIX from ${redelegateDetails.validator_src_address} to ${redelegateDetails.validator_dst_address}\\nTxHash: ${txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: txHash,\r\n                        amount: redelegateDetails.amount,\r\n                        validator_src_address:\r\n                            redelegateDetails.validator_src_address,\r\n                        validator_dst_address:\r\n                            redelegateDetails.validator_dst_address,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error redelegating tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: redelegateTokensTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: redelegateExamples as ActionExample[][],\r\n} as Action;\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Redelegate 100 FLIX from omniflixvaloper1abc123... to omniflixvaloper1def456..., please let me know when it's done.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll redelegate 100 FLIX from that address right away.\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'm sorry, but it seems that validator omniflixvaloper1xyz... is not a valid validator. Please provide a valid validator address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"omniflixvaloper1abc123...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll help you redelegate 100 FLIX from omniflixvaloper1abc123... to omniflixvaloper1def456...\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"How long until I can redelegate these tokens again?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"There is a 21-day waiting period before you can redelegate these tokens again. This is a network rule to maintain stability.\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\", \r\n            content: { text: \"I want to redelegate 50 FLIX from validator omniflixvaloper1abc123... to validator omniflixvaloper1def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll help you redelegate 50 FLIX from that validator. Processing your request now.\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'm sorry, but the amount of FLIX you provided is invalid. Please provide a valid amount of FLIX.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"50 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you redelegate 50 FLIX from omniflixvaloper1abc123... to omniflixvaloper1def456...\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you redelegate 75 FLIX from omniflixvaloper1abc123... to omniflixvaloper1xyz789...\" } \r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll process your redelegation request of 75 FLIX now.\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"redelegate FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I need more information to process your redelegation request. Please provide:\\n1. The amount of FLIX you want to redelegate\\n2. The source validator address (starting with 'omniflixvaloper')\\n3. The destination validator address (starting with 'omniflixvaloper')\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I want to redelegate 200 FLIX from omniflixvaloper1xyz... to omniflixvaloper1pqr...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Processing your redelegation of 200 FLIX now.\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"redelegate 100 FLIX from invalidaddress123 to omniflixvaloper1def...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"The source validator address you provided (invalidaddress123) is invalid. A valid validator address should start with 'omniflixvaloper'. Please provide a correct validator address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"How can I find the correct validator address?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"You can find validator addresses on the OmniFlix Network explorer or through the official OmniFlix staking interface. Would you like me to provide more information about finding validators?\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"redelegate 1000000 FLIX from omniflixvaloper1abc... to omniflixvaloper1def...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I cannot process this redelegation. The requested amount (1000000 FLIX) exceeds your delegated balance with the source validator. Please check your delegated balance and try again with a smaller amount.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"What is my delegated balance?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Sure, Let me check your delegated balance.\",\r\n                action: \"GET_BALANCE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"redelegate 50 FLIX from omniflixvaloper1abc... to omniflixvaloper1def...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll help you redelegate 50 FLIX from omniflixvaloper1abc... to omniflixvaloper1def...\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I apologize, but it seems these tokens were redelegated recently. You need to wait for the 21-day cooling period to complete before redelegating these tokens again.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can I delegate to a different validator instead?\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Yes, you can make a new delegation to any validator using your available (non-staked) FLIX tokens. Would you like to do that instead?\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Yes, I want to delegate to a different validator.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"Great! I'll help you delegate to a different validator. Please provide the new validator address and the amount of FLIX you want to delegate.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"omniflixvaloper1abc123...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll help you delegate 50 FLIX to omniflixvaloper1abc123...\",\r\n                action: \"TOKENS_REDELEGATE\"\r\n            }\r\n        }\r\n    ]\r\n]","import {\r\n    elizaLogger,\r\n    composeContext,\r\n    Content,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    type Memory,\r\n    type State,\r\n    generateObjectDeprecated,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet.ts\";\r\nimport { StakingProvider } from \"../../providers/staking.ts\";\r\nimport { bech32 } from \"bech32\";\r\nimport cancelUnbondingExamples from \"../../action_examples/staking/cancel_unbonding.ts\";\r\n\r\nexport interface CancelUnbondingContent extends Content {\r\n    validator_address: string;\r\n    creation_height: number;\r\n    amount: string | number;\r\n    denom: string;\r\n    memo: string;\r\n}\r\n\r\ninterface validationResult {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nfunction isCancelUnbondingContent(content: Content): validationResult {\r\n    let msg = \"\";\r\n    if (!content.validator_address) {\r\n        msg += \"Missing validator address.\";\r\n    } else {\r\n        try {\r\n            const { prefix } = bech32.decode(\r\n                content.validator_address as string\r\n            );\r\n            if (prefix !== \"omniflixvaloper\") {\r\n                msg += \"Invalid validator address.\";\r\n            }\r\n        } catch (error) {\r\n            msg += \"Invalid validator address.\";\r\n        }\r\n    }\r\n    if (!content.amount) {\r\n        msg += \"Missing amount.\";\r\n    }\r\n    if (!content.denom) {\r\n        msg += \"Missing denom.\";\r\n    }\r\n    if (!content.creation_height) {\r\n        msg += \"Missing creation height of unbonding delegation.\";\r\n    }\r\n    if (msg !== \"\") {\r\n        return {\r\n            success: false,\r\n            message: msg,\r\n        };\r\n    }\r\n    return {\r\n        success: true,\r\n        message: \"Unbonding delegation request is valid.\",\r\n    };\r\n}\r\n\r\nconst cancelUnbondingTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"validator_address\": \"omniflixvaloper...\",\r\n    \"amount\": \"100\",\r\n    \"denom\": \"uflix\",\r\n    \"creation_height\": 123456\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested unbonding delegation cancellation:\r\n- validator_address mentioned in the current message\r\n- amount to unbond mentioned in the current message\r\n- denom mentioned in the current message or recent messages (if any)\r\n- creation_height mentioned in the current message or recent messages (if any)\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport class CancelUnbondingAction {\r\n    async cancelUnbonding(\r\n        params: CancelUnbondingContent,\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<string> {\r\n        try {\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const stakingProvider = new StakingProvider(wallet);\r\n\r\n            if (params.denom === \"FLIX\" || params.denom === \"flix\") {\r\n                params.denom = \"uflix\";\r\n                if (typeof params.amount === \"number\") {\r\n                    params.amount = params.amount * 1000000;\r\n                } else if (typeof params.amount === \"string\") {\r\n                    params.amount = Number.parseInt(params.amount) * 1000000;\r\n                }\r\n            }\r\n\r\n            const txHash = await stakingProvider.cancelUnbondingDelegation(\r\n                params.validator_address,\r\n                params.creation_height,\r\n                {\r\n                    amount: params.amount.toString(),\r\n                    denom: params.denom,\r\n                }\r\n            );\r\n\r\n            return txHash.transactionHash;\r\n        } catch (error) {\r\n            throw new Error(\r\n                `Unbonding delegation cancellation failed: ${error.message}`\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst buildCancelUnbondingContent = async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n): Promise<CancelUnbondingContent> => {\r\n    // if (!state) {\r\n    //     state = (await runtime.composeState(message)) as State;\r\n    // } else {\r\n    //     state = await runtime.updateRecentMessageState(state);\r\n    // }\r\n    \r\n    let currentState: State = state;\r\n    if (!currentState) {\r\n        currentState = (await runtime.composeState(message)) as State;\r\n    }\r\n    currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n    const cancelUnbondingContext = composeContext({\r\n        state: currentState,\r\n        template: cancelUnbondingTemplate,\r\n    });\r\n\r\n    const content = await generateObjectDeprecated({\r\n        runtime,\r\n        context: cancelUnbondingContext,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n\r\n    const cancelUnbondingContent = content as CancelUnbondingContent;\r\n\r\n    return cancelUnbondingContent;\r\n};\r\n\r\nexport default {\r\n    name: \"CANCEL_UNBONDING\",\r\n    similes: [\"^cancel$\", \"^cancel_unbonding$\", \"^cancel unbonding\"],\r\n    description:\r\n        \"Cancel unbonding delegation to a specified omniflix validator address.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting CANCEL_UNBONDING handler...\");\r\n\r\n        const cancelUnbondingContent = await buildCancelUnbondingContent(\r\n            runtime,\r\n            message,\r\n            state\r\n        );\r\n\r\n        const validationResult = isCancelUnbondingContent(\r\n            cancelUnbondingContent\r\n        );\r\n        if (!validationResult.success) {\r\n            if (callback) {\r\n                callback({\r\n                    text: validationResult.message,\r\n                    content: { error: validationResult.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const action = new CancelUnbondingAction();\r\n            const txHash = await action.cancelUnbonding(\r\n                cancelUnbondingContent,\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            state = await runtime.updateRecentMessageState(state);\r\n\r\n            if (callback) {\r\n                if (cancelUnbondingContent.denom === \"uflix\") {\r\n                    cancelUnbondingContent.amount =\r\n                        (cancelUnbondingContent.amount as number) / 1000000;\r\n                }\r\n                callback({\r\n                    text: `Successfully cancelled unbonding delegation of ${cancelUnbondingContent.amount} ${cancelUnbondingContent.denom} to ${cancelUnbondingContent.validator_address}\\nTxHash: ${txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: txHash,\r\n                        amount: cancelUnbondingContent.amount,\r\n                        validator_address:\r\n                            cancelUnbondingContent.validator_address,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error occurred during TOKENS_UNBONDING please try again later with valid details.`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: cancelUnbondingTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: cancelUnbondingExamples as ActionExample[][],\r\n} as Action;\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Cancel unbonding delegation of 100 FLIX to omniflixvaloper1abc123..., please let me know when it's done.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll cancel unbonding delegation of 100 FLIX to that validator right away.\", \r\n                action: \"CANCEL_UNBONDING\" \r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\", \r\n            content: { text: \"I want to cancel unbonding delegation of 50 FLIX to validator omniflixvaloper1abc123def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll help you cancel unbonding delegation of 50 FLIX to that validator.\",\r\n                action: \"CANCEL_UNBONDING\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you cancel unbonding delegation of 75 FLIX to omniflixvaloper1xyz789...\" } \r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll proceed to cancel unbonding delegation of 75 FLIX to that address.\", \r\n                action: \"CANCEL_UNBONDING\" \r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Cancel unbonding\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll help you cancel an unbonding delegation. Please provide:\\n1. The amount of FLIX to cancel unbonding\\n2. The validator address\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"100 FLIX\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Please provide the validator address.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"omniflixvaloper1abc123...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll proceed to cancel unbonding delegation of 100 FLIX to that address.\", \r\n                action: \"CANCEL_UNBONDING\" \r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Cancel unbonding of -50 FLIX to omniflixvaloper1abc123...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"Invalid amount. The amount of FLIX to cancel unbonding must be a positive number.\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Cancel unbonding of 100 FLIX to invalid_validator\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"The validator address 'invalid_validator' is not a valid Omniflix validator address. Please provide a valid validator address starting with 'omniflixvaloper1'.\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Cancel unbonding of 50 FLIX to omniflixvaloper1def456...\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"I'll proceed to cancel unbonding delegation of 50 FLIX to that address.\", \r\n                action: \"CANCEL_UNBONDING\" \r\n            }\r\n        }\r\n    ]\r\n]","import delegateTokens from './delegate_token.ts';\r\nimport undelegateTokens from './undelegate_token.ts';\r\nimport redelegate from './redelegate.ts';\r\nimport cancelUnbonding from './cancel_unbonding.ts';\r\n\r\nexport const stakingActions = [\r\n    redelegate,\r\n    undelegateTokens,\r\n    delegateTokens,\r\n    cancelUnbonding,\r\n]\r\n\r\nexport default stakingActions;\r\n","import {\r\n    elizaLogger,\r\n    Content,\r\n    HandlerCallback,\r\n    type Memory,\r\n    type State,\r\n    ActionExample,\r\n    Action,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider, walletProvider } from \"../../providers/wallet.ts\";\r\nimport { GovProvider } from \"../../providers/gov.ts\";\r\nimport { VoteOption } from \"cosmjs-types/cosmos/gov/v1beta1/gov\";\r\nimport voteOnProposalExamples from \"../../action_examples/gov/vote_on_proposal.ts\";\r\n\r\nexport interface VoteOnProposalContent extends Content {\r\n    proposal_id: string;\r\n    vote: VoteOption;\r\n    memo: string;\r\n}\r\n\r\ninterface validationResult {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nfunction isVoteOnProposalContent(content: Content): validationResult {\r\n    let msg = \"\";\r\n    if (!content.proposal_id) {\r\n        msg += \"Please provide a proposal id for the vote request.\";\r\n    }\r\n    if (!content.vote) {\r\n        msg += \"Please provide a vote option for the vote request.\";\r\n    }\r\n    if (msg !== \"\") {\r\n        return {\r\n            success: false,\r\n            message: msg,\r\n        };\r\n    }\r\n    return {\r\n        success: true,\r\n        message: \"Vote on proposal request is valid.\",\r\n    };\r\n}\r\n\r\nconst voteOnProposalTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"proposal_id\": \"1\",\r\n    \"vote\": \"VOTE_OPTION_YES\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested vote on proposal:\r\n- proposal_id mentioned in the current message\r\n- deduce the vote option from the current message using these STRICT rules:\r\n    - VOTE_OPTION_YES: when \"yes\" is mentioned\r\n    - VOTE_OPTION_ABSTAIN: when \"abstain\" is mentioned\r\n    - VOTE_OPTION_NO: when \"no\" is mentioned and \"veto\" is NOT present\r\n    - VOTE_OPTION_NO_WITH_VETO: ONLY when the phrase \"no with veto\" appears exactly\r\n    - VOTE_OPTION_UNSPECIFIED: when none of the above conditions are met\r\n\r\nCRITICAL: For a NO vote:\r\n- If the message contains \"no\" WITHOUT the word \"veto\" → use VOTE_OPTION_NO\r\n- ONLY use VOTE_OPTION_NO_WITH_VETO if the exact phrase \"no with veto\" is present\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nfunction validateVoteOption(message: string): VoteOption {\r\n    const lowercaseMessage = message.toLowerCase();\r\n\r\n    if (lowercaseMessage.includes(\"no with veto\")) {\r\n        return VoteOption.VOTE_OPTION_NO_WITH_VETO;\r\n    } else if (lowercaseMessage.includes(\"no\")) {\r\n        return VoteOption.VOTE_OPTION_NO;\r\n    } else if (lowercaseMessage.includes(\"yes\")) {\r\n        return VoteOption.VOTE_OPTION_YES;\r\n    } else if (lowercaseMessage.includes(\"abstain\")) {\r\n        return VoteOption.VOTE_OPTION_ABSTAIN;\r\n    }\r\n\r\n    return VoteOption.VOTE_OPTION_UNSPECIFIED;\r\n}\r\n\r\nexport class VoteOnProposalAction {\r\n    async voteOnProposal(\r\n        params: VoteOnProposalContent,\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State\r\n    ): Promise<string> {\r\n        try {\r\n            const wallet: WalletProvider = await walletProvider.get(\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n            const govProvider = new GovProvider(wallet);\r\n\r\n            const apiEndpoint =\r\n                runtime.getSetting(\"apiEndpoint\") ||\r\n                process.env.OMNIFLIX_API_URL ||\r\n                \"https://rest.omniflix.network\";\r\n\r\n            const proposalStatus = await verifyProposalStatus(\r\n                apiEndpoint,\r\n                params.proposal_id\r\n            );\r\n            if (!proposalStatus) {\r\n                throw new Error(\r\n                    `Proposal ${params.proposal_id} is not in voting period.`\r\n                );\r\n            }\r\n\r\n            const txHash = await govProvider.voteOnProposal(\r\n                params.proposal_id,\r\n                params.vote\r\n            );\r\n\r\n            return txHash.transactionHash;\r\n        } catch (error) {\r\n            throw new Error(`Vote on proposal failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildVoteOnProposalContent = async (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state: State\r\n): Promise<VoteOnProposalContent> => {\r\n    if (!state) {\r\n        state = (await runtime.composeState(message)) as State;\r\n    }\r\n\r\n    // Extract proposal ID from message\r\n    const proposalMatch = message.content?.text?.match(/proposal[^\\d]*(\\d+)/i);\r\n    if (!proposalMatch) {\r\n        throw new Error(\"No proposal ID found in message\");\r\n    }\r\n    const proposalId = proposalMatch[1];\r\n\r\n    // Determine vote option\r\n    const vote = validateVoteOption(message.content.text);\r\n    if (vote === VoteOption.VOTE_OPTION_UNSPECIFIED) {\r\n        throw new Error(\r\n            \"No valid vote option found. Please specify YES, NO, ABSTAIN, or NO WITH VETO\"\r\n        );\r\n    }\r\n\r\n    const voteOnProposalContent: VoteOnProposalContent = {\r\n        proposal_id: proposalId,\r\n        vote: vote,\r\n        memo: \"Vote submitted via Eliza\",\r\n        text: message.content.text,\r\n    };\r\n\r\n    elizaLogger.info(\r\n        `Prepared vote content: ${JSON.stringify(voteOnProposalContent)}`\r\n    );\r\n    return voteOnProposalContent;\r\n};\r\n\r\nexport default {\r\n    name: \"VOTE_ON_PROPOSAL\",\r\n    similes: [\r\n        \"^vote$\",\r\n        \"^vote_on_proposal$\",\r\n        \"^vote_proposal$\",\r\n        \"^vote_proposal_on$\",\r\n    ],\r\n    description: \"Vote on a specified omniflix proposal.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"Starting VOTE_ON_PROPOSAL handler...\");\r\n\r\n        const voteOnProposalContent = await buildVoteOnProposalContent(\r\n            runtime,\r\n            message,\r\n            state\r\n        );\r\n\r\n        const validationResult = isVoteOnProposalContent(voteOnProposalContent);\r\n        if (!validationResult.success) {\r\n            if (callback) {\r\n                callback({\r\n                    text: validationResult.message,\r\n                    content: { error: validationResult.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const action = new VoteOnProposalAction();\r\n            const txHash = await action.voteOnProposal(\r\n                voteOnProposalContent,\r\n                runtime,\r\n                message,\r\n                state\r\n            );\r\n\r\n            state = await runtime.updateRecentMessageState(state);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully voted on proposal ${voteOnProposalContent.proposal_id} with vote ${voteOnProposalContent.vote}\\nTxHash: ${txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: txHash,\r\n                        proposal_id: voteOnProposalContent.proposal_id,\r\n                        vote: voteOnProposalContent.vote,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error voting on proposal: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: voteOnProposalTemplate,\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: voteOnProposalExamples as ActionExample[][],\r\n} as Action;\r\n\r\nconst verifyProposalStatus = async (\r\n    apiEndpoint: string,\r\n    proposalId: string\r\n) => {\r\n    const url = `${apiEndpoint}/cosmos/gov/v1/proposals/${proposalId}`;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (data.proposal.status === \"PROPOSAL_STATUS_VOTING_PERIOD\") {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport { DeliverTxResponse } from \"@cosmjs/stargate\";\r\nimport { WalletProvider } from \"./wallet\";\r\nimport { VoteOption } from \"cosmjs-types/cosmos/gov/v1beta1/gov\";\r\n\r\nexport class GovProvider {\r\n    private wallet: WalletProvider;\r\n\r\n    constructor(wallet: WalletProvider) {\r\n        this.wallet = wallet;\r\n    }\r\n\r\n    async voteOnProposal(\r\n        proposalId: string,\r\n        vote: VoteOption\r\n    ): Promise<DeliverTxResponse> {\r\n        try {\r\n            const address = await this.wallet.getAddress();\r\n            const client = await this.wallet.getClient();\r\n            if (!address) {\r\n                throw new Error(\"Could not get address\");\r\n            }\r\n\r\n            const voteOption =\r\n                VoteOption[vote as unknown as keyof typeof VoteOption];\r\n\r\n            const msg = {\r\n                typeUrl: \"/cosmos.gov.v1beta1.MsgVote\",\r\n                value: {\r\n                    proposalId: BigInt(proposalId),\r\n                    voter: address,\r\n                    option: VoteOption[voteOption],\r\n                },\r\n            };\r\n\r\n            const tx = await client.signAndBroadcast(\r\n                address,\r\n                [msg],\r\n                200000,\r\n                \"Voted on proposal using Eliza\"\r\n            );\r\n            return tx;\r\n        } catch (e) {\r\n            elizaLogger.error(`Error in voteOnProposal: ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n","export default [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal 1 with vote vote on option yes\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 1 with vote VOTE_OPTION_YES.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 1 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'm sorry, but it seems that the address doesn't have any FLIX tokens to vote.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"I have funded my account FLIX.\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 1 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal 2 with vote vote on option abstain\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 2 with vote VOTE_OPTION_ABSTAIN.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"It seems that proposal 2 is voting period completed. Please provide a valid proposal ID.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"1\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll help you vote on proposal 1 with vote VOTE_OPTION_ABSTAIN.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Can you vote on proposal 1 with vote vote on option no\" } \r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 1 with vote VOTE_OPTION_NO.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal 1 with vote vote on option no with veto\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 1 with vote VOTE_OPTION_NO_WITH_VETO.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal 999\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote on proposal 999.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I apologize, but proposal 999 doesn't exist. Please verify the proposal ID and try again.\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal 4 with invalid option\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"Invalid vote option. Please choose one of the following options: yes, no, abstain, or no_with_veto.\",\r\n                action: \"NONE\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll help you vote. Please provide the following information:\\n1. Proposal ID\\n2. Vote option (yes, no, abstain, or no_with_veto)\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"123456 yes\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll vote on proposal 1 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote on proposal 7\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"Please specify your vote option (yes, no, abstain, or no_with_veto) for proposal 7.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"yes\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: {\r\n                text: \"I'll vote on proposal 7 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote yes\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I need the proposal ID to process your vote. Please provide the proposal number you'd like to vote on.\" }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"123456\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll vote on proposal 1 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote maybe on proposal 3\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { \r\n                text: \"'Maybe' is not a valid voting option. Please choose from: yes, no, abstain, or no_with_veto.\",\r\n                action: \"NONE\"\r\n            }\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"yes\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll vote on proposal 7 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote yes on proposal 2\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll vote on proposal 2 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: { text: \"Vote yes on proposal 3\" }\r\n        },\r\n        {\r\n            user: \"{{FlixAgent}}\",\r\n            content: { text: \"I'll vote on proposal 3 with vote VOTE_OPTION_YES.\",\r\n                action: \"VOTE_ON_PROPOSAL\"\r\n            }\r\n        }, \r\n    ]\r\n]","import voteOnProposal from './vote_on_proposal.ts';\r\n\r\nexport const govActions = [\r\n    voteOnProposal,\r\n]\r\n\r\nexport default govActions;\r\n","import { bankActions } from \"./bank\";\r\nimport { stakingActions } from \"./staking\";\r\nimport { govActions } from \"./gov\";\r\n\r\nexport const actions = [...bankActions, ...stakingActions, ...govActions];\r\n\r\nexport default actions;\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport providers from \"./providers/index.ts\";\r\nimport actions from \"./actions/index.ts\";\r\n\r\nexport const OmniflixPlugin: Plugin = {\r\n    name: \"omniflix\",\r\n    description: \"Plugin for Omniflix\",\r\n    evaluators: [],\r\n    actions,\r\n    providers,\r\n};\r\n\r\nexport default OmniflixPlugin;\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","balance_default","elizaLogger","elizaLogger","send_tokens_default","elizaLogger","elizaLogger","wallet","elizaLogger","stake_balance_default","balance_default","send_tokens_default","stake_balance_default","elizaLogger","composeContext","ModelClass","generateObjectDeprecated","elizaLogger","bech32","bech32","composeContext","generateObjectDeprecated","ModelClass","delegate_token_default","elizaLogger","elizaLogger","composeContext","ModelClass","generateObjectDeprecated","bech32","bech32","composeContext","generateObjectDeprecated","ModelClass","undelegate_token_default","elizaLogger","elizaLogger","composeContext","ModelClass","generateObjectDeprecated","bech32","bech32","composeContext","generateObjectDeprecated","ModelClass","redelegate_default","elizaLogger","elizaLogger","composeContext","ModelClass","generateObjectDeprecated","bech32","bech32","composeContext","generateObjectDeprecated","ModelClass","cancel_unbonding_default","elizaLogger","redelegate_default","undelegate_token_default","delegate_token_default","cancel_unbonding_default","elizaLogger","elizaLogger","VoteOption","VoteOption","elizaLogger","vote_on_proposal_default","vote_on_proposal_default"]}