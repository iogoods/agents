{"version":3,"sources":["../src/actions/startSession.ts","../src/providers/devinRequests.ts","../src/providers/devinProvider.ts","../src/index.ts"],"sourcesContent":["import {\r\n    type Action,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type HandlerCallback,\r\n    type State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { createSession } from \"../providers/devinRequests\";\r\n\r\nexport const startSessionAction: Action = {\r\n    name: \"START_DEVIN_SESSION\",\r\n    description: \"Creates a new Devin session and returns session info\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        return !!runtime.getSetting(\"DEVIN_API_TOKEN\");\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options?: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        try {\r\n            if (!callback) {\r\n                elizaLogger.error(\"No callback provided for startSessionAction\");\r\n                return;\r\n            }\r\n\r\n            const prompt = message.content.text;\r\n            if (!prompt) {\r\n                callback({ text: \"No prompt provided for session creation\" }, []);\r\n                return;\r\n            }\r\n\r\n            const sessionInfo = await createSession(runtime, prompt);\r\n            callback(\r\n                {\r\n                    text: `New Devin session created successfully:\r\nSession ID: ${sessionInfo.session_id}\r\nStatus: ${sessionInfo.status_enum}\r\nURL: ${sessionInfo.url}`,\r\n                    action: \"START_SESSION\",\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error creating Devin session:\", error);\r\n            if (!callback) {\r\n                return;\r\n            }\r\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\r\n            callback(\r\n                {\r\n                    text: `Failed to create Devin session: ${errorMessage}`,\r\n                    error: errorMessage,\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"Start a new Devin session with prompt: Help me with my code\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"New Devin session created successfully:\\nSession ID: abc123\\nStatus: running\\nURL: https://app.devin.ai/sessions/abc123\",\r\n                    action: \"START_SESSION\"\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"create devin session\", \"start devin session\", \"begin devin session\"],\r\n};\r\n","import { type IAgentRuntime, elizaLogger } from \"@elizaos/core\";\r\nimport fetch from \"node-fetch\";\r\n\r\nconst API_BASE = \"https://api.devin.ai/v1\";\r\nconst MIN_REQUEST_INTERVAL = 1000; // 1 second for rate limiting\r\nconst MAX_RETRIES = 3;\r\nconst INITIAL_BACKOFF = 1000; // 1 second initial backoff\r\n\r\nlet lastRequestTime = 0;\r\n\r\n/**\r\n * Interface representing a Devin session\r\n */\r\nexport interface DevinSession {\r\n    session_id: string;\r\n    url: string;\r\n    status_enum: \"running\" | \"blocked\" | \"stopped\";\r\n    structured_output?: Record<string, unknown>;\r\n}\r\n\r\n/**\r\n * Interface representing an error response from the Devin API\r\n */\r\n\r\n// interface DevinError {\r\n//     error: string;\r\n//     message: string;\r\n//     status: number;\r\n// }\r\n\r\n/**\r\n * Rate limiting function to prevent API abuse\r\n * Ensures at least MIN_REQUEST_INTERVAL milliseconds between requests\r\n */\r\nasync function rateLimit() {\r\n    const now = Date.now();\r\n    const timeSinceLastRequest = now - lastRequestTime;\r\n    if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\r\n        await new Promise(resolve => setTimeout(resolve, MIN_REQUEST_INTERVAL - timeSinceLastRequest));\r\n    }\r\n    lastRequestTime = Date.now();\r\n}\r\n\r\n/**\r\n * Helper function to implement exponential backoff for API requests\r\n * @param fn The async function to retry\r\n * @param retries Maximum number of retries\r\n * @param backoff Initial backoff in milliseconds\r\n * @returns The result of the async function\r\n * @throws The last error encountered\r\n */\r\nasync function withRetry<T>(\r\n    fn: () => Promise<T>,\r\n    retries = MAX_RETRIES,\r\n    backoff = INITIAL_BACKOFF\r\n): Promise<T> {\r\n    try {\r\n        return await fn();\r\n    } catch (error) {\r\n        if (retries === 0) throw error;\r\n        \r\n        await new Promise(resolve => setTimeout(resolve, backoff));\r\n        return withRetry(fn, retries - 1, backoff * 2);\r\n    }\r\n}\r\n// Implementation moved to the top of the file\r\n\r\n/**\r\n * Creates a new Devin session with the given prompt\r\n * @param runtime The Eliza runtime instance\r\n * @param prompt The prompt to start the session with\r\n * @returns The created session details\r\n * @throws {Error} If API token is missing or API request fails\r\n */\r\nexport async function createSession(runtime: IAgentRuntime, prompt: string): Promise<DevinSession> {\r\n    const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\r\n    if (!API_KEY) {\r\n        const error = new Error(\"No Devin API token found\") as Error & { status?: number };\r\n        error.status = 401;\r\n        throw error;\r\n    }\r\n\r\n    await rateLimit();\r\n    return withRetry(async () => {\r\n        const response = await fetch(`${API_BASE}/sessions`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${API_KEY}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ prompt }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            elizaLogger.error(\"Failed to create Devin session:\", error);\r\n            throw new Error(`Failed to create session: ${error}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data as DevinSession;\r\n    });\r\n}\r\n\r\n/**\r\n * Retrieves details for an existing Devin session\r\n * @param runtime The Eliza runtime instance\r\n * @param sessionId The ID of the session to retrieve\r\n * @returns The session details\r\n * @throws {Error} If API token is missing or API request fails\r\n */\r\nexport async function getSessionDetails(runtime: IAgentRuntime, sessionId: string): Promise<DevinSession> {\r\n    const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\r\n    if (!API_KEY) {\r\n        const error = new Error(\"No Devin API token found\") as Error & { status?: number };\r\n        error.status = 401;\r\n        throw error;\r\n    }\r\n\r\n    await rateLimit();\r\n    return withRetry(async () => {\r\n        const response = await fetch(`${API_BASE}/session/${sessionId}`, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${API_KEY}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            elizaLogger.error(\"Failed to get session details:\", error);\r\n            const apiError = new Error(`Failed to get session details: ${error}`) as Error & { status?: number };\r\n            apiError.status = response.status;\r\n            throw apiError;\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data as DevinSession;\r\n    });\r\n}\r\n\r\n/**\r\n * Sends a message to an existing Devin session\r\n * @param runtime The Eliza runtime instance\r\n * @param sessionId The ID of the session to send the message to\r\n * @param message The message content to send\r\n * @throws {Error} If API token is missing or API request fails\r\n */\r\nexport async function sendMessage(runtime: IAgentRuntime, sessionId: string, message: string): Promise<void> {\r\n    const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\r\n    if (!API_KEY) {\r\n        const error = new Error(\"No Devin API token found\") as Error & { status?: number };\r\n        error.status = 401;\r\n        throw error;\r\n    }\r\n\r\n    await rateLimit();\r\n    return withRetry(async () => {\r\n        const response = await fetch(`${API_BASE}/session/${sessionId}/message`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${API_KEY}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ message }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.text();\r\n            elizaLogger.error(\"Failed to send message:\", error);\r\n            const apiError = new Error(`Failed to send message: ${error}`) as Error & { status?: number };\r\n            apiError.status = response.status;\r\n            throw apiError;\r\n        }\r\n    });\r\n}\r\n","import {\r\n    type Provider,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { createSession, getSessionDetails, sendMessage } from \"./devinRequests\";\r\n\r\n/**\r\n * Interface representing the state of a Devin session in the provider\r\n */\r\nexport interface DevinState {\r\n    sessionId?: string;\r\n    status?: \"running\" | \"blocked\" | \"stopped\";\r\n    lastUpdate?: number;\r\n    error?: string;\r\n    structured_output?: Record<string, unknown>;\r\n    url?: string;\r\n}\r\n\r\n/**\r\n * Provider for interacting with the Devin API\r\n * Manages session state and provides methods for creating sessions and sending messages\r\n */\r\nexport const devinProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory, state?: State) => {\r\n        try {\r\n            const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\r\n            if (!API_KEY) {\r\n                elizaLogger.error(\"No Devin API token found\");\r\n                return {\r\n                    error: \"No Devin API token found\",\r\n                    lastUpdate: Date.now(),\r\n                };\r\n            }\r\n\r\n            const devinState = (state?.devin || {}) as DevinState;\r\n            \r\n            // If we have an active session, get its status\r\n            if (devinState.sessionId) {\r\n                try {\r\n                    const sessionDetails = await getSessionDetails(runtime, devinState.sessionId);\r\n                    return {\r\n                        sessionId: sessionDetails.session_id,\r\n                        status: sessionDetails.status_enum,\r\n                        url: sessionDetails.url,\r\n                        lastUpdate: Date.now(),\r\n                        structured_output: sessionDetails.structured_output,\r\n                    };\r\n                } catch (error) {\r\n                    elizaLogger.error(\"Error fetching session details:\", error);\r\n                    return {\r\n                        error: \"Failed to fetch session details\",\r\n                        lastUpdate: Date.now(),\r\n                        sessionId: devinState.sessionId, // Keep the session ID for reference\r\n                    };\r\n                }\r\n            }\r\n\r\n            // No active session\r\n            return {\r\n                lastUpdate: Date.now(),\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in devinProvider:\", error);\r\n            return {\r\n                error: \"Internal provider error\",\r\n                lastUpdate: Date.now(),\r\n            };\r\n        }\r\n    },\r\n};\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { startSessionAction } from \"./actions/startSession\";\r\nimport { devinProvider } from \"./providers/devinProvider\";\r\nimport { validateDevinConfig } from \"./environment\";\r\n\r\nexport const devinPlugin: Plugin = {\r\n    name: \"devinPlugin\",\r\n    description: \"Integrates Devin API with Eliza for task automation and session management\",\r\n    actions: [startSessionAction],\r\n    providers: [devinProvider],\r\n};\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","elizaLogger","elizaLogger"]}