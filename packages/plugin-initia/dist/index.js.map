{"version":3,"sources":["../src/actions/transfer.ts","../src/providers/wallet.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    ActionExample,\r\n    composeContext,\r\n    Content, elizaLogger, generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory, ModelClass,\r\n    State\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider } from \"../providers/wallet\";\r\n\r\n\r\nexport interface TransferContent extends Content {\r\n    sender: string;\r\n    recipient: string;\r\n    amount: string;\r\n}\r\n\r\nfunction isTransferContent(_runtime: IAgentRuntime, content: unknown): content is TransferContent {\r\n    return (\r\n        typeof (content as TransferContent).sender === \"string\" && \r\n        typeof (content as TransferContent).recipient === \"string\" && \r\n        typeof (content as TransferContent).amount === \"string\"\r\n    );\r\n}\r\n\r\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannt be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"sender\": \"init18sj3x80fdjc6gzfvwl7lf8sxcvuvqjpvcmp6np\",\r\n    \"recipient\": \"init1kdwzpz3wzvpdj90gtga4fw5zm9tk4cyrgnjauu\",\r\n    \"amount\": \"1000uinit\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Sender wallet address\r\n- Recipient wallet address\r\n- Amount to transfer\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"SEND_TOKEN\",\r\n    similes: [\r\n        \"TRANSFER_TOKEN_ON_INITIA\",\r\n        \"TRANSFER_TOKENS_ON_INITIA\",\r\n        \"SEND_TOKEN_ON_INITIA\",\r\n        \"SEND_TOKENS_ON_INITIA\",\r\n        \"PAY_ON_INITIA\"\r\n    ],\r\n    description: \"\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        const privateKey = runtime.getSetting(\"INITIA_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        // Initialize or update state\r\n        let currentState = state;\r\n        if (!currentState) {\r\n            currentState = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            currentState = await runtime.updateRecentMessageState(currentState);\r\n        }\r\n\r\n\r\n        const transferContext = composeContext({\r\n            state: currentState,\r\n            template: transferTemplate,\r\n        });\r\n\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        if (!isTransferContent(runtime, content)) {\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process transfer request. Invalid content provided.\",\r\n                    content: { error: \"Invalid transfer content\" }\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const initia = await import('@initia/initia.js');\r\n            const { MsgSend } = initia;\r\n\r\n            const walletProvider = new WalletProvider(runtime);\r\n            const msgSend = new MsgSend(\r\n                content.sender,\r\n                content.recipient,\r\n                content.amount,\r\n            );\r\n            const signedTx = await walletProvider.getWallet().createAndSignTx({\r\n                msgs: [msgSend],\r\n                memo: 'This transaction is made in ElizaOS',\r\n            });\r\n            const txResult = await walletProvider.sendTransaction(signedTx);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully transferred INITIA.\r\nTransaction Hash: ${txResult.txhash}\r\nSender: ${content.sender}\r\nRecipient: ${content.recipient}\r\nAmount: ${content.amount}`\r\n                });\r\n            }\r\n            return true;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Failed to transfer INITIA:\", e.message);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Failed to transfer INITIA: ${e.message}`\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Hey send 1 INIT to init18sj3x80fdjc6gzfvwl7lf8sxcvuvqjpvcmp6np.\"\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Sure! I am going to send 1 INIT to init18sj3x80fdjc6gzfvwl7lf8sxcvuvqjpvcmp6np.\"\r\n                }\r\n            }\r\n        ]\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import type { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\r\n\r\n// Add type imports for Initia.js\r\nimport type { Wallet, RESTClient, Tx } from '@initia/initia.js';\r\n\r\ninterface WalletProviderOptions {\r\n    chainId: string;\r\n    nodeUrl: string;\r\n}\r\n\r\nconst DEFAULT_INITIA_TESTNET_CONFIGS: WalletProviderOptions = {\r\n    chainId: 'initiation-2',\r\n    nodeUrl: 'https://rest.testnet.initia.xyz',\r\n}\r\n\r\nexport class WalletProvider {\r\n    private wallet: Wallet | null = null;\r\n    private restClient: RESTClient | null = null;\r\n    private runtime: IAgentRuntime;\r\n\r\n    async initialize(runtime: IAgentRuntime, options: WalletProviderOptions = DEFAULT_INITIA_TESTNET_CONFIGS) {\r\n        const privateKey = runtime.getSetting(\"INITIA_PRIVATE_KEY\");\r\n        if (!privateKey) throw new Error(\"INITIA_PRIVATE_KEY is not configured\");\r\n\r\n        const initia = await import('@initia/initia.js');\r\n        const { Wallet, RESTClient, RawKey } = initia;\r\n\r\n        this.runtime = runtime;\r\n        this.restClient = new RESTClient(\r\n            options.nodeUrl, {\r\n                chainId: options.chainId,\r\n                gasPrices: '0.15uinit',\r\n                gasAdjustment: '1.75'\r\n            });\r\n        this.wallet = new Wallet(this.restClient, RawKey.fromHex(privateKey));\r\n    }\r\n\r\n    constructor(runtime: IAgentRuntime, options: WalletProviderOptions = DEFAULT_INITIA_TESTNET_CONFIGS) {\r\n        this.runtime = runtime;\r\n        this.initialize(runtime, options);\r\n    }\r\n\r\n    getWallet() {\r\n        if (this.wallet == null) {\r\n            throw new Error(\"Initia wallet is not configured.\");\r\n        }\r\n        return this.wallet;\r\n    }\r\n\r\n    getAddress() {\r\n        if (this.wallet == null) {\r\n            throw new Error(\"Initia wallet is not configured.\");\r\n        }\r\n        return this.wallet.key.accAddress;\r\n    }\r\n\r\n    async getBalance() {\r\n        if (this.wallet == null) {\r\n            throw new Error(\"Initia wallet is not configured.\");\r\n        }\r\n        return this.wallet.rest.bank.balance(this.getAddress());\r\n    }\r\n\r\n    async sendTransaction(signedTx: Tx | string) {\r\n        return await this.restClient.tx.broadcast(signedTx);\r\n    }\r\n}\r\n\r\nexport const initiaWalletProvider: Provider = {\r\n    async get(runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<string | null> {\r\n        if (!runtime.getSetting(\"INITIA_PRIVATE_KEY\")) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const nodeUrl: string | null = runtime.getSetting(\"INITIA_NODE_URL\");\r\n            const chainId: string | null = runtime.getSetting(\"INITIA_CHAIN_ID\");\r\n            let walletProvider: WalletProvider;\r\n            if (nodeUrl === null || chainId === null) {\r\n                walletProvider = new WalletProvider(runtime);\r\n            } else {\r\n                walletProvider = new WalletProvider(runtime, { nodeUrl: nodeUrl, chainId: chainId } as WalletProviderOptions);\r\n            }\r\n\r\n            const address = walletProvider.getAddress();\r\n            const balance = await walletProvider.getBalance();\r\n            return `Initia Wallet Address: ${address}\\nBalance: ${balance} INIT`;\r\n        } catch (e) {\r\n            console.error(\"Error during configuring initia wallet provider\", e);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport transfer from \"./actions/transfer\";\r\nimport { initiaWalletProvider } from \"./providers/wallet\";\r\n\r\nexport const initiaPlugin: Plugin = {\r\n    name: \"initiaPlugin\",\r\n    description: \"Initia Plugin for Eliza\",\r\n    actions: [\r\n        transfer,\r\n    ],\r\n    evaluators: [],\r\n    providers: [initiaWalletProvider],\r\n};\r\n"],"mappings":"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","names":[]}