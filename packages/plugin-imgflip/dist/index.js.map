{"version":3,"sources":["../src/actions/generate-meme.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    ActionExample,\r\n    composeContext,\r\n    elizaLogger,\r\n    generateText,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Media,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\n\r\nconst imgflipApiBaseUrl = \"https://api.imgflip.com\";\r\n\r\ninterface ImgflipTemplate {\r\n    id: string;\r\n    name: string;\r\n    url: string;\r\n    width: number;\r\n    height: number;\r\n    box_count: number;\r\n}\r\n\r\ninterface ImgflipSearchResponse {\r\n    success: boolean;\r\n    data: {\r\n        memes: ImgflipTemplate[];\r\n    };\r\n    error_message?: string;\r\n}\r\n\r\ninterface ImgflipCaptionResponse {\r\n    success: boolean;\r\n    data: {\r\n        url: string;\r\n        page_url: string;\r\n    };\r\n    error_message?: string;\r\n}\r\n\r\nasync function findImgflipTemplate(\r\n    runtime: IAgentRuntime,\r\n    message: string\r\n): Promise<string> {\r\n    const context = `\r\n# Task: Find the best imgflip.com template for a meme, based on the user's message.\r\nThe message is:\r\n${message}\r\n\r\n# Instructions:\r\nGet creative, don't stick to the most popular templates.\r\nOnly respond with the template name, do not include any other text.`;\r\n\r\n    const response = await generateText({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.MEDIUM,\r\n    });\r\n\r\n    return response;\r\n}\r\n\r\nasync function getImgflipTemplate(template: string): Promise<ImgflipTemplate> {\r\n    // Use the search_memes endpoint to find the template\r\n    const formData = new URLSearchParams({\r\n        username: process.env.IMGFLIP_USERNAME,\r\n        password: process.env.IMGFLIP_PASSWORD,\r\n        query: template,\r\n    });\r\n\r\n    const response = await fetch(`${imgflipApiBaseUrl}/search_memes`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n    });\r\n\r\n    const result: ImgflipSearchResponse = await response.json();\r\n\r\n    if (!result.success || !result.data.memes.length) {\r\n        // If search fails, fallback to getting all memes\r\n        const allMemesResponse = await fetch(`${imgflipApiBaseUrl}/get_memes`);\r\n        const allMemes = await allMemesResponse.json();\r\n\r\n        if (!allMemes.success || !allMemes.data.memes.length) {\r\n            throw new Error(\"Failed to find meme template\");\r\n        }\r\n\r\n        // Try to find close matches\r\n        const closeMatches = allMemes.data.memes.filter(\r\n            (meme) =>\r\n                meme.name.toLowerCase().includes(template.toLowerCase()) ||\r\n                template.toLowerCase().includes(meme.name.toLowerCase())\r\n        );\r\n\r\n        if (closeMatches.length === 0) {\r\n            // If no match found, return a random popular template\r\n            const randomIndex = Math.floor(\r\n                Math.random() * Math.min(10, allMemes.data.memes.length)\r\n            );\r\n            return allMemes.data.memes[randomIndex];\r\n        }\r\n\r\n        // Return a random template from close matches\r\n        const randomIndex = Math.floor(Math.random() * closeMatches.length);\r\n        return closeMatches[randomIndex];\r\n    }\r\n\r\n    // Return a random template from search results\r\n    const randomIndex = Math.floor(Math.random() * result.data.memes.length);\r\n    return result.data.memes[randomIndex];\r\n}\r\n\r\nasync function generateMemeCaptions(\r\n    runtime: IAgentRuntime,\r\n    message: string,\r\n    state: State,\r\n    imgflipTemplate: string,\r\n    captionsCount: number\r\n): Promise<string[]> {\r\n    const template = `\r\n# About Arony:\r\n{{bio}}\r\n{{lore}}\r\n\r\n# Task: Generate captions for a meme, based on a imgflip.com template, the user's message and a number of captions.\r\nThe template is: **${imgflipTemplate}**\r\nThe message is:\r\n${message}\r\nGenerate **${captionsCount}** captions for the meme.\r\n\r\n# Instructions:\r\nOnly respond with the captions - one per line, do not include any other text.`;\r\n\r\n    const context = await composeContext({\r\n        state,\r\n        template,\r\n    });\r\n\r\n    elizaLogger.debug(\"generateMemeCaptions context: \", context);\r\n\r\n    const response = await generateText({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.MEDIUM,\r\n    });\r\n\r\n    return response.split(\"\\n\");\r\n}\r\n\r\nasync function genereateMeme(\r\n    imgflipTemplate: ImgflipTemplate,\r\n    captions: string[]\r\n): Promise<string> {\r\n    const username = process.env.IMGFLIP_USERNAME;\r\n    const password = process.env.IMGFLIP_PASSWORD;\r\n\r\n    if (!username || !password) {\r\n        throw new Error(\"Imgflip credentials not configured. Please set IMGFLIP_USERNAME and IMGFLIP_PASSWORD environment variables.\");\r\n    }\r\n\r\n    // Create form data with template ID and credentials\r\n    const formData = new URLSearchParams({\r\n        template_id: imgflipTemplate.id,\r\n        username,\r\n        password,\r\n    });\r\n\r\n    // Add each caption as text0, text1, etc.\r\n    captions.forEach((text, index) => {\r\n        formData.append(`boxes[${index}][text]`, text);\r\n        formData.append(`boxes[${index}][color]`, \"#FFFFFF\");\r\n        formData.append(`boxes[${index}][outline_color]`, \"#000000\");\r\n    });\r\n\r\n    const response = await fetch(`${imgflipApiBaseUrl}/caption_image`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n    });\r\n\r\n    const result: ImgflipCaptionResponse = await response.json();\r\n\r\n    if (!result.success || !result.data.url) {\r\n        throw new Error(`Failed to generate meme: ${result.error_message}`);\r\n    }\r\n\r\n    return result.data.url;\r\n}\r\n\r\nexport interface Meme {\r\n    url: string;\r\n    text: string;\r\n}\r\n\r\nexport async function generateMemeActionHandler(\r\n    runtime: IAgentRuntime,\r\n    message: string,\r\n    state: State\r\n): Promise<Meme> {\r\n    // STEPS\r\n    // 1. Generate the best imgflip template for the meme based on the message -> LLM call\r\n    // 2. Get the template's captions number from imgflip -> imgflip API call\r\n    // 2. Generate the captions for the meme, based on the template (**also consider the agent character**) -> LLM call\r\n    // 3. Generate the meme -> imgflip API call\r\n    // 5. Return the meme url and text, description of the meme\r\n\r\n    const template = await findImgflipTemplate(runtime, message);\r\n    const imgflipTemplate = await getImgflipTemplate(template);\r\n    const captions = await generateMemeCaptions(\r\n        runtime,\r\n        message,\r\n        state,\r\n        template,\r\n        imgflipTemplate.box_count\r\n    );\r\n\r\n    const url = await genereateMeme(imgflipTemplate, captions);\r\n    const text = `Generated a meme, using imgflip.com:\r\nMeme template: \"${template}\".\r\nCaptions:\r\n${captions.join(\"\\n\")}\r\nMeme URL: ${url}`;\r\n\r\n    return {\r\n        url,\r\n        text,\r\n    };\r\n}\r\n\r\nexport const generateMemeAction: Action = {\r\n    name: \"GENERATE_MEME\",\r\n    similes: [\"MAKE_MEME\", \"NEW_MEME\", \"GENERATE_NEW_MEME\", \"MAKE_NEW_MEME\"],\r\n    description: \"Use this action to generate a meme\",\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\r\n        return true;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        const meme = await generateMemeActionHandler(\r\n            runtime,\r\n            message.content.text,\r\n            state\r\n        );\r\n\r\n        const newMemory: Memory = {\r\n            ...message,\r\n            userId: message.agentId,\r\n            content: {\r\n                text: meme.text,\r\n                attachments: [\r\n                    {\r\n                        url: meme.url,\r\n                    } as Media,\r\n                ],\r\n                action: \"GENERATE_MEME\",\r\n                source: message.content.source,\r\n            },\r\n        };\r\n\r\n        await runtime.messageManager.createMemory(newMemory);\r\n\r\n        callback({\r\n            text: \"\",\r\n            attachments: newMemory.content.attachments,\r\n        });\r\n\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Can you make a meme about programming bugs?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{assistant}}\",\r\n                content: {\r\n                    text: \"I'll generate a meme about programming bugs.\",\r\n                    action: \"GENERATE_MEME\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Generate a funny meme about Monday mornings\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{assistant}}\",\r\n                content: {\r\n                    text: \"I'll create a meme about Monday mornings for you!\",\r\n                    action: \"GENERATE_MEME\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I need a meme that shows how I feel about deadlines\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{assistant}}\",\r\n                content: {\r\n                    text: \"Let me make a meme about dealing with deadlines.\",\r\n                    action: \"GENERATE_MEME\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Make me a meme about pizza\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{assistant}}\",\r\n                content: {\r\n                    text: \"I'll generate a meme about pizza for you.\",\r\n                    action: \"GENERATE_MEME\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create a funny meme about working from home\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{assistant}}\",\r\n                content: {\r\n                    text: \"I'll make a meme about the work from home life.\",\r\n                    action: \"GENERATE_MEME\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I want a meme about trying to explain code to non-programmers\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{assistant}}\",\r\n                content: {\r\n                    text: \"I'll generate a meme about explaining code to non-programmers.\",\r\n                    action: \"GENERATE_MEME\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { generateMemeAction, generateMemeActionHandler, Meme } from \"./actions\";\r\n\r\nexport { generateMemeAction, generateMemeActionHandler, Meme };\r\n\r\nexport const imgflipPlugin: Plugin = {\r\n    name: \"imgflip\",\r\n    description: \"Generate memes using imgflip.com\",\r\n    actions: [generateMemeAction],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\nexport default imgflipPlugin;\r\n"],"mappings":"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","names":["randomIndex"]}