{"version":3,"sources":["../src/provider.ts","../src/actions.ts","../src/index.ts"],"sourcesContent":["import type { Provider, IAgentRuntime } from \"@elizaos/core\";\r\nimport { CdpAgentkit } from \"@coinbase/cdp-agentkit-core\";\r\nimport * as fs from \"fs\";\r\n\r\nconst WALLET_DATA_FILE = \"wallet_data.txt\";\r\n\r\nexport async function getClient(): Promise<CdpAgentkit> {\r\n    // Validate required environment variables first\r\n    const apiKeyName = process.env.CDP_API_KEY_NAME;\r\n    const apiKeyPrivateKey = process.env.CDP_API_KEY_PRIVATE_KEY;\r\n\r\n    if (!apiKeyName || !apiKeyPrivateKey) {\r\n        throw new Error(\"Missing required CDP API credentials. Please set CDP_API_KEY_NAME and CDP_API_KEY_PRIVATE_KEY environment variables.\");\r\n    }\r\n\r\n    let walletDataStr: string | null = null;\r\n\r\n    // Read existing wallet data if available\r\n    if (fs.existsSync(WALLET_DATA_FILE)) {\r\n        try {\r\n            walletDataStr = fs.readFileSync(WALLET_DATA_FILE, \"utf8\");\r\n        } catch (error) {\r\n            console.error(\"Error reading wallet data:\", error);\r\n            // Continue without wallet data\r\n        }\r\n    }\r\n\r\n    // Configure CDP AgentKit\r\n    const config = {\r\n        cdpWalletData: walletDataStr || undefined,\r\n        networkId: process.env.CDP_AGENT_KIT_NETWORK || \"base-sepolia\",\r\n        apiKeyName: apiKeyName,\r\n        apiKeyPrivateKey: apiKeyPrivateKey\r\n    };\r\n\r\n    try {\r\n        const agentkit = await CdpAgentkit.configureWithWallet(config);\r\n        // Save wallet data\r\n        const exportedWallet = await agentkit.exportWallet();\r\n        fs.writeFileSync(WALLET_DATA_FILE, exportedWallet);\r\n        return agentkit;\r\n    } catch (error) {\r\n        console.error(\"Failed to initialize CDP AgentKit:\", error);\r\n        throw new Error(`Failed to initialize CDP AgentKit: ${error.message || 'Unknown error'}`);\r\n    }\r\n}\r\n\r\nexport const walletProvider: Provider = {\r\n    async get(runtime: IAgentRuntime): Promise<string | null> {\r\n        try {\r\n            const client = await getClient();\r\n            const address = (await (client as any).wallet.addresses)[0].id;\r\n            return `AgentKit Wallet Address: ${address}`;\r\n        } catch (error) {\r\n            console.error(\"Error in AgentKit provider:\", error);\r\n            return `Error initializing AgentKit wallet: ${error.message}`;\r\n        }\r\n    },\r\n};\r\n","import {\r\n    type Action,\r\n    generateText,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    composeContext,\r\n    generateObject,\r\n} from \"@elizaos/core\";\r\nimport type { CdpAgentkit } from \"@coinbase/cdp-agentkit-core\";\r\nimport { CdpToolkit, type Tool } from \"@coinbase/cdp-langchain\";\r\n\r\ntype GetAgentKitActionsParams = {\r\n    getClient: () => Promise<CdpAgentkit>;\r\n    config?: {\r\n        networkId?: string;\r\n    };\r\n};\r\n\r\n/**\r\n * Get all AgentKit actions\r\n */\r\nexport async function getAgentKitActions({\r\n    getClient,\r\n}: GetAgentKitActionsParams): Promise<Action[]> {\r\n    const agentkit = await getClient();\r\n    const cdpToolkit = new CdpToolkit(agentkit);\r\n    const tools = cdpToolkit.getTools();\r\n    const actions = tools.map((tool: Tool) => ({\r\n        name: tool.name.toUpperCase(),\r\n        description: tool.description,\r\n        similes: [],\r\n        validate: async () => true,\r\n        handler: async (\r\n            runtime: IAgentRuntime,\r\n            message: Memory,\r\n            state: State | undefined,\r\n            options?: Record<string, unknown>,\r\n            callback?: HandlerCallback\r\n        ): Promise<boolean> => {\r\n            try {\r\n                const client = await getClient();\r\n                let currentState =\r\n                    state ?? (await runtime.composeState(message));\r\n                currentState = await runtime.updateRecentMessageState(\r\n                    currentState\r\n                );\r\n\r\n                const parameterContext = composeParameterContext(\r\n                    tool,\r\n                    currentState\r\n                );\r\n                const parameters = await generateParameters(\r\n                    runtime,\r\n                    parameterContext,\r\n                    tool\r\n                );\r\n\r\n                const result = await executeToolAction(\r\n                    tool,\r\n                    parameters,\r\n                    client\r\n                );\r\n\r\n                const responseContext = composeResponseContext(\r\n                    tool,\r\n                    result,\r\n                    currentState\r\n                );\r\n                const response = await generateResponse(\r\n                    runtime,\r\n                    responseContext\r\n                );\r\n\r\n                callback?.({ text: response, content: result });\r\n                return true;\r\n            } catch (error) {\r\n                const errorMessage =\r\n                    error instanceof Error ? error.message : String(error);\r\n                callback?.({\r\n                    text: `Error executing action ${tool.name}: ${errorMessage}`,\r\n                    content: { error: errorMessage },\r\n                });\r\n                return false;\r\n            }\r\n        },\r\n        examples: [],\r\n    }));\r\n    return actions;\r\n}\r\n\r\nasync function executeToolAction(\r\n    tool: Tool,\r\n    parameters: any,\r\n    client: CdpAgentkit\r\n): Promise<unknown> {\r\n    const toolkit = new CdpToolkit(client);\r\n    const tools = toolkit.getTools();\r\n    const selectedTool = tools.find((t) => t.name === tool.name);\r\n\r\n    if (!selectedTool) {\r\n        throw new Error(`Tool ${tool.name} not found`);\r\n    }\r\n\r\n    return await selectedTool.call(parameters);\r\n}\r\n\r\nfunction composeParameterContext(tool: any, state: State): string {\r\n    const contextTemplate = `{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information for the action \"${tool.name}\":\r\n${tool.description}\r\n`;\r\n    return composeContext({ state, template: contextTemplate });\r\n}\r\n\r\nasync function generateParameters(\r\n    runtime: IAgentRuntime,\r\n    context: string,\r\n    tool: Tool\r\n): Promise<unknown> {\r\n    const { object } = await generateObject({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.LARGE,\r\n        schema: tool.schema,\r\n    });\r\n\r\n    return object;\r\n}\r\n\r\nfunction composeResponseContext(\r\n    tool: Tool,\r\n    result: unknown,\r\n    state: State\r\n): string {\r\n    const responseTemplate = `\r\n# Action Examples\r\n{{actionExamples}}\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\nThe action \"${tool.name}\" was executed successfully.\r\nHere is the result:\r\n${JSON.stringify(result)}\r\n\r\n{{actions}}\r\n\r\nRespond to the message knowing that the action was successful and these were the previous messages:\r\n{{recentMessages}}\r\n`;\r\n    return composeContext({ state, template: responseTemplate });\r\n}\r\n\r\nasync function generateResponse(\r\n    runtime: IAgentRuntime,\r\n    context: string\r\n): Promise<string> {\r\n    return generateText({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.LARGE,\r\n    });\r\n}\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { walletProvider, getClient } from \"./provider\";\r\nimport { getAgentKitActions } from \"./actions\";\r\n\r\n// Initial banner\r\nconsole.log(\"\\n┌════════════════════════════════════════┐\");\r\nconsole.log(\"│          AGENTKIT PLUGIN               │\");\r\nconsole.log(\"├────────────────────────────────────────┤\");\r\nconsole.log(\"│  Initializing AgentKit Plugin...       │\");\r\nconsole.log(\"│  Version: 0.0.1                        │\");\r\nconsole.log(\"└════════════════════════════════════════┘\");\r\n\r\nconst initializeActions = async () => {\r\n    try {\r\n        // Validate environment variables\r\n        const apiKeyName = process.env.CDP_API_KEY_NAME;\r\n        const apiKeyPrivateKey = process.env.CDP_API_KEY_PRIVATE_KEY;\r\n\r\n        if (!apiKeyName || !apiKeyPrivateKey) {\r\n            console.warn(\"⚠️ Missing CDP API credentials - AgentKit actions will not be available\");\r\n            return [];\r\n        }\r\n\r\n        const actions = await getAgentKitActions({\r\n            getClient,\r\n        });\r\n        console.log(\"✔ AgentKit actions initialized successfully.\");\r\n        return actions;\r\n    } catch (error) {\r\n        console.error(\"❌ Failed to initialize AgentKit actions:\", error);\r\n        return []; // Return empty array instead of failing\r\n    }\r\n};\r\n\r\nexport const agentKitPlugin: Plugin = {\r\n    name: \"[AgentKit] Integration\",\r\n    description: \"AgentKit integration plugin\",\r\n    providers: [walletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: await initializeActions(),\r\n};\r\n\r\nexport default agentKitPlugin;\r\n"],"mappings":"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","names":["getClient"]}