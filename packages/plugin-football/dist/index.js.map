{"version":3,"sources":["../src/actions/fetchMatchAction.ts","../src/actions/fetchStandingsAction.ts","../src/index.ts"],"sourcesContent":["import {\r\n    type Action,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\n\r\nexport const fetchMatchAction: Action = {\r\n    name: \"FETCH_MATCH\",\r\n    similes: [\"LIVE_MATCH\", \"GET_SCORE\", \"FETCH_MATCH\"],\r\n    description: \"Fetch live match scores and events\",\r\n    validate: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State,\r\n    ) => {\r\n        const apiKey = runtime.getSetting(\"FOOTBALL_API_KEY\");\r\n        return !!apiKey;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State,\r\n        _options?: { [key: string]: unknown },\r\n        callback?: HandlerCallback,\r\n    ): Promise<boolean> => {\r\n        try {\r\n            const apiKey = runtime.getSetting(\"FOOTBALL_API_KEY\");\r\n            const apiUrl = \"https://api.football-data.org/v4/matches\";\r\n\r\n            const response = await fetch(apiUrl, {\r\n                headers: { \"X-Auth-Token\": apiKey },\r\n                signal: AbortSignal.timeout(5000),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                elizaLogger.error(\r\n                    \"Error fetching live match data:\",\r\n                    response.statusText,\r\n                );\r\n                callback({\r\n                    text: \"Error fetching live match data:\",\r\n                    action: \"FETCH_MATCH\",\r\n                });\r\n                return false;\r\n            }\r\n\r\n            const matchData = await response.json();\r\n            elizaLogger.log(\"Fetched match data:\", matchData);\r\n\r\n            callback(\r\n                {\r\n                    text: `Football match data fetched successfully:\r\n                    - Matches found: ${matchData.resultSet.count}\r\n                    - Competitions: ${matchData.resultSet.competitions}\r\n                    - Date range: ${matchData.filters.dateFrom} to ${matchData.filters.dateTo}\r\n\r\n                    Match Results:\r\n                    ${matchData.matches\r\n                        .map(\r\n                            (match) => `\r\n                    ${match.competition.name}\r\n                    ${match.homeTeam.name} ${match.score.fullTime.home} - ${match.score.fullTime.away} ${match.awayTeam.name}\r\n                    Status: ${match.status}\r\n                    `,\r\n                        )\r\n                        .join(\"\\n\")}`,\r\n                },\r\n                [],\r\n            );\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in fetchMatchAction:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"What's the score of the Chelsea vs Arsenal match?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"The latest score is Chelsea 1-2 Arsenal, full-time.\",\r\n                    action: \"FETCH_MATCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Give me the latest score for today's match!\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Sure! Let me check the live match details.\",\r\n                    action: \"FETCH_MATCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"What's the score in the Premier League game?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"The score for the Premier League match is 2-1 in favor of Manchester United, full-time.\",\r\n                    action: \"FETCH_MATCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"What's the score for today's matches?\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Here are today's live scores for the matches:\",\r\n                    action: \"FETCH_MATCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"Tell me the score for Arsenal vs Chelsea.\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Fetching the live score for Arsenal vs Chelsea...\",\r\n                    action: \"FETCH_MATCH\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import type { HandlerCallback } from \"@elizaos/core\";\r\nimport {\r\n    type Action,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\n\r\nconst TIMEOUT_MS = 5000;\r\nconst RATE_LIMIT_WINDOW_MS = 60000;\r\nlet lastRequestTime = 0;\r\n\r\nexport const fetchStandingsAction: Action = {\r\n    name: \"FETCH_STANDINGS\",\r\n    similes: [\"GET_TABLE\", \"LEAGUE_STANDINGS\"],\r\n    description: \"Fetch current league standings\",\r\n    validate: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State,\r\n    ) => {\r\n        const apiKey = runtime.getSetting(\"FOOTBALL_API_KEY\");\r\n        return !!apiKey;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State,\r\n        _options?: { [key: string]: unknown },\r\n        callback?: HandlerCallback,\r\n    ): Promise<boolean> => {\r\n        try {\r\n            const league = runtime.getSetting(\"LEAGUE_ID\") || \"PL\";\r\n            const apiKey = runtime.getSetting(\"FOOTBALL_API_KEY\");\r\n\r\n            if (!apiKey?.match(/^[a-f0-9]{32}$/i)) {\r\n                elizaLogger.error(\"Invalid API key format\");\r\n                return false;\r\n            }\r\n\r\n            const now = Date.now();\r\n            if (now - lastRequestTime < RATE_LIMIT_WINDOW_MS) {\r\n                elizaLogger.error(\"Rate limit exceeded\");\r\n                return false;\r\n            }\r\n            lastRequestTime = now;\r\n\r\n            const apiUrl = `https://api.football-data.org/v4/competitions/${league}/standings`;\r\n\r\n            const controller = new AbortController();\r\n            const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);\r\n\r\n            const response = await fetch(apiUrl, {\r\n                headers: { \"X-Auth-Token\": apiKey },\r\n                signal: controller.signal,\r\n            });\r\n\r\n            clearTimeout(timeoutId);\r\n\r\n            if (!response.ok) {\r\n                elizaLogger.error(\r\n                    \"Error fetching standings data:\",\r\n                    response.statusText,\r\n                );\r\n                callback({\r\n                    text: \"Error fetching standings data:\",\r\n                    action: \"FETCH_STANDINGS\",\r\n                });\r\n                return false;\r\n            }\r\n\r\n            const standingsData = await response.json();\r\n            callback(\r\n                {\r\n                    text: `Football standings data fetched successfully:\r\n                    - Result: ${JSON.stringify(standingsData, null, 2)}`,\r\n                },\r\n                [],\r\n            );\r\n\r\n            return;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in fetchStandingsAction:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"What are the current standings in the Premier League?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"The top 2 teams are: 1. Manchester City - 45 points, 2. Arsenal - 42 points.\",\r\n                    action: \"FETCH_STANDINGS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"Give me the table for La Liga\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"The top 3 teams in La Liga are: 1. Barcelona, 2. Real Madrid, 3. Atletico Madrid.\",\r\n                    action: \"FETCH_STANDINGS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"Check the Serie A table for me.\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Serie A current standings: Juventus 1st, AC Milan 2nd, Inter Milan 3rd.\",\r\n                    action: \"FETCH_STANDINGS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { fetchMatchAction } from \"./actions/fetchMatchAction\";\r\nimport { fetchStandingsAction } from \"./actions/fetchStandingsAction\";\r\n\r\nexport const footballPlugin: Plugin = {\r\n    name: \"football\",\r\n    description:\r\n        \"Football data plugin to fetch live scores, standings, and fixtures\",\r\n    actions: [fetchMatchAction, fetchStandingsAction],\r\n};\r\nexport default footballPlugin;\r\n"],"mappings":"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","names":["elizaLogger"]}