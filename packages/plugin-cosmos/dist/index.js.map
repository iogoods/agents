{"version":3,"sources":["../src/actions/transfer/index.ts","../src/shared/entities/cosmos-wallet-chains-data.ts","../src/shared/entities/cosmos-wallet.ts","../src/shared/helpers/cosmos-chains.ts","../src/providers/wallet/utils.ts","../src/templates/index.ts","../src/actions/transfer/services/cosmos-transfer-action-service.ts","../src/shared/helpers/cosmos-transaction-receipt.ts","../src/shared/services/cosmos-transaction-fee-estimator.ts","../src/shared/helpers/cosmos-assets.ts","../src/providers/wallet/index.ts","../src/actions/ibc-swap/index.ts","../src/actions/ibc-swap/services/ibc-swap-action-service.ts","../src/actions/ibc-swap/services/ibc-swap-utils.ts","../src/actions/ibc-transfer/index.ts","../src/actions/ibc-transfer/services/ibc-transfer-action-service.ts","../src/shared/services/skip-api/assets-from-source-fetcher/skip-api-assets-from-source-fetcher.ts","../src/shared/services/skip-api/assets-from-source-fetcher/schema.ts","../src/shared/services/skip-api/config.ts","../src/actions/ibc-transfer/services/bridge-denom-provider.ts","../src/index.ts"],"sourcesContent":["import {\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { initWalletChainsData } from \"../../providers/wallet/utils\";\r\nimport { cosmosTransferTemplate } from \"../../templates\";\r\nimport { CosmosTransferActionService } from \"./services/cosmos-transfer-action-service\";\r\nimport type { CosmosTransferParams } from \"./types\";\r\nimport type {\r\n    ICosmosPluginOptions,\r\n    ICosmosWalletChains,\r\n} from \"../../shared/interfaces\";\r\n\r\nexport const createTransferAction = (pluginOptions: ICosmosPluginOptions) => ({\r\n    name: \"COSMOS_TRANSFER\",\r\n    description: \"Transfer tokens between addresses on the same chain\",\r\n    handler: async (\r\n        _runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        _callback?: HandlerCallback\r\n    ) => {\r\n        const cosmosTransferContext = composeContext({\r\n            state: state,\r\n            template: cosmosTransferTemplate,\r\n            templatingEngine: \"handlebars\",\r\n        });\r\n\r\n        const cosmosTransferContent = await generateObjectDeprecated({\r\n            runtime: _runtime,\r\n            context: cosmosTransferContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const paramOptions: CosmosTransferParams = {\r\n            chainName: cosmosTransferContent.chainName,\r\n            symbol: cosmosTransferContent.symbol,\r\n            amount: cosmosTransferContent.amount,\r\n            toAddress: cosmosTransferContent.toAddress,\r\n        };\r\n\r\n        try {\r\n            const walletProvider: ICosmosWalletChains =\r\n                await initWalletChainsData(_runtime);\r\n\r\n            const action = new CosmosTransferActionService(walletProvider);\r\n\r\n            const customAssets = (pluginOptions?.customChainData ?? []).map(\r\n                (chainData) => chainData.assets\r\n            );\r\n\r\n            const transferResp = await action.execute(\r\n                paramOptions,\r\n                customAssets\r\n            );\r\n\r\n            if (_callback) {\r\n                await _callback({\r\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nGas paid: ${transferResp.gasPaid}\\nTransaction Hash: ${transferResp.txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: transferResp.txHash,\r\n                        amount: paramOptions.amount,\r\n                        recipient: transferResp.to,\r\n                        chain: cosmosTransferContent.fromChain,\r\n                    },\r\n                });\r\n\r\n                const newMemory: Memory = {\r\n                    userId: _message.agentId,\r\n                    agentId: _message.agentId,\r\n                    roomId: _message.roomId,\r\n                    content: {\r\n                        text: `Transaction ${paramOptions.amount} ${paramOptions.symbol} to address ${paramOptions.toAddress} on chain ${paramOptions.toAddress} was successfully transfered.\\n Gas paid: ${transferResp.gasPaid}. Tx hash: ${transferResp.txHash}`,\r\n                    },\r\n                };\r\n\r\n                await _runtime.messageManager.createMemory(newMemory);\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error during token transfer:\", error);\r\n\r\n            if (_callback) {\r\n                await _callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n\r\n            const newMemory: Memory = {\r\n                userId: _message.agentId,\r\n                agentId: _message.agentId,\r\n                roomId: _message.roomId,\r\n                content: {\r\n                    text: `Transaction ${paramOptions.amount} ${paramOptions.symbol} to address ${paramOptions.toAddress} on chain ${paramOptions.toAddress} was unsuccessful.`,\r\n                },\r\n            };\r\n\r\n            await _runtime.messageManager.createMemory(newMemory);\r\n\r\n            return false;\r\n        }\r\n    },\r\n    template: cosmosTransferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const mnemonic = runtime.getSetting(\"COSMOS_RECOVERY_PHRASE\");\r\n        const availableChains = runtime.getSetting(\"COSMOS_AVAILABLE_CHAINS\");\r\n        const availableChainsArray = availableChains?.split(\",\");\r\n\r\n        return !(mnemonic && availableChains && availableChainsArray.length);\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Make transfer {{0.0001 OM}} to {{mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf}} on {{mantrachaintestnet2}}\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the transfer action?\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send {{10 OSMO}} to {{osmo13248w8dtnn07sxc3gq4l3ts4rvfyat6f4qkdd6}} on {{osmosistestnet}}\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the transfer action?\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send {{0.0001 OM}} on {{mantrachaintestnet2}} to {{mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf}}.\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the transfer action?\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"COSMOS_SEND_TOKENS\",\r\n        \"COSMOS_TOKEN_TRANSFER\",\r\n        \"COSMOS_MOVE_TOKENS\",\r\n    ],\r\n});\r\n","import { getChainByChainName } from \"@chain-registry/utils\";\r\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\r\nimport { chains } from \"chain-registry\";\r\nimport { CosmosWallet } from \"./cosmos-wallet\";\r\nimport type {\r\n    ICosmosPluginCustomChainData,\r\n    ICosmosWalletChains,\r\n    ICosmosWalletChainsData,\r\n} from \"../interfaces\";\r\nimport { getAvailableChains } from \"../helpers/cosmos-chains\";\r\nimport { SkipClient } from \"@skip-go/client\";\r\n\r\nexport class CosmosWalletChains implements ICosmosWalletChains {\r\n    public walletChainsData: ICosmosWalletChainsData = {};\r\n\r\n    private constructor(walletChainsData: ICosmosWalletChainsData) {\r\n        this.walletChainsData = walletChainsData;\r\n    }\r\n\r\n    public static async create(\r\n        mnemonic: string,\r\n        availableChainNames: string[],\r\n        customChainsData?: ICosmosPluginCustomChainData[\"chainData\"][]\r\n    ) {\r\n        const walletChainsData: ICosmosWalletChainsData = {};\r\n        const availableChains = getAvailableChains(chains, customChainsData);\r\n\r\n        for (const chainName of availableChainNames) {\r\n            const chain = getChainByChainName(availableChains, chainName);\r\n\r\n            if (!chain) {\r\n                throw new Error(`Chain ${chainName} not found`);\r\n            }\r\n\r\n            const wallet = await CosmosWallet.create(\r\n                mnemonic,\r\n                chain.bech32_prefix,\r\n                chain.apis.rpc[0].address\r\n            );\r\n\r\n            const chainRpcAddress = chain.apis?.rpc?.[0].address;\r\n\r\n            if (!chainRpcAddress) {\r\n                throw new Error(`RPC address not found for chain ${chainName}`);\r\n            }\r\n\r\n            const signingCosmWasmClient =\r\n                await SigningCosmWasmClient.connectWithSigner(\r\n                    chain.apis.rpc[0].address,\r\n                    wallet.directSecp256k1HdWallet\r\n                );\r\n\r\n            const skipClient = new SkipClient({\r\n                getCosmosSigner: async () => wallet.directSecp256k1HdWallet,\r\n            });\r\n\r\n            walletChainsData[chainName] = {\r\n                wallet,\r\n                signingCosmWasmClient,\r\n                skipClient,\r\n            };\r\n        }\r\n\r\n        return new CosmosWalletChains(walletChainsData);\r\n    }\r\n\r\n    public async getWalletAddress(chainName: string) {\r\n        const chainWalletsForGivenChain = this.walletChainsData[chainName];\r\n        if (!chainWalletsForGivenChain) {\r\n            throw new Error(`Invalid chain name. If ${chainName} is required, it should be added to env file.`);\r\n        }\r\n\r\n        return await chainWalletsForGivenChain.wallet.getWalletAddress();\r\n    }\r\n\r\n    public getSigningCosmWasmClient(chainName: string) {\r\n        return this.walletChainsData[chainName].signingCosmWasmClient;\r\n    }\r\n\r\n    public getSkipClient(chainName: string): SkipClient {\r\n        const chainWalletsForGivenChain = this.walletChainsData[chainName];\r\n\r\n        if (!chainWalletsForGivenChain) {\r\n            throw new Error(\"Invalid chain name\");\r\n        }\r\n\r\n        return chainWalletsForGivenChain.skipClient;\r\n    }\r\n    public async getUserAddress(chainName: string): Promise<string> {\r\n        return this.walletChainsData[chainName].wallet.getWalletAddress();\r\n    }\r\n}\r\n","import { DirectSecp256k1HdWallet } from \"@cosmjs/proto-signing\";\r\nimport { cosmos } from \"interchain\";\r\nimport type { ICosmosWallet } from \"../interfaces\";\r\n\r\ntype RPCQueryClient = Awaited<\r\n    ReturnType<typeof cosmos.ClientFactory.createRPCQueryClient>\r\n>;\r\n\r\nexport class CosmosWallet implements ICosmosWallet {\r\n    public rpcQueryClient: RPCQueryClient;\r\n    public directSecp256k1HdWallet: DirectSecp256k1HdWallet;\r\n\r\n    private constructor(\r\n        directSecp256k1HdWallet: DirectSecp256k1HdWallet,\r\n        rpcQueryClient: RPCQueryClient\r\n    ) {\r\n        this.directSecp256k1HdWallet = directSecp256k1HdWallet;\r\n        this.rpcQueryClient = rpcQueryClient;\r\n    }\r\n\r\n    public static async create(\r\n        mnemonic: string,\r\n        chainPrefix: string,\r\n        rpcEndpoint: string\r\n    ) {\r\n        const directSecp256k1HdWallet =\r\n            await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\r\n                prefix: chainPrefix,\r\n            });\r\n\r\n        const rpcQueryClient = await cosmos.ClientFactory.createRPCQueryClient({\r\n            rpcEndpoint,\r\n        });\r\n\r\n        return new CosmosWallet(directSecp256k1HdWallet, rpcQueryClient);\r\n    }\r\n\r\n    public async getWalletAddress() {\r\n        const [account] = await this.directSecp256k1HdWallet.getAccounts();\r\n\r\n        return account.address;\r\n    }\r\n\r\n    public async getWalletBalances() {\r\n        const walletAddress = await this.getWalletAddress();\r\n\r\n        const allBalances =\r\n            await this.rpcQueryClient.cosmos.bank.v1beta1.allBalances({\r\n                address: walletAddress,\r\n            });\r\n\r\n        return allBalances.balances;\r\n    }\r\n}\r\n","import type { Chain } from \"@chain-registry/types\";\r\n\r\nexport const getAvailableChains = (chains: Chain[], customChains: Chain[]) => [\r\n    ...(chains?.filter(\r\n        (chain) =>\r\n            !(customChains ?? [])\r\n                ?.map((customChain) => customChain.chain_name)\r\n                ?.includes(chain.chain_name)\r\n    ) ?? []),\r\n    ...(customChains ?? []),\r\n];\r\n","import type { IAgentRuntime } from \"@elizaos/core\";\r\nimport { CosmosWalletChains } from \"../../shared/entities/cosmos-wallet-chains-data\";\r\n\r\nexport const initWalletChainsData = async (runtime: IAgentRuntime) => {\r\n    const mnemonic = runtime.getSetting(\"COSMOS_RECOVERY_PHRASE\");\r\n    const availableChains = runtime.getSetting(\"COSMOS_AVAILABLE_CHAINS\");\r\n\r\n    if (!mnemonic) {\r\n        throw new Error(\"COSMOS_RECOVERY_PHRASE is missing\");\r\n    }\r\n\r\n    if (!availableChains) {\r\n        throw new Error(\"COSMOS_AVAILABLE_CHAINS is missing\");\r\n    }\r\n\r\n    const availableChainsArray = availableChains.split(\",\");\r\n\r\n    if (!availableChainsArray.length) {\r\n        throw new Error(\"COSMOS_AVAILABLE_CHAINS is empty\");\r\n    }\r\n\r\n    return await CosmosWalletChains.create(mnemonic, availableChainsArray);\r\n};\r\n","export const cosmosTransferTemplate = `Given the recent messages and cosmos wallet information below:\r\n{{recentMessages}}\r\n{{walletInfo}}\r\nExtract the following information about the requested transfer:\r\n1. **Amount**:\r\n   - Extract only the numeric value from the instruction.\r\n   - The value must be a string representing the amount in the display denomination (e.g., \"0.0001\" for OM, chimba, etc.). Do not include the symbol.\r\n\r\n2. **Recipient Address**:\r\n   - Must be a valid Bech32 address that matches the chain's address prefix.\r\n   - Example for \"mantra\": \"mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf\".\r\n\r\n3. **Token Symbol**:\r\n   - The symbol must be a string representing the token's display denomination (e.g., \"OM\", \"chimba\", etc.).\r\n\r\n4. **Chain name**:\r\n   - Identify the chain mentioned in the instruction where the transfer will take place (e.g., carbon, axelar, mantrachaintestnet2).\r\n   - Provide this as a string.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. All fields except 'token' are required:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": string, // The symbol of token.\r\n    \"amount\": string, // The amount to transfer as a string.\r\n    \"toAddress\": string, // The recipient's address.\r\n    \"chainName\": string // The chain name.\r\n\\`\\`\\`\r\n\r\nExample reponse for the input: \"Make transfer 0.0001 OM to mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf on mantrachaintestnet2\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": \"OM\",\r\n    \"amount\": \"0.0001\",\r\n    \"toAddress\": \"mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf\",\r\n    \"chainName\": \"mantrachaintestnet2\"\r\n\\`\\`\\`\r\nNow respond with a JSON markdown block containing only the extracted values.\r\n`;\r\n\r\nexport const cosmosIBCTransferTemplate = `Given the recent messages and cosmos wallet information below:\r\n{{recentMessages}}\r\n{{walletInfo}}\r\nExtract the following information about the requested IBC transfer:\r\n1. **Amount**:\r\n   - Extract only the numeric value from the instruction.\r\n   - The value must be a string representing the amount in the display denomination (e.g., \"0.0001\" for ATOM, OSMO, etc.). Do not include the symbol.\r\n\r\n2. **Recipient Address**:\r\n   - Must be a valid Bech32 address that matches the target chain's address prefix.\r\n   - Example for \"cosmoshub\": \"cosmos1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf\".\r\n\r\n3. **Token Symbol**:\r\n   - The symbol must be a string representing the token's display denomination (e.g., \"ATOM\", \"OSMO\", etc.).\r\n\r\n4. **Source Chain Name**:\r\n   - Identify the source chain mentioned in the instruction (e.g., cosmoshub, osmosis, axelar).\r\n   - Provide this as a string.\r\n\r\n5. **Target Chain Name**:\r\n   - Identify the target chain mentioned in the instruction (e.g., cosmoshub, osmosis, axelar).\r\n   - Provide this as a string.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. All fields are required:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": string, // The symbol of the token.\r\n    \"amount\": string, // The amount to transfer as a string.\r\n    \"toAddress\": string, // The recipient's address.\r\n    \"chainName\": string, // The source chain name.\r\n    \"targetChainName\": string // The target chain name.\r\n}\r\n\\`\\`\\`\r\n\r\nExample response for the input: \"Make an IBC transfer of 0.0001 ATOM to osmo1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf from cosmoshub to osmosis\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": \"ATOM\",\r\n    \"amount\": \"0.0001\",\r\n    \"toAddress\": \"osmo1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf\",\r\n    \"chainName\": \"cosmoshub\",\r\n    \"targetChainName\": \"osmosis\"\r\n}\r\n\\`\\`\\`\r\n\r\nNow respond with a JSON markdown block containing only the extracted values.\r\n`;\r\n\r\nexport const cosmosIBCSwapTemplate = `Given the recent messages and cosmos wallet information below:\r\n{{recentMessages}}\r\n{{walletInfo}}\r\nMake sure that you extracted latest info about requested swap from recent messages. Espessialy if there was another one placed before.\r\nAlso the extracted info MUST match the confirmed by user data in latest prompt in which you asked for confirmation!\r\nExtract the following information about the requested IBC swap:\r\n\r\n1. **fromChainName**:\r\n   - Identify the source chain mentioned in the instruction (e.g., cosmoshub, osmosis, axelar).\r\n   - Provide this as a string.\r\n\r\n2. **fromTokenSymbol**:\r\n   - The symbol must be a string representing the token's display denomination (e.g., \"ATOM\", \"OSMO\", etc.).\r\n\r\n3. **fromTokenAmount**:\r\n   - Extract only the numeric value from the instruction.\r\n   - The value must be a string representing the amount in the display denomination (e.g., \"0.0001\" for ATOM, OSMO, etc.). Do not include the symbol.\r\n\r\n4. **toChainName**:\r\n   - Identify the target chain mentioned in the instruction (e.g., cosmoshub, osmosis, axelar).\r\n   - Provide this as a string.\r\n\r\n5. **toTokenSymbol**:\r\n   - The symbol must be a string representing the result token's display denomination (e.g., \"OM\", \"ATOM\", etc.).\r\n\r\n6. **toTokenDenom**:\r\n    - optional parameter, if present must be a string. (uom, uatom, usomo, ibc/53046FFF6CAD109D8F9B2C7C9913853AD241928CD05CDDE419343D176025DA74 or other ibc/ values)\r\n\r\n7. **fromTokenDenom**:\r\n    - optional parameter, if present must be a string. (uom, uatom, usomo, ibc/53046FFF6CAD109D8F9B2C7C9913853AD241928CD05CDDE419343D176025DA74 or other ibc/ values)\r\n\r\nKeep in mind that toTokenDenom and fromTokenDenom are optional parameters.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. All fields are required:\r\n\\`\\`\\`json\r\n{\r\n    \"fromChainName\": string, // Source chain from which tokens will be taken to swap (String).\r\n    \"fromTokenSymbol\": string, // Symbol of token to be swapped (String).\r\n    \"fromTokenAmount\": string, // Amount of tokens to be swapped (String).\r\n    \"toChainName\": string, // Name of chain on which result token is hosted (String).\r\n    \"toTokenSymbol\": string, // Symbol of result token (String).\r\n    \"fromTokenDenom\": string, // denom of token to be swapped (String). Optional, might not be present.\r\n    \"toTokenDenom\": string // denom of result token (String). Optional, might not be present.\r\n}\r\n\\`\\`\\`\r\n\r\nExample response for the input: \"Swap {{1}} {{ATOM}} from {{cosmoshub}} to {{OM}} on {{mantrachain}}\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"fromChainName\": \"cosmoshub\",\r\n    \"fromTokenSymbol\": \"ATOM\",\r\n    \"fromTokenAmount\": \"1\",\r\n    \"fromTokenDenom\": null,\r\n    \"toChainName\": \"mantrachain\",\r\n    \"toTokenSymbol\": \"OM\",\r\n    \"toTokenDenom\": null\r\n}\r\n\\`\\`\\`\r\n\r\n\r\nExample response for the input: \"Swap {{1}} {{ATOM}} with denom {{uatom}} from {{cosmoshub}} to {{OM}} on {{mantrachain}}\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"fromChainName\": \"cosmoshub\",\r\n    \"fromTokenSymbol\": \"ATOM\",\r\n    \"fromTokenAmount\": \"1\",\r\n    \"fromTokenDenom\": \"uatom\",\r\n    \"toChainName\": \"mantrachain\",\r\n    \"toTokenSymbol\": \"OM\",\r\n    \"fromTokenDenom\": null\r\n}\r\n\\`\\`\\`\r\n\r\nExample response for the input: \"Swap {{1}} {{ATOM}} with denom {{uatom}} from {{cosmoshub}} to {{OM}} (denom: {{ibc/53046FFF6CAD109D8F9B2C7C9913853AD241928CD05CDDE419343D176025DA74}} ) on {{mantrachain}}\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"fromChainName\": \"cosmoshub\",\r\n    \"fromTokenSymbol\": \"ATOM\",\r\n    \"fromTokenAmount\": \"1\",\r\n    \"fromTokenDenom\": \"uatom\",\r\n    \"toChainName\": \"mantrachain\",\r\n    \"toTokenSymbol\": \"OM\",\r\n    \"toTokenDenom\": \"ibc/53046FFF6CAD109D8F9B2C7C9913853AD241928CD05CDDE419343D176025DA74\"\r\n}\r\n\\`\\`\\`\r\n\r\nExample response for the input: \"Swap {{100}} {{USDC}} with denom {{uusdc}} from {{axelar}} to {{ATOM}} on {{cosmoshub}}\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"fromChainName\": \"axelar\",\r\n    \"fromTokenSymbol\": \"USDC\",\r\n    \"fromTokenAmount\": \"100\",\r\n    \"fromTokenDenom\": \"uusdc\",\r\n    \"toChainName\": \"cosmoshub\",\r\n    \"toTokenSymbol\": \"ATOM\",\r\n}\r\n\\`\\`\\`\r\n\r\nNow respond with a JSON markdown block containing only the extracted values.\r\n`;\r\n","import {\r\n    convertDisplayUnitToBaseUnit,\r\n    getAssetBySymbol,\r\n} from \"@chain-registry/utils\";\r\nimport type { Coin } from \"@cosmjs/stargate\";\r\nimport { assets } from \"chain-registry\";\r\nimport { getPaidFeeFromReceipt } from \"../../../shared/helpers/cosmos-transaction-receipt.ts\";\r\nimport type {\r\n    ICosmosActionService,\r\n    ICosmosPluginCustomChainData,\r\n    ICosmosTransaction,\r\n    ICosmosWalletChains,\r\n} from \"../../../shared/interfaces.ts\";\r\nimport { CosmosTransactionFeeEstimator } from \"../../../shared/services/cosmos-transaction-fee-estimator.ts\";\r\nimport type { CosmosTransferParams } from \"../types.ts\";\r\nimport { getAvailableAssets } from \"../../../shared/helpers/cosmos-assets.ts\";\r\n\r\nexport class CosmosTransferActionService implements ICosmosActionService {\r\n    constructor(private cosmosWalletChains: ICosmosWalletChains) {\r\n        this.cosmosWalletChains = cosmosWalletChains;\r\n    }\r\n\r\n    async execute(\r\n        params: CosmosTransferParams,\r\n        customChainAssets?: ICosmosPluginCustomChainData[\"assets\"][]\r\n    ): Promise<ICosmosTransaction> {\r\n        const signingCosmWasmClient =\r\n            this.cosmosWalletChains.getSigningCosmWasmClient(params.chainName);\r\n\r\n        const senderAddress = await this.cosmosWalletChains.getWalletAddress(\r\n            params.chainName\r\n        );\r\n\r\n        if (!senderAddress) {\r\n            throw new Error(\r\n                `Cannot get wallet address for chain ${params.chainName}`\r\n            );\r\n        }\r\n\r\n        if (!params.toAddress) {\r\n            throw new Error(\"No receiver address\");\r\n        }\r\n\r\n        if (!params.symbol) {\r\n            throw new Error(\"No symbol\");\r\n        }\r\n\r\n        const availableAssets = getAvailableAssets(assets, customChainAssets);\r\n\r\n        const coin: Coin = {\r\n            denom: getAssetBySymbol(\r\n                availableAssets,\r\n                params.symbol,\r\n                params.chainName\r\n            ).base,\r\n            amount: convertDisplayUnitToBaseUnit(\r\n                availableAssets,\r\n                params.symbol,\r\n                params.amount,\r\n                params.chainName\r\n            ),\r\n        };\r\n\r\n        const gasFee =\r\n            await CosmosTransactionFeeEstimator.estimateGasForCoinTransfer(\r\n                signingCosmWasmClient,\r\n                senderAddress,\r\n                params.toAddress,\r\n                [coin]\r\n            );\r\n\r\n        const txDeliveryResponse = await signingCosmWasmClient.sendTokens(\r\n            senderAddress,\r\n            params.toAddress,\r\n            [coin],\r\n            { gas: gasFee.toString(), amount: [{ ...coin, amount: gasFee.toString() }] }\r\n        );\r\n\r\n        const gasPaid = getPaidFeeFromReceipt(txDeliveryResponse);\r\n\r\n        return {\r\n            from: senderAddress,\r\n            to: params.toAddress,\r\n            gasPaid,\r\n            txHash: txDeliveryResponse.transactionHash,\r\n        };\r\n    }\r\n}\r\n","import type {\r\n    DeliverTxResponse,\r\n    ExecuteResult,\r\n} from \"@cosmjs/cosmwasm-stargate\";\r\n\r\nconst DEFUALT_EVENTS = [\r\n    { eventName: \"fee_pay\", attributeType: \"fee\" },\r\n    { eventName: \"tip_refund\", attributeType: \"tip\" },\r\n];\r\n\r\nexport const getPaidFeeFromReceipt = (\r\n    receipt: ExecuteResult | DeliverTxResponse,\r\n    eventsToPickGasFor = DEFUALT_EVENTS\r\n) => {\r\n    const selectedEvents = receipt.events.filter(({ type }) =>\r\n        eventsToPickGasFor.map(({ eventName }) => eventName).includes(type)\r\n    );\r\n\r\n    return selectedEvents.reduce<number>((acc, { attributes }) => {\r\n        return (\r\n            acc +\r\n            attributes.reduce<number>((_acc, { key, value }) => {\r\n                if (\r\n                    eventsToPickGasFor.some(\r\n                        ({ attributeType }) => attributeType === key\r\n                    )\r\n                ) {\r\n                    const testValue = value.match(/\\d+/)?.[0];\r\n                    const testValueAsNumber = Number(testValue);\r\n\r\n                    if (Number.isNaN(testValueAsNumber)) {\r\n                        return _acc;\r\n                    }\r\n\r\n                    _acc = _acc + testValueAsNumber;\r\n\r\n                    return _acc;\r\n                }\r\n\r\n                return _acc;\r\n            }, 0)\r\n        );\r\n    }, 0);\r\n};\r\n","import type { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\r\nimport type { EncodeObject } from \"@cosmjs/proto-signing\";\r\nimport type { Coin, MsgSendEncodeObject } from \"@cosmjs/stargate\";\r\n\r\nexport class CosmosTransactionFeeEstimator {\r\n    private static async estimateGasForTransaction<\r\n        Message extends readonly EncodeObject[],\r\n    >(\r\n        signingCosmWasmClient: SigningCosmWasmClient,\r\n        senderAddress: string,\r\n        message: Message,\r\n        memo = \"\"\r\n    ): Promise<number> {\r\n        const estimatedGas = await signingCosmWasmClient.simulate(\r\n            senderAddress,\r\n            message,\r\n            memo\r\n        );\r\n\r\n        // Add 20% to the estimated gas to make sure we have enough gas to cover the transaction\r\n        const safeEstimatedGas = Math.ceil(estimatedGas * 1.2);\r\n\r\n        return safeEstimatedGas;\r\n    }\r\n\r\n    static estimateGasForCoinTransfer(\r\n        signingCosmWasmClient: SigningCosmWasmClient,\r\n        senderAddress: string,\r\n        recipientAddress: string,\r\n        amount: readonly Coin[],\r\n        memo = \"\"\r\n    ): Promise<number> {\r\n        return this.estimateGasForTransaction<MsgSendEncodeObject[]>(\r\n            signingCosmWasmClient,\r\n            senderAddress,\r\n            [\r\n                {\r\n                    typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\r\n                    value: {\r\n                        fromAddress: senderAddress,\r\n                        toAddress: recipientAddress,\r\n                        amount: [...amount],\r\n                    },\r\n                },\r\n            ],\r\n            memo\r\n        );\r\n    }\r\n}\r\n","import type { AssetList } from \"@chain-registry/types\";\r\n\r\nexport const getAvailableAssets = (\r\n    assets: AssetList[],\r\n    customAssets: AssetList[]\r\n) => {\r\n    const result: AssetList[] = [];\r\n    const safeAssets = assets || [];\r\n    const safeCustomAssets = customAssets || [];\r\n\r\n    // Get custom asset chain names for faster lookup\r\n    const customChainNames = new Set(\r\n        safeCustomAssets.map(asset => asset.chain_name)\r\n    );\r\n\r\n    // Add non-duplicate assets\r\n    for (const asset of safeAssets) {\r\n        if (!customChainNames.has(asset.chain_name)) {\r\n            result.push(asset);\r\n        }\r\n    }\r\n\r\n    // Add all custom assets\r\n    result.push(...safeCustomAssets);\r\n\r\n    return result;\r\n}","import type { IAgentRuntime } from \"@elizaos/core\";\r\nimport {\r\n    convertBaseUnitToDisplayUnit,\r\n    getSymbolByDenom,\r\n} from \"@chain-registry/utils\";\r\nimport { assets } from \"chain-registry\";\r\nimport { initWalletChainsData } from \"./utils\";\r\nimport type { ICosmosPluginOptions } from \"../../shared/interfaces\";\r\nimport { getAvailableAssets } from \"../../shared/helpers/cosmos-assets\";\r\n\r\nexport const createCosmosWalletProvider = (\r\n    pluginOptions: ICosmosPluginOptions\r\n) => ({\r\n    get: async (runtime: IAgentRuntime) => {\r\n        let providerContextMessage = \"\";\r\n\r\n        const customAssets = (pluginOptions?.customChainData ?? []).map(\r\n            (chainData) => chainData.assets\r\n        );\r\n\r\n        const availableAssets = getAvailableAssets(assets, customAssets);\r\n\r\n        try {\r\n            const provider = await initWalletChainsData(runtime);\r\n\r\n            for (const [chainName, { wallet }] of Object.entries(\r\n                provider.walletChainsData\r\n            )) {\r\n                const address = await wallet.getWalletAddress();\r\n                const balances = await wallet.getWalletBalances();\r\n\r\n                const convertedCoinsToDisplayDenom = balances.map((balance) => {\r\n                    const symbol = getSymbolByDenom(\r\n                        availableAssets,\r\n                        balance.denom,\r\n                        chainName\r\n                    );\r\n\r\n                    return {\r\n                        amount: symbol\r\n                            ? convertBaseUnitToDisplayUnit(\r\n                                  availableAssets,\r\n                                  symbol,\r\n                                  balance.amount,\r\n                                  chainName\r\n                              )\r\n                            : balance.amount,\r\n                        symbol: symbol ?? balance.denom,\r\n                    };\r\n                });\r\n\r\n                const balancesToString = convertedCoinsToDisplayDenom\r\n                    .map((balance) => `- ${balance.amount} ${balance.symbol}`)\r\n                    .join(\"\\n\");\r\n\r\n                providerContextMessage += `Chain: ${chainName}\\nAddress: ${address}\\nBalances:\\n${balancesToString}\\n________________\\n`;\r\n            }\r\n\r\n            return providerContextMessage;\r\n        } catch (error) {\r\n            console.error(\r\n                \"Error Initializing in Cosmos wallet provider:\",\r\n                error\r\n            );\r\n\r\n            return null;\r\n        }\r\n    },\r\n});\r\n","import {\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n} from \"@elizaos/core\";\r\n\r\nimport { initWalletChainsData } from \"../../providers/wallet/utils\";\r\nimport { cosmosIBCSwapTemplate } from \"../../templates\";\r\nimport type {\r\n    ICosmosPluginOptions,\r\n    ICosmosWalletChains,\r\n} from \"../../shared/interfaces\";\r\nimport type { IBCSwapActionParams } from \"./types.ts\";\r\nimport { IBCSwapAction } from \"./services/ibc-swap-action-service.ts\";\r\nimport { prepareAmbiguityErrorMessage } from \"./services/ibc-swap-utils.ts\";\r\n\r\nexport const createIBCSwapAction = (pluginOptions: ICosmosPluginOptions) => ({\r\n    name: \"COSMOS_IBC_SWAP\",\r\n    description: \"Swaps tokens on cosmos chains\",\r\n    handler: async (\r\n        _runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        _callback?: HandlerCallback\r\n    ) => {\r\n        const cosmosIBCSwapContext = composeContext({\r\n            state: state,\r\n            template: cosmosIBCSwapTemplate,\r\n            templatingEngine: \"handlebars\",\r\n        });\r\n\r\n        const cosmosIBCSwapContent = await generateObjectDeprecated({\r\n            runtime: _runtime,\r\n            context: cosmosIBCSwapContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const paramOptions: IBCSwapActionParams = {\r\n            fromChainName: cosmosIBCSwapContent.fromChainName,\r\n            fromTokenSymbol: cosmosIBCSwapContent.fromTokenSymbol,\r\n            fromTokenAmount: cosmosIBCSwapContent.fromTokenAmount,\r\n            toTokenSymbol: cosmosIBCSwapContent.toTokenSymbol,\r\n            toChainName: cosmosIBCSwapContent.toChainName,\r\n            toTokenDenom: cosmosIBCSwapContent?.toTokenDenom || undefined,\r\n            fromTokenDenom: cosmosIBCSwapContent?.fromTokenDenom || undefined,\r\n        };\r\n\r\n        console.log(\r\n            \"Parameters extracted from user prompt: \",\r\n            JSON.stringify(paramOptions, null, 2)\r\n        );\r\n\r\n        try {\r\n            const walletProvider: ICosmosWalletChains =\r\n                await initWalletChainsData(_runtime);\r\n\r\n            const action = new IBCSwapAction(walletProvider);\r\n\r\n            const customAssets = (pluginOptions?.customChainData ?? []).map(\r\n                (chainData) => chainData.assets\r\n            );\r\n\r\n            if (_callback) {\r\n\r\n                const swapResp = await action.execute(\r\n                    paramOptions,\r\n                    customAssets,\r\n                    _callback\r\n                );\r\n\r\n                const text =\r\n                    swapResp.status === \"STATE_COMPLETED_SUCCESS\"\r\n                        ? `Successfully swapped ${swapResp.fromTokenAmount} ${swapResp.fromTokenSymbol} tokens to ${swapResp.toTokenSymbol} on chain ${swapResp.toChainName}.\\nTransaction Hash: ${swapResp.txHash}`\r\n                        : `Error occured swapping ${swapResp.fromTokenAmount} ${swapResp.fromTokenSymbol} tokens to ${swapResp.toTokenSymbol} on chain ${swapResp.toChainName}.\\nTransaction Hash: ${swapResp.txHash}, try again`;\r\n                await _callback({\r\n                    text: text,\r\n                    content: {\r\n                        success:\r\n                            swapResp.status === \"STATE_COMPLETED_SUCCESS\",\r\n                        hash: swapResp.txHash,\r\n                        fromTokenAmount: paramOptions.fromTokenAmount,\r\n                        fromToken: paramOptions.fromTokenSymbol,\r\n                        toToken: paramOptions.toTokenSymbol,\r\n                        fromChain: paramOptions.fromChainName,\r\n                        toChain: paramOptions.toChainName,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error during ibc token swap:\", error);\r\n\r\n            const regex =\r\n                /Ambiguity Error.*value:([^\\s.]+)\\s+chainName:([^\\s.]+)/;\r\n            const match = error.message.match(regex);\r\n\r\n            if (match) {\r\n                const value = match[1];\r\n                const chainName = match[2];\r\n\r\n                if (_callback) {\r\n                    await _callback({\r\n                        text: prepareAmbiguityErrorMessage(value, chainName),\r\n                        content: { error: error.message },\r\n                    });\r\n                }\r\n            } else {\r\n                console.error(\"Unhandled error:\", error);\r\n\r\n                if (_callback) {\r\n                    await _callback({\r\n                        text: `Error ibc swapping tokens: ${error.message}`,\r\n                        content: { error: error.message },\r\n                    });\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: cosmosIBCSwapTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const mnemonic = runtime.getSetting(\"COSMOS_RECOVERY_PHRASE\");\r\n        const availableChains = runtime.getSetting(\"COSMOS_AVAILABLE_CHAINS\");\r\n        const availableChainsArray = availableChains?.split(\",\");\r\n\r\n        return !(mnemonic && availableChains && availableChainsArray.length);\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap {{0.0001 ATOM}} from {{cosmoshub}} to {{OM}} on {{mantrachain1}}\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the swap?\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Starting swap transaction. Keep in mind that it might take couple of minutes\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap {{0.0001 OM}} from {{mantrachain}} to {{OSMO}} on {{osmosis}}\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the swap?\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Starting swap transaction. Keep in mind that it might take couple of minutes\",\r\n                    action: \"COSMOS_IBC_SWAP\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"COSMOS_SWAP\", \"COSMOS_SWAP_IBC\"],\r\n});\r\n","import {assets, chains} from \"chain-registry\";\r\nimport type{\r\n    ICosmosActionService,\r\n    ICosmosPluginCustomChainData,\r\n    ICosmosSwap,\r\n    ICosmosWalletChains,\r\n} from \"../../../shared/interfaces.ts\";\r\nimport type{IBCSwapActionParams} from \"../types.ts\";\r\nimport {\r\n    convertDisplayUnitToBaseUnit,\r\n    getChainByChainName,\r\n    getChainNameByChainId,\r\n    getDenomBySymbol,\r\n    getExponentByDenom,\r\n} from \"@chain-registry/utils\";\r\nimport {getAvailableAssets} from \"../../../shared/helpers/cosmos-assets.ts\";\r\nimport type {HandlerCallback} from \"@elizaos/core\";\r\n\r\nexport class IBCSwapAction implements ICosmosActionService {\r\n    constructor(private cosmosWalletChains: ICosmosWalletChains) {\r\n        this.cosmosWalletChains = cosmosWalletChains;\r\n    }\r\n\r\n    async execute(\r\n        params: IBCSwapActionParams,\r\n        customChainAssets?: ICosmosPluginCustomChainData[\"assets\"][],\r\n        _callback?: HandlerCallback\r\n    ): Promise<ICosmosSwap> {\r\n        const fromChain = getChainByChainName(chains, params.fromChainName);\r\n        if (!fromChain) {\r\n            throw new Error(`Cannot find source chain: ${params.fromChainName}`);\r\n        }\r\n\r\n        const toChain = getChainByChainName(chains, params.toChainName);\r\n        if (!toChain) {\r\n            throw new Error(`Cannot find destination chain: ${params.toChainName}`);\r\n        }\r\n\r\n        const availableAssets = getAvailableAssets(assets, customChainAssets);\r\n\r\n        const denomFrom =\r\n            params.fromTokenDenom ||\r\n            getDenomBySymbol(\r\n                availableAssets,\r\n                params.fromTokenSymbol,\r\n                params.fromChainName\r\n            );\r\n        if (!denomFrom) {\r\n            throw new Error(`Cannot find source token denom for symbol: ${params.fromTokenSymbol}`);\r\n        }\r\n\r\n        const exponentFrom = getExponentByDenom(\r\n            availableAssets,\r\n            denomFrom,\r\n            params.fromChainName\r\n        );\r\n\r\n        const denomTo =\r\n            params.toTokenDenom ||\r\n            getDenomBySymbol(\r\n                availableAssets,\r\n                params.toTokenSymbol,\r\n                params.toChainName\r\n            );\r\n        if (!denomTo) {\r\n            throw new Error(`Cannot find destination token denom for symbol: ${params.toTokenSymbol}`);\r\n        }\r\n\r\n        console.log(\r\n            `Swap data: Swapping token ${denomFrom} with exponent ${exponentFrom} to token ${denomTo}`\r\n        );\r\n\r\n        const skipClient = this.cosmosWalletChains.getSkipClient(\r\n            params.fromChainName\r\n        );\r\n\r\n        const route = await skipClient.route({\r\n            smartSwapOptions: {},\r\n            amountOut: convertDisplayUnitToBaseUnit(\r\n                availableAssets,\r\n                params.fromTokenSymbol,\r\n                params.fromTokenAmount,\r\n                params.fromChainName\r\n            ),\r\n            sourceAssetDenom: denomFrom,\r\n            sourceAssetChainID: fromChain.chain_id,\r\n            destAssetDenom: denomTo,\r\n            destAssetChainID: toChain.chain_id,\r\n        });\r\n\r\n        // Required chains must be added to env file. Note that swaps can use intermediate chains to complete the swap request\r\n        // These chains should also be included\r\n        const userAddresses = await Promise.all(\r\n            route.requiredChainAddresses.map(async (chainID) => {\r\n                const chainName = getChainNameByChainId(chains, chainID);\r\n                return {\r\n                    chainID,\r\n                    address:\r\n                        await this.cosmosWalletChains.getWalletAddress(\r\n                            chainName\r\n                        ),\r\n                };\r\n            })\r\n        );\r\n\r\n        if (_callback) {\r\n            await _callback({\r\n                text: `Expected swap result: ${route.estimatedAmountOut} ${params.toTokenSymbol}, \\nEstimated Fee: ${route.estimatedFees}. \\nEstimated time: ${route.estimatedRouteDurationSeconds}`,\r\n            });\r\n        }\r\n\r\n        let result: ICosmosSwap;\r\n\r\n        await skipClient.executeRoute({\r\n            route,\r\n            userAddresses,\r\n            onTransactionCompleted: async (_chainID, txHash, status) => {\r\n                console.log(\r\n                    `Route completed with tx hash: ${txHash} & status: ${status.state}`\r\n                );\r\n\r\n                result = {\r\n                    status: status.state,\r\n                    fromChainName: params.fromChainName,\r\n                    fromTokenAmount: params.fromTokenAmount,\r\n                    fromTokenSymbol: params.fromTokenSymbol,\r\n                    toChainName: params.toChainName,\r\n                    toTokenSymbol: params.toTokenSymbol,\r\n                    txHash,\r\n                };\r\n            },\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n","import {assets} from \"chain-registry\";\r\n\r\nexport const prepareAmbiguityErrorMessage = (\r\n    coinSymbol: string,\r\n    chainName: string\r\n): string => {\r\n    const chainAssets = assets.find((chain) => chain.chain_name === chainName);\r\n    if (!chainAssets) {\r\n        throw new Error(`Chain ${chainName} not found in registry`);\r\n    }\r\n\r\n    const ambiguousAssets = chainAssets.assets.filter(\r\n        (asset) => asset.symbol === coinSymbol\r\n    );\r\n\r\n    console.log(\r\n        `Ambiguous Assets found: ${JSON.stringify(ambiguousAssets, null, 2)}`\r\n    );\r\n\r\n    const assetsText = `${ambiguousAssets.map((a) => `Symbol: ${a.symbol} Desc: ${a.description} Denom: ${a.base}`).join(\",\\n\")}`;\r\n\r\n    return `Error occured. Swap was not performed. Please provide denom for coin: ${coinSymbol}, on Chain Name: ${chainName}. It is necessary as the symbol ${coinSymbol} is not unique among coins on chain ${chainName}. \\n Select one from found assets:\\n${assetsText}`;\r\n};\r\n","import {\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { initWalletChainsData } from \"../../providers/wallet/utils\";\r\nimport {\r\n    cosmosIBCTransferTemplate,\r\n    cosmosTransferTemplate,\r\n} from \"../../templates\";\r\nimport type {\r\n    ICosmosPluginOptions,\r\n    ICosmosWalletChains,\r\n} from \"../../shared/interfaces\";\r\nimport type { IBCTransferActionParams } from \"./types\";\r\nimport { IBCTransferAction } from \"./services/ibc-transfer-action-service\";\r\nimport { bridgeDenomProvider } from \"./services/bridge-denom-provider\";\r\n\r\nexport const createIBCTransferAction = (\r\n    pluginOptions: ICosmosPluginOptions\r\n) => ({\r\n    name: \"COSMOS_IBC_TRANSFER\",\r\n    description: \"Transfer tokens between addresses on cosmos chains\",\r\n    handler: async (\r\n        _runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        _callback?: HandlerCallback\r\n    ) => {\r\n        const cosmosIBCTransferContext = composeContext({\r\n            state: state,\r\n            template: cosmosIBCTransferTemplate,\r\n            templatingEngine: \"handlebars\",\r\n        });\r\n\r\n        const cosmosIBCTransferContent = await generateObjectDeprecated({\r\n            runtime: _runtime,\r\n            context: cosmosIBCTransferContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const paramOptions: IBCTransferActionParams = {\r\n            chainName: cosmosIBCTransferContent.chainName,\r\n            symbol: cosmosIBCTransferContent.symbol,\r\n            amount: cosmosIBCTransferContent.amount,\r\n            toAddress: cosmosIBCTransferContent.toAddress,\r\n            targetChainName: cosmosIBCTransferContent.targetChainName,\r\n        };\r\n\r\n        try {\r\n            const walletProvider: ICosmosWalletChains =\r\n                await initWalletChainsData(_runtime);\r\n\r\n            const action = new IBCTransferAction(walletProvider);\r\n\r\n            const customAssets = (pluginOptions?.customChainData ?? []).map(\r\n                (chainData) => chainData.assets\r\n            );\r\n\r\n            const transferResp = await action.execute(\r\n                paramOptions,\r\n                bridgeDenomProvider,\r\n                customAssets\r\n            );\r\n\r\n            if (_callback) {\r\n                await _callback({\r\n                    text: `Successfully transferred ${paramOptions.amount} tokens from ${paramOptions.chainName} to ${paramOptions.toAddress} on ${paramOptions.targetChainName}\\nTransaction Hash: ${transferResp.txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: transferResp.txHash,\r\n                        amount: paramOptions.amount,\r\n                        recipient: transferResp.to,\r\n                        fromChain: paramOptions.chainName,\r\n                        toChain: paramOptions.targetChainName,\r\n                    },\r\n                });\r\n\r\n                const newMemory: Memory = {\r\n                    userId: _message.agentId,\r\n                    agentId: _message.agentId,\r\n                    roomId: _message.roomId,\r\n                    content: {\r\n                        text: `Transaction ${paramOptions.amount} ${paramOptions.symbol} to address ${paramOptions.toAddress} from chain ${paramOptions.chainName} to ${paramOptions.targetChainName} was successfully transferred. Tx hash: ${transferResp.txHash}`,\r\n                    },\r\n                };\r\n\r\n                await _runtime.messageManager.createMemory(newMemory);\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error during ibc token transfer:\", error);\r\n\r\n            if (_callback) {\r\n                await _callback({\r\n                    text: `Error ibc transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n\r\n            const newMemory: Memory = {\r\n                userId: _message.agentId,\r\n                agentId: _message.agentId,\r\n                roomId: _message.roomId,\r\n                content: {\r\n                    text: `Transaction ${paramOptions.amount} ${paramOptions.symbol} to address ${paramOptions.toAddress} on chain ${paramOptions.chainName} to ${paramOptions.targetChainName} was unsuccessful.`,\r\n                },\r\n            };\r\n\r\n            await _runtime.messageManager.createMemory(newMemory);\r\n\r\n            return false;\r\n        }\r\n    },\r\n    template: cosmosTransferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const mnemonic = runtime.getSetting(\"COSMOS_RECOVERY_PHRASE\");\r\n        const availableChains = runtime.getSetting(\"COSMOS_AVAILABLE_CHAINS\");\r\n        const availableChainsArray = availableChains?.split(\",\");\r\n\r\n        return !!(mnemonic && availableChains && availableChainsArray.length);\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Make an IBC transfer {{0.0001 ATOM}} to {{osmosis1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf}} from {{cosmoshub}} to {{osmosis}}\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the IBC transfer action?\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send {{50 OSMO}} to {{juno13248w8dtnn07sxc3gq4l3ts4rvfyat6f4qkdd6}} from {{osmosis}} to {{juno}}\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the IBC transfer action?\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Transfer {{0.005 JUNO}} from {{juno}} to {{cosmos1n0xv7z2pkl4eppnm7g2rqhe2q8q6v69h7w93fc}} on {{cosmoshub}}\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the IBC transfer action?\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_IBC_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"COSMOS_BRIDGE_TOKEN\",\r\n        \"COSMOS_IBC_SEND_TOKEN\",\r\n        \"COSMOS_TOKEN_IBC_TRANSFER\",\r\n        \"COSMOS_MOVE_IBC_TOKENS\",\r\n    ],\r\n});\r\n","import {\r\n    convertDisplayUnitToBaseUnit,\r\n    getAssetBySymbol,\r\n    getChainByChainName,\r\n} from \"@chain-registry/utils\";\r\nimport { assets, chains } from \"chain-registry\";\r\nimport type {\r\n    IDenomProvider,\r\n    ICosmosActionService,\r\n    ICosmosPluginCustomChainData,\r\n    ICosmosTransaction,\r\n    ICosmosWalletChains,\r\n} from \"../../../shared/interfaces.ts\";\r\nimport { getAvailableAssets } from \"../../../shared/helpers/cosmos-assets.ts\";\r\nimport type { IBCTransferActionParams } from \"../types.ts\";\r\n\r\nexport class IBCTransferAction implements ICosmosActionService {\r\n    constructor(private cosmosWalletChains: ICosmosWalletChains) {\r\n        this.cosmosWalletChains = cosmosWalletChains;\r\n    }\r\n\r\n    async execute(\r\n        params: IBCTransferActionParams,\r\n        bridgeDenomProvider: IDenomProvider,\r\n        customChainAssets?: ICosmosPluginCustomChainData[\"assets\"][]\r\n    ): Promise<ICosmosTransaction> {\r\n        const senderAddress = await this.cosmosWalletChains.getWalletAddress(\r\n            params.chainName\r\n        );\r\n\r\n        const skipClient = this.cosmosWalletChains.getSkipClient(\r\n            params.chainName\r\n        );\r\n\r\n        if (!senderAddress) {\r\n            throw new Error(\r\n                `Cannot get wallet address for chain ${params.chainName}`\r\n            );\r\n        }\r\n\r\n        if (!params.toAddress) {\r\n            throw new Error(\"No receiver address\");\r\n        }\r\n\r\n        if (!params.targetChainName) {\r\n            throw new Error(\"No target chain name\");\r\n        }\r\n\r\n        if (!params.chainName) {\r\n            throw new Error(\"No chain name\");\r\n        }\r\n\r\n        if (!params.symbol) {\r\n            throw new Error(\"No symbol\");\r\n        }\r\n\r\n        const availableAssets = getAvailableAssets(assets, customChainAssets);\r\n\r\n        const denom = getAssetBySymbol(\r\n            availableAssets,\r\n            params.symbol,\r\n            params.chainName\r\n        );\r\n\r\n        const sourceChain = getChainByChainName(chains, params.chainName);\r\n        const destChain = getChainByChainName(chains, params.targetChainName);\r\n\r\n        if (!denom.base) {\r\n            throw new Error(\"Cannot find asset\");\r\n        }\r\n\r\n        if (!sourceChain) {\r\n            throw new Error(\"Cannot find source chain\");\r\n        }\r\n\r\n        if (!destChain) {\r\n            throw new Error(\"Cannot find destination chain\");\r\n        }\r\n\r\n        const bridgeDenomResult = await bridgeDenomProvider(\r\n            denom.base,\r\n            sourceChain.chain_id,\r\n            destChain.chain_id\r\n        );\r\n\r\n        if (!bridgeDenomResult || !bridgeDenomResult.denom) {\r\n            throw new Error(\"Failed to get destination asset denomination\");\r\n        }\r\n\r\n        const destAssetDenom = bridgeDenomResult.denom;\r\n\r\n        const route = await skipClient.route({\r\n            destAssetChainID: destChain.chain_id,\r\n            destAssetDenom,\r\n            sourceAssetChainID: sourceChain.chain_id,\r\n            sourceAssetDenom: denom.base,\r\n            amountIn: convertDisplayUnitToBaseUnit(\r\n                availableAssets,\r\n                params.symbol,\r\n                params.amount,\r\n                params.chainName\r\n            ),\r\n            cumulativeAffiliateFeeBPS: \"0\",\r\n        });\r\n        const fromAddress = {\r\n            chainID: sourceChain.chain_id,\r\n            address: await this.cosmosWalletChains.getWalletAddress(params.chainName)\r\n        };\r\n\r\n        const toAddress = {\r\n            chainID: destChain.chain_id,\r\n            address: params.toAddress\r\n        };\r\n\r\n        const userAddresses = [fromAddress, toAddress];\r\n\r\n        let txHash: string | undefined;\r\n\r\n        try {\r\n            await skipClient.executeRoute({\r\n                route,\r\n                userAddresses,\r\n                onTransactionCompleted: async (_, executeRouteTxHash) => {\r\n                    txHash = executeRouteTxHash;\r\n                },\r\n            });\r\n        } catch (error) {\r\n            throw new Error(`Failed to execute route: ${error?.message}`);\r\n        }\r\n\r\n        if (!txHash) {\r\n            throw new Error(\"Transaction hash is undefined after executing route\");\r\n        }\r\n\r\n        return {\r\n            from: senderAddress,\r\n            to: params.toAddress,\r\n            txHash,\r\n        };\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport { skipApiAssetsFromSourceResponseSchema } from \"./schema\";\r\nimport type {\r\n    SkipApiAssetsFromSourceParams,\r\n    SkipApiAssetsFromSourceResponse,\r\n} from \"./interfaces\";\r\nimport { skipApiBaseUrl } from \"../config\";\r\n\r\ntype CacheKey = `${string}_${string}`;\r\nconst endpointPath = \"fungible/assets_from_source\";\r\n\r\nexport class SkipApiAssetsFromSourceFetcher {\r\n    private static instance: SkipApiAssetsFromSourceFetcher;\r\n    private cache: Map<CacheKey, SkipApiAssetsFromSourceResponse>;\r\n    private readonly apiUrl: string;\r\n\r\n    private constructor() {\r\n        this.cache = new Map();\r\n        this.apiUrl = `${skipApiBaseUrl}${endpointPath}`;\r\n    }\r\n\r\n    public static getInstance(): SkipApiAssetsFromSourceFetcher {\r\n        if (!SkipApiAssetsFromSourceFetcher.instance) {\r\n            SkipApiAssetsFromSourceFetcher.instance =\r\n                new SkipApiAssetsFromSourceFetcher();\r\n        }\r\n        return SkipApiAssetsFromSourceFetcher.instance;\r\n    }\r\n\r\n    private generateCacheKey(\r\n        sourceAssetDenom: string,\r\n        sourceAssetChainId: string\r\n    ): CacheKey {\r\n        return `${sourceAssetDenom}_${sourceAssetChainId}`;\r\n    }\r\n\r\n    public async fetch(\r\n        sourceAssetDenom: string,\r\n        sourceAssetChainId: string\r\n    ): Promise<SkipApiAssetsFromSourceResponse> {\r\n        const cacheKey = this.generateCacheKey(\r\n            sourceAssetDenom,\r\n            sourceAssetChainId\r\n        );\r\n\r\n        if (this.cache.has(cacheKey)) {\r\n            const cachedData = this.cache.get(cacheKey);\r\n            if (!cachedData) {\r\n                throw new Error(\"Cache inconsistency: data not found after check\");\r\n            }\r\n            return cachedData;\r\n        }\r\n\r\n        const requestData: SkipApiAssetsFromSourceParams = {\r\n            source_asset_denom: sourceAssetDenom,\r\n            source_asset_chain_id: sourceAssetChainId,\r\n            allow_multi_tx: false,\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(this.apiUrl, requestData, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                timeout: 5000,\r\n            });\r\n\r\n            const validResponse = skipApiAssetsFromSourceResponseSchema.parse(\r\n                response.data\r\n            );\r\n\r\n            this.cache.set(cacheKey, validResponse);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching assets:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const skipApiAssetsFromSourceParamsSchema = z.object({\r\n    source_asset_denom: z.string(),\r\n    source_asset_chain_id: z.string(),\r\n    allow_multi_tx: z.boolean(),\r\n});\r\n\r\nexport const skipApiAssetsFromSourceResponseAssetSchema = z.object({\r\n    denom: z.string(),\r\n    chain_id: z.string(),\r\n    origin_denom: z.string(),\r\n    origin_chain_id: z.string(),\r\n    trace: z.string(),\r\n    symbol: z.string().optional(),\r\n    name: z.string().optional(),\r\n    logo_uri: z.string().optional(),\r\n    decimals: z.number().optional(),\r\n    recommended_symbol: z.string().optional(),\r\n});\r\n\r\nexport const skipApiAssetsFromSourceResponseSchema = z.object({\r\n    dest_assets: z.record(\r\n        z.string(),\r\n        z.object({\r\n            assets: z.array(skipApiAssetsFromSourceResponseAssetSchema),\r\n        })\r\n    ),\r\n});\r\n","export const skipApiBaseUrl = \"https://api.skip.build/v2/\";\r\n","import type { IDenomProvider } from \"../../../shared/interfaces\";\r\nimport { SkipApiAssetsFromSourceFetcher } from \"../../../shared/services/skip-api/assets-from-source-fetcher/skip-api-assets-from-source-fetcher\";\r\n\r\nexport const bridgeDenomProvider: IDenomProvider = async (\r\n    sourceAssetDenom: string,\r\n    sourceAssetChainId: string,\r\n    destChainId: string\r\n) => {\r\n    const skipApiAssetsFromSourceFetcher =\r\n        SkipApiAssetsFromSourceFetcher.getInstance();\r\n    const bridgeData = await skipApiAssetsFromSourceFetcher.fetch(\r\n        sourceAssetDenom,\r\n        sourceAssetChainId\r\n    );\r\n\r\n    const destAssets = bridgeData.dest_assets[destChainId];\r\n\r\n    if (!destAssets?.assets) {\r\n        throw new Error(`No assets found for chain ${destChainId}`);\r\n    }\r\n\r\n    const ibcAssetData = destAssets.assets?.find(\r\n        ({ origin_denom }) => origin_denom === sourceAssetDenom\r\n    );\r\n\r\n    if (!ibcAssetData) {\r\n        throw new Error(`No matching asset found for denom ${sourceAssetDenom}`);\r\n    }\r\n\r\n    if (!ibcAssetData.denom) {\r\n        throw new Error(\"No IBC asset data\");\r\n    }\r\n\r\n    return {\r\n        denom: ibcAssetData.denom,\r\n    };\r\n};\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { createTransferAction } from \"./actions/transfer\";\r\nimport { createCosmosWalletProvider } from \"./providers/wallet\";\r\nimport type { ICosmosPluginOptions } from \"./shared/interfaces\";\r\nimport {createIBCSwapAction} from \"./actions/ibc-swap\";\r\nimport {createIBCTransferAction} from \"./actions/ibc-transfer\";\r\n\r\nexport const createCosmosPlugin = (\r\n    pluginOptions?: ICosmosPluginOptions\r\n): Plugin => ({\r\n    name: \"cosmos\",\r\n    description: \"Cosmos blockchain integration plugin\",\r\n    providers: [createCosmosWalletProvider(pluginOptions)],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [createTransferAction(pluginOptions), createIBCSwapAction(pluginOptions), createIBCTransferAction(pluginOptions),],\r\n});\r\n\r\nexport default createCosmosPlugin;\r\n"],"mappings":"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","names":["chains","assets","assets","assets","composeContext","generateObjectDeprecated","ModelClass","assets","chains","convertDisplayUnitToBaseUnit","getChainByChainName","getChainByChainName","chains","assets","convertDisplayUnitToBaseUnit","assets","composeContext","generateObjectDeprecated","ModelClass","composeContext","generateObjectDeprecated","ModelClass","convertDisplayUnitToBaseUnit","getAssetBySymbol","getChainByChainName","assets","chains","bridgeDenomProvider","assets","getAssetBySymbol","getChainByChainName","chains","convertDisplayUnitToBaseUnit","composeContext","generateObjectDeprecated","ModelClass"]}