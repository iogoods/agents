{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Message, XMTP, xmtpClient } from \"@xmtp/agent-starter\";\r\nimport {\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    Memory,\r\n    ModelClass,\r\n    stringToUuid,\r\n    messageCompletionFooter,\r\n    generateMessageResponse,\r\n    Client,\r\n    IAgentRuntime,\r\n} from \"@elizaos/core\";\r\n\r\nlet xmtp: XMTP = null;\r\nlet elizaRuntime: IAgentRuntime = null;\r\n\r\nexport const messageHandlerTemplate =\r\n    // {{goals}}\r\n    `# Action Examples\r\n{{actionExamples}}\r\n(Action examples are for reference only. Do not use the information from them in your response.)\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\n{{messageDirections}}\r\n\r\n{{recentMessages}}\r\n\r\n{{actions}}\r\n\r\n# Instructions: Write the next message for {{agentName}}.\r\n` + messageCompletionFooter;\r\n\r\nexport const XmtpClientInterface: Client = {\r\n    start: async (runtime: IAgentRuntime) => {\r\n        if (!xmtp) {\r\n            elizaRuntime = runtime;\r\n\r\n            xmtp = await xmtpClient({\r\n                walletKey: process.env.EVM_PRIVATE_KEY as string,\r\n                onMessage,\r\n            });\r\n\r\n            elizaLogger.success(\"âœ… XMTP client started\");\r\n            elizaLogger.info(`XMTP address: ${xmtp.address}`);\r\n            elizaLogger.info(`Talk to me on:`);\r\n            elizaLogger.log(\r\n                `Converse: https://converse.xyz/dm/${xmtp.address}`\r\n            );\r\n            elizaLogger.log(\r\n                `Coinbase Wallet: https://go.cb-w.com/messaging?address=${xmtp.address}`\r\n            );\r\n            elizaLogger.log(\r\n                `Web or Farcaster Frame: https://client.message-kit.org/?address=${xmtp.address}`\r\n            );\r\n\r\n            return xmtp;\r\n        }\r\n        return xmtp;\r\n    },\r\n    stop: async (_runtime: IAgentRuntime) => {\r\n        elizaLogger.warn(\"XMTP client does not support stopping yet\");\r\n    },\r\n};\r\n\r\nconst onMessage = async (message: Message) => {\r\n    elizaLogger.info(\r\n        `Decoded message: ${message.content?.text ?? \"no text\"} by ${\r\n            message.sender.address\r\n        }`\r\n    );\r\n\r\n    try {\r\n        const text = message?.content?.text ?? \"\";\r\n        const messageId = stringToUuid(message.id as string);\r\n        const userId = stringToUuid(message.sender.address as string);\r\n        const roomId = stringToUuid(message.group.id as string);\r\n        await elizaRuntime.ensureConnection(\r\n            userId,\r\n            roomId,\r\n            message.sender.address,\r\n            message.sender.address,\r\n            \"xmtp\"\r\n        );\r\n\r\n        const content: Content = {\r\n            text,\r\n            source: \"xmtp\",\r\n            inReplyTo: undefined,\r\n        };\r\n\r\n        const userMessage = {\r\n            content,\r\n            userId,\r\n            roomId,\r\n            agentId: elizaRuntime.agentId,\r\n        };\r\n\r\n        const memory: Memory = {\r\n            id: messageId,\r\n            agentId: elizaRuntime.agentId,\r\n            userId,\r\n            roomId,\r\n            content,\r\n            createdAt: Date.now(),\r\n        };\r\n\r\n        await elizaRuntime.messageManager.createMemory(memory);\r\n\r\n        const state = await elizaRuntime.composeState(userMessage, {\r\n            agentName: elizaRuntime.character.name,\r\n        });\r\n\r\n        const context = composeContext({\r\n            state,\r\n            template: messageHandlerTemplate,\r\n        });\r\n\r\n        const response = await generateMessageResponse({\r\n            runtime: elizaRuntime,\r\n            context,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n        const _newMessage = [\r\n            {\r\n                text: response?.text,\r\n                source: \"xmtp\",\r\n                inReplyTo: messageId,\r\n            },\r\n        ];\r\n        // save response to memory\r\n        const responseMessage = {\r\n            ...userMessage,\r\n            userId: elizaRuntime.agentId,\r\n            content: response,\r\n        };\r\n\r\n        await elizaRuntime.messageManager.createMemory(responseMessage);\r\n\r\n        if (!response) {\r\n            elizaLogger.error(\"No response from generateMessageResponse\");\r\n            return;\r\n        }\r\n\r\n        await elizaRuntime.evaluate(memory, state);\r\n\r\n        const _result = await elizaRuntime.processActions(\r\n            memory,\r\n            [responseMessage],\r\n            state,\r\n            async (newMessages) => {\r\n                if (newMessages.text) {\r\n                    _newMessage.push({\r\n                        text: newMessages.text,\r\n                        source: \"xmtp\",\r\n                        inReplyTo: undefined,\r\n                    });\r\n                }\r\n                return [memory];\r\n            }\r\n        );\r\n        for (const newMsg of _newMessage) {\r\n            await xmtp.send({\r\n                message: newMsg.text,\r\n                originalMessage: message,\r\n                metadata: {},\r\n            });\r\n        }\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error in onMessage\", error);\r\n    }\r\n};\r\n\r\nexport default XmtpClientInterface;\r\n"],"mappings":"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","names":[]}