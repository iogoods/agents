{"version":3,"sources":["../src/actions/token-search-address.ts","../src/birdeye.ts","../src/constants.ts","../src/utils.ts","../src/actions/token-search-symbol.ts","../src/actions/wallet-search-address.ts","../src/providers/agent-portfolio-provider.ts","../src/index.ts"],"sourcesContent":["import {\r\n    type Action,\r\n    type ActionExample,\r\n    elizaLogger,\r\n    formatTimestamp,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { BirdeyeProvider } from \"../birdeye\";\r\nimport type {\r\n    TokenMarketDataResponse,\r\n    TokenOverviewResponse,\r\n    TokenSecurityResponse,\r\n    TokenTradeDataSingleResponse,\r\n} from \"../types/api/token\";\r\nimport type { BaseAddress } from \"../types/shared\";\r\nimport {\r\n    extractAddresses,\r\n    formatPercentChange,\r\n    formatPrice,\r\n    formatValue,\r\n    shortenAddress,\r\n} from \"../utils\";\r\n\r\ntype TokenAddressSearchResult = {\r\n    overview: TokenOverviewResponse;\r\n    tradeData: TokenTradeDataSingleResponse;\r\n    security: TokenSecurityResponse;\r\n    marketData: TokenMarketDataResponse;\r\n};\r\n\r\nexport const tokenSearchAddressAction = {\r\n    name: \"TOKEN_SEARCH_ADDRESS\",\r\n    similes: [\r\n        \"SEARCH_TOKEN_ADDRESS\",\r\n        \"FIND_TOKEN_ADDRESS\",\r\n        \"LOOKUP_TOKEN_ADDRESS\",\r\n        \"CHECK_TOKEN_ADDRESS\",\r\n        \"GET_TOKEN_BY_ADDRESS\",\r\n        \"TOKEN_ADDRESS_INFO\",\r\n        \"TOKEN_ADDRESS_LOOKUP\",\r\n        \"TOKEN_ADDRESS_SEARCH\",\r\n        \"TOKEN_ADDRESS_CHECK\",\r\n        \"TOKEN_ADDRESS_DETAILS\",\r\n        \"TOKEN_CONTRACT_SEARCH\",\r\n        \"TOKEN_CONTRACT_LOOKUP\",\r\n        \"TOKEN_CONTRACT_INFO\",\r\n        \"TOKEN_CONTRACT_CHECK\",\r\n        \"VERIFY_TOKEN_ADDRESS\",\r\n        \"VALIDATE_TOKEN_ADDRESS\",\r\n        \"GET_TOKEN_INFO\",\r\n        \"TOKEN_INFO\",\r\n        \"TOKEN_REPORT\",\r\n        \"TOKEN_ANALYSIS\",\r\n        \"TOKEN_OVERVIEW\",\r\n        \"TOKEN_SUMMARY\",\r\n        \"TOKEN_INSIGHT\",\r\n        \"TOKEN_DATA\",\r\n        \"TOKEN_STATS\",\r\n        \"TOKEN_METRICS\",\r\n        \"TOKEN_PROFILE\",\r\n        \"TOKEN_REVIEW\",\r\n        \"TOKEN_CHECK\",\r\n        \"TOKEN_LOOKUP\",\r\n        \"TOKEN_FIND\",\r\n        \"TOKEN_DISCOVER\",\r\n        \"TOKEN_EXPLORE\",\r\n    ],\r\n    description:\r\n        \"Search for detailed token information including security and trade data by address\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        try {\r\n            const provider = new BirdeyeProvider(runtime.cacheManager);\r\n\r\n            // get all contract addresses from the message\r\n            const addresses = extractAddresses(message.content.text);\r\n\r\n            elizaLogger.info(\r\n                `Searching Birdeye provider for ${addresses.length} addresses`\r\n            );\r\n\r\n            // for each symbol, do a search in Birdeye. This will return a list of token results that may be amatch to the token symbol.\r\n            const results: TokenAddressSearchResult[] = await Promise.all(\r\n                addresses.map(async ({ address, chain: addressChain }) => {\r\n                    // address detection can't distinguish between evm chains, so we currently only do address search on ETH for EVM addresses. Future support will be added for other chains if the user requests it.\r\n                    const chain =\r\n                        addressChain === \"evm\" ? \"ethereum\" : addressChain;\r\n\r\n                    const [overview, marketData, security, tradeData] =\r\n                        await Promise.all([\r\n                            provider.fetchTokenOverview(\r\n                                {\r\n                                    address,\r\n                                },\r\n                                {\r\n                                    headers: {\r\n                                        \"x-chain\": chain,\r\n                                    },\r\n                                }\r\n                            ),\r\n                            provider.fetchTokenMarketData(\r\n                                {\r\n                                    address,\r\n                                },\r\n                                {\r\n                                    headers: {\r\n                                        \"x-chain\": chain,\r\n                                    },\r\n                                }\r\n                            ),\r\n                            provider.fetchTokenSecurityByAddress(\r\n                                {\r\n                                    address,\r\n                                },\r\n                                {\r\n                                    headers: {\r\n                                        \"x-chain\": chain,\r\n                                    },\r\n                                }\r\n                            ),\r\n                            provider.fetchTokenTradeDataSingle(\r\n                                {\r\n                                    address,\r\n                                },\r\n                                {\r\n                                    headers: {\r\n                                        \"x-chain\": chain,\r\n                                    },\r\n                                }\r\n                            ),\r\n                        ]);\r\n\r\n                    return {\r\n                        overview,\r\n                        marketData,\r\n                        security,\r\n                        tradeData,\r\n                    };\r\n                })\r\n            );\r\n\r\n            console.log(results);\r\n\r\n            const completeResults = `I performed a search for the token addresses you requested and found the following results:\\n\\n${results\r\n                .map(\r\n                    (result, i) =>\r\n                        `${formatTokenReport(addresses[i], i, result)}`\r\n                )\r\n                .join(\"\\n\\n\")}`;\r\n\r\n            callback?.({ text: completeResults });\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error in searchTokens handler:\", error.message);\r\n            callback?.({ text: `Error: ${error.message}` });\r\n            return false;\r\n        }\r\n    },\r\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\r\n        const addresses = extractAddresses(message.content.text);\r\n        return addresses.length > 0;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Search for 0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9\",\r\n                    action: \"TOKEN_SEARCH_ADDRESS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Look up contract So11111111111111111111111111111111111111112\",\r\n                    action: \"TOKEN_ADDRESS_LOOKUP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Check this address: 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\r\n                    action: \"CHECK_TOKEN_ADDRESS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Get info for 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\r\n                    action: \"TOKEN_ADDRESS_INFO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Analyze contract 0x514910771af9ca656af840dff83e8264ecf986ca\",\r\n                    action: \"TOKEN_CONTRACT_SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n\r\n// take all the details of the results and present to the user\r\nconst formatTokenReport = (\r\n    address: BaseAddress,\r\n    _index: number,\r\n    result: TokenAddressSearchResult\r\n) => {\r\n    let output = \"\";\r\n\r\n    if (result.overview?.data) {\r\n        output += \"\\n\";\r\n        output += \"Token Overview:\\n\";\r\n        output += `üìù Name: ${result.overview.data.name}\\n`;\r\n        output += result.overview.data.symbol\r\n            ? `üîñ Symbol: ${result.overview.data.symbol.toUpperCase()}\\n`\r\n            : \"\";\r\n        output += `üîó Address: ${address.address}\\n`;\r\n        output += `üî¢ Decimals: ${result.overview.data.decimals}\\n`;\r\n        output += \"\";\r\n        if (result.overview.data.extensions) {\r\n            const ext = result.overview.data.extensions;\r\n            output += \"üîó Links & Info:\\n\";\r\n            if (ext.website) output += `   ‚Ä¢ Website: ${ext.website}\\n`;\r\n            if (ext.twitter) output += `   ‚Ä¢ Twitter: ${ext.twitter}\\n`;\r\n            if (ext.telegram) output += `   ‚Ä¢ Telegram: ${ext.telegram}\\n`;\r\n            if (ext.discord) output += `   ‚Ä¢ Discord: ${ext.discord}\\n`;\r\n            if (ext.medium) output += `   ‚Ä¢ Medium: ${ext.medium}\\n`;\r\n            if (ext.coingeckoId)\r\n                output += `   ‚Ä¢ CoinGecko ID: ${ext.coingeckoId}\\n`;\r\n            if (ext.serumV3Usdc)\r\n                output += `   ‚Ä¢ Serum V3 USDC: ${ext.serumV3Usdc}\\n`;\r\n            if (ext.serumV3Usdt)\r\n                output += `   ‚Ä¢ Serum V3 USDT: ${ext.serumV3Usdt}\\n`;\r\n        }\r\n        output += `üíß Liquidity: ${formatValue(result.overview.data.liquidity)}\\n`;\r\n        output += `‚è∞ Last Trade Time: ${formatTimestamp(new Date(result.overview.data.lastTradeHumanTime).getTime() / 1000)}\\n`;\r\n        output += `üíµ Price: ${formatPrice(result.overview.data.price)}\\n`;\r\n        output += `üìú Description: ${result.overview.data.extensions?.description ?? \"N/A\"}\\n`;\r\n    }\r\n\r\n    if (result.marketData?.data) {\r\n        output += \"\\n\";\r\n        output += \"Market Data:\\n\";\r\n        output += `üíß Liquidity: ${formatValue(result.marketData.data.liquidity)}\\n`;\r\n        output += `üíµ Price: ${formatPrice(result.marketData.data.price)}\\n`;\r\n        output += `üì¶ Supply: ${formatValue(result.marketData.data.supply)}\\n`;\r\n        output += `üí∞ Market Cap: ${formatValue(result.marketData.data.marketcap)}\\n`;\r\n        output += `üîÑ Circulating Supply: ${formatValue(result.marketData.data.circulating_supply)}\\n`;\r\n        output += `üí∞ Circulating Market Cap: ${formatValue(result.marketData.data.circulating_marketcap)}\\n`;\r\n    }\r\n\r\n    if (result.tradeData?.data) {\r\n        output += \"\\n\";\r\n        output += \"Trade Data:\\n\";\r\n        output += `üë• Holders: ${result.tradeData.data.holder}\\n`;\r\n        output += `üìä Unique Wallets (24h): ${result.tradeData.data.unique_wallet_24h}\\n`;\r\n        output += `üìâ Price Change (24h): ${formatPercentChange(result.tradeData.data.price_change_24h_percent)}\\n`;\r\n        output += `üí∏ Volume (24h USD): ${formatValue(result.tradeData.data.volume_24h_usd)}\\n`;\r\n        output += `üíµ Current Price: $${formatPrice(result.tradeData.data.price)}\\n`;\r\n    }\r\n\r\n    if (result.security?.data) {\r\n        output += \"\\n\";\r\n        output += \"Ownership Distribution:\\n\";\r\n        output += `üè† Owner Address: ${shortenAddress(result.security.data.ownerAddress)}\\n`;\r\n        output += `üë®‚Äçüíº Creator Address: ${shortenAddress(result.security.data.creatorAddress)}\\n`;\r\n        output += `üì¶ Total Supply: ${formatValue(result.security.data.totalSupply)}\\n`;\r\n        output += result.security.data.proxied\r\n            ? `üåø Mintable: ${result.security.data.mintable ?? \"N/A\"}\\n`\r\n            : \"\";\r\n        output += result.security.data.proxy\r\n            ? `üîÑ Proxied: ${result.security.data.proxy ?? \"N/A\"}\\n`\r\n            : \"\";\r\n        output += result.security.data.securityChecks\r\n            ? `üîç Security Checks: ${JSON.stringify(result.security.data.securityChecks)}\\n`\r\n            : \"\";\r\n    }\r\n\r\n    return output ?? `No results found for ${address.address}`;\r\n};\r\n","import { elizaLogger, type ICacheManager, settings } from \"@elizaos/core\";\r\nimport NodeCache from \"node-cache\";\r\nimport * as path from \"node:path\";\r\nimport {\r\n    API_BASE_URL,\r\n    BIRDEYE_ENDPOINTS,\r\n    DEFAULT_MAX_RETRIES,\r\n    DEFAULT_SUPPORTED_SYMBOLS,\r\n    RETRY_DELAY_MS,\r\n} from \"./constants\";\r\nimport type { BirdeyeApiParams, BirdeyeApiResponse } from \"./types/api/common\";\r\nimport type {\r\n    BaseQuoteParams,\r\n    BaseQuoteResponse,\r\n    DefiHistoryPriceParams,\r\n    DefiHistoryPriceResponse,\r\n    DefiMultiPriceParams,\r\n    DefiMultiPriceParamsPOST,\r\n    DefiMultiPriceResponse,\r\n    DefiNetworksResponse,\r\n    DefiPriceParams,\r\n    DefiPriceResponse,\r\n    DefiTradesTokenParams,\r\n    DefiTradesTokenResponse,\r\n    HistoricalPriceUnixParams,\r\n    HistoricalPriceUnixResponse,\r\n    MultiPriceVolumeParams,\r\n    MultiPriceVolumeResponse,\r\n    OHLCVParams,\r\n    OHLCVResponse,\r\n    PriceVolumeParams,\r\n    PriceVolumeResponse,\r\n} from \"./types/api/defi\";\r\nimport type {\r\n    OHLCVPairParams,\r\n    OHLCVPairResponse,\r\n    PairOverviewMultiParams,\r\n    PairOverviewMultiResponse,\r\n    PairOverviewSingleParams,\r\n    PairOverviewSingleResponse,\r\n} from \"./types/api/pair\";\r\nimport type {\r\n    TokenMarketSearchParams,\r\n    TokenMarketSearchResponse,\r\n} from \"./types/api/search\";\r\nimport type {\r\n    AllMarketsParams,\r\n    AllMarketsResponse,\r\n    MintBurnParams,\r\n    MintBurnResponse,\r\n    NewListingParams,\r\n    NewListingResponse,\r\n    TokenCreationInfoParams,\r\n    TokenCreationInfoResponse,\r\n    TokenHoldersParams,\r\n    TokenHoldersResponse,\r\n    TokenListParams,\r\n    TokenListResponse,\r\n    TokenListV2Response,\r\n    TokenMarketDataParams,\r\n    TokenMarketDataResponse,\r\n    TokenMetadataMultiParams,\r\n    TokenMetadataMultiResponse,\r\n    TokenMetadataSingleParams,\r\n    TokenMetadataSingleResponse,\r\n    TokenOverviewParams,\r\n    TokenOverviewResponse,\r\n    TokenSecurityParams,\r\n    TokenSecurityResponse,\r\n    TokenTradeDataMultiParams,\r\n    TokenTradeDataMultiResponse,\r\n    TokenTradeDataSingleParams,\r\n    TokenTradeDataSingleResponse,\r\n    TokenTrendingParams,\r\n    TokenTrendingResponse,\r\n    TopTradersParams,\r\n    TopTradersResponse,\r\n} from \"./types/api/token\";\r\nimport type {\r\n    GainersLosersParams,\r\n    GainersLosersResponse,\r\n    TraderTransactionsSeekParams,\r\n    TraderTransactionsSeekResponse,\r\n} from \"./types/api/trader\";\r\nimport type {\r\n    WalletPortfolioMultichainParams,\r\n    WalletPortfolioMultichainResponse,\r\n    WalletPortfolioParams,\r\n    WalletPortfolioResponse,\r\n    WalletSimulationParams,\r\n    WalletSimulationResponse,\r\n    WalletTokenBalanceParams,\r\n    WalletTokenBalanceResponse,\r\n    WalletTransactionHistoryMultichainParams,\r\n    WalletTransactionHistoryMultichainResponse,\r\n    WalletTransactionHistoryParams,\r\n    WalletTransactionHistoryResponse,\r\n} from \"./types/api/wallet\";\r\nimport { convertToStringParams, waitFor } from \"./utils\";\r\n\r\ntype FetchParams<T> = T & {\r\n    headers?: Record<string, string>;\r\n};\r\n\r\nclass BaseCachedProvider {\r\n    private cache: NodeCache;\r\n\r\n    constructor(\r\n        private cacheManager: ICacheManager,\r\n        private cacheKey,\r\n        ttl?: number\r\n    ) {\r\n        this.cache = new NodeCache({ stdTTL: ttl || 300 });\r\n    }\r\n\r\n    private readFsCache<T>(key: string): Promise<T | null> {\r\n        return this.cacheManager.get<T>(path.join(this.cacheKey, key));\r\n    }\r\n\r\n    private writeFsCache<T>(key: string, data: T): Promise<void> {\r\n        return this.cacheManager.set(path.join(this.cacheKey, key), data, {\r\n            expires: Date.now() + 5 * 60 * 1000,\r\n        });\r\n    }\r\n\r\n    public async readFromCache<T>(key: string): Promise<T | null> {\r\n        // get memory cache first\r\n        const val = this.cache.get<T>(key);\r\n        if (val) {\r\n            return val;\r\n        }\r\n\r\n        const fsVal = await this.readFsCache<T>(key);\r\n        if (fsVal) {\r\n            // set to memory cache\r\n            this.cache.set(key, fsVal);\r\n        }\r\n\r\n        return fsVal;\r\n    }\r\n\r\n    public async writeToCache<T>(key: string, val: T): Promise<void> {\r\n        // Set in-memory cache\r\n        this.cache.set(key, val);\r\n\r\n        // Write to file-based cache\r\n        await this.writeFsCache(key, val);\r\n    }\r\n}\r\n\r\nexport class BirdeyeProvider extends BaseCachedProvider {\r\n    private symbolMap: Record<string, string>;\r\n    private maxRetries: number;\r\n\r\n    constructor(\r\n        cacheManager: ICacheManager,\r\n        symbolMap?: Record<string, string>,\r\n        maxRetries?: number\r\n    ) {\r\n        super(cacheManager, \"birdeye/data\");\r\n        this.symbolMap = symbolMap || DEFAULT_SUPPORTED_SYMBOLS;\r\n        this.maxRetries = maxRetries || DEFAULT_MAX_RETRIES;\r\n    }\r\n\r\n    /*\r\n     * COMMON FETCH FUNCTIONS\r\n     */\r\n    private async fetchWithRetry<T extends BirdeyeApiResponse>(\r\n        url: string,\r\n        options: RequestInit = {}\r\n    ): Promise<T> {\r\n        let attempts = 0;\r\n\r\n        // allow the user to override the chain\r\n        const chain =\r\n            options.headers?.[\"x-chain\"] || settings.BIRDEYE_CHAIN || \"solana\";\r\n\r\n        while (attempts < this.maxRetries) {\r\n            attempts++;\r\n            try {\r\n                const resp = await fetch(url, {\r\n                    ...options,\r\n                    headers: {\r\n                        Accept: \"application/json\",\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"x-chain\": chain,\r\n                        \"X-API-KEY\": settings.BIRDEYE_API_KEY || \"\",\r\n                        ...options.headers,\r\n                    },\r\n                });\r\n\r\n                if (!resp.ok) {\r\n                    const errorText = await resp.text();\r\n                    throw new Error(\r\n                        `HTTP error! status: ${resp.status}, message: ${errorText}`\r\n                    );\r\n                }\r\n\r\n                const rawData = await resp.json();\r\n                // If the response already has data and success fields, return it\r\n                if (\r\n                    rawData.data !== undefined &&\r\n                    rawData.success !== undefined\r\n                ) {\r\n                    return rawData as T;\r\n                }\r\n                // Otherwise wrap the response in the expected format\r\n                return {\r\n                    data: rawData,\r\n                    success: true,\r\n                } as T;\r\n            } catch (error) {\r\n                if (attempts === this.maxRetries) {\r\n                    // failed after all\r\n                    throw error;\r\n                }\r\n                await waitFor(RETRY_DELAY_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async fetchWithCacheAndRetry<T extends BirdeyeApiResponse>({\r\n        url,\r\n        params,\r\n        headers,\r\n        method = \"GET\",\r\n    }: {\r\n        url: string;\r\n        params?: BirdeyeApiParams;\r\n        headers?: Record<string, string>;\r\n        method?: \"GET\" | \"POST\";\r\n    }): Promise<T> {\r\n        const stringParams = convertToStringParams(params);\r\n        const fullUrl = `${API_BASE_URL}${url}`;\r\n        const cacheKey =\r\n            method === \"GET\"\r\n                ? `${url}?${new URLSearchParams(stringParams)}`\r\n                : `${url}:${JSON.stringify(params)}`;\r\n\r\n        const val = await this.readFromCache(cacheKey);\r\n        if (val) return val as T;\r\n\r\n        const urlWithParams =\r\n            method === \"GET\" && params\r\n                ? `${fullUrl}?${new URLSearchParams(stringParams)}`\r\n                : fullUrl;\r\n\r\n        elizaLogger.info(`Birdeye fetch: ${urlWithParams}`);\r\n\r\n        const data = await this.fetchWithRetry<T>(urlWithParams, {\r\n            method,\r\n            headers,\r\n            ...(method === \"POST\" &&\r\n                params && { body: JSON.stringify(params) }),\r\n        });\r\n\r\n        await this.writeToCache(cacheKey, data);\r\n        return data as T;\r\n    }\r\n\r\n    /*\r\n     * DEFI FETCH FUNCTIONS\r\n     */\r\n\r\n    // Get a list of all supported networks.\r\n    public async fetchDefiSupportedNetworks() {\r\n        return this.fetchWithCacheAndRetry<DefiNetworksResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.networks,\r\n        });\r\n    }\r\n\r\n    // Get price update of a token.\r\n    public async fetchDefiPrice(\r\n        params: DefiPriceParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiPriceResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.price,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get price updates of multiple tokens in a single API call. Maximum 100 tokens\r\n    public async fetchDefiPriceMultiple(\r\n        params: DefiMultiPriceParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiMultiPriceResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.price_multi,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get price updates of multiple tokens in a single API call. Maximum 100 tokens\r\n    public async fetchDefiPriceMultiple_POST(\r\n        params: DefiMultiPriceParamsPOST,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiMultiPriceResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.price_multi_POST,\r\n            params,\r\n            headers: options.headers,\r\n            method: \"POST\",\r\n        });\r\n    }\r\n\r\n    // Get historical price line chart of a token.\r\n    public async fetchDefiPriceHistorical(\r\n        params: DefiHistoryPriceParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiHistoryPriceResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.history_price,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get historical price by unix timestamp\r\n    public async fetchDefiPriceHistoricalByUnixTime(\r\n        params: HistoricalPriceUnixParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<HistoricalPriceUnixResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.historical_price_unix,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get list of trades of a certain token.\r\n    public async fetchDefiTradesToken(\r\n        params: DefiTradesTokenParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiTradesTokenResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.trades_token,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get list of trades of a certain pair or market.\r\n    public async fetchDefiTradesPair(\r\n        params: DefiTradesTokenParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiTradesTokenResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.trades_token,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get list of trades of a token with time bound option.\r\n    public async fetchDefiTradesTokenSeekByTime(\r\n        params: DefiTradesTokenParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiTradesTokenResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.trades_token_seek,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get list of trades of a certain pair or market with time bound option.\r\n    public async fetchDefiTradesPairSeekByTime(\r\n        params: DefiTradesTokenParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiTradesTokenResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.trades_pair_seek,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get OHLCV price of a token.\r\n    public async fetchDefiOHLCV(\r\n        params: OHLCVParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<OHLCVResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.ohlcv,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get OHLCV price of a pair.\r\n    public async fetchDefiOHLCVPair(\r\n        params: OHLCVPairParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<OHLCVPairResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.ohlcv_pair,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get OHLCV price of a base-quote pair.\r\n    public async fetchDefiOHLCVBaseQuote(\r\n        params: BaseQuoteParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<BaseQuoteResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.ohlcv_base_quote,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get price and volume of a token.\r\n    public async fetchDefiPriceVolume(\r\n        params: PriceVolumeParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<PriceVolumeResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.price_volume,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get price and volume updates of maximum 50 tokens\r\n    public async fetchDefiPriceVolumeMulti_POST(\r\n        params: MultiPriceVolumeParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<MultiPriceVolumeResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.price_volume_multi_POST,\r\n            params,\r\n            headers: options.headers,\r\n            method: \"POST\",\r\n        });\r\n    }\r\n\r\n    /*\r\n     * TOKEN FETCH FUNCTIONS\r\n     */\r\n\r\n    // Get token list of any supported chains.\r\n    public async fetchTokenList(\r\n        params: TokenListParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenListResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.list_all,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get token security of any supported chains.\r\n    public async fetchTokenSecurityByAddress(\r\n        params: TokenSecurityParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenSecurityResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.security,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get overview of a token.\r\n    public async fetchTokenOverview(\r\n        params: TokenOverviewParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenOverviewResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.overview,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get creation info of token\r\n    public async fetchTokenCreationInfo(\r\n        params: TokenCreationInfoParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenCreationInfoResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.creation_info,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Retrieve a dynamic and up-to-date list of trending tokens based on specified sorting criteria.\r\n    public async fetchTokenTrending(\r\n        params?: TokenTrendingParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenTrendingResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.trending,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // This endpoint facilitates the retrieval of a list of tokens on a specified blockchain network. This upgraded version is exclusive to business and enterprise packages. By simply including the header for the requested blockchain without any query parameters, business and enterprise users can get the full list of tokens on the specified blockchain in the URL returned in the response. This removes the need for the limit response of the previous version and reduces the workload of making multiple calls.\r\n    public async fetchTokenListV2_POST(\r\n        params: FetchParams<Record<string, never>>\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenListV2Response>({\r\n            url: BIRDEYE_ENDPOINTS.token.list_all_v2_POST,\r\n            params,\r\n            headers: params.headers,\r\n            method: \"POST\",\r\n        });\r\n    }\r\n\r\n    // Get newly listed tokens of any supported chains.\r\n    public async fetchTokenNewListing(\r\n        params?: NewListingParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<NewListingResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.new_listing,\r\n            params,\r\n            headers: options?.headers,\r\n        });\r\n    }\r\n\r\n    // Get top traders of given token.\r\n    public async fetchTokenTopTraders(\r\n        params: TopTradersParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TopTradersResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.top_traders,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // The API provides detailed information about the markets for a specific cryptocurrency token on a specified blockchain. Users can retrieve data for one or multiple markets related to a single token. This endpoint requires the specification of a token address and the blockchain to filter results. Additionally, it supports optional query parameters such as offset, limit, and required sorting by liquidity or sort type (ascending or descending) to refine the output.\r\n    public async fetchTokenAllMarketsList(\r\n        params: AllMarketsParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<AllMarketsResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.all_markets,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get metadata of single token\r\n    public async fetchTokenMetadataSingle(\r\n        params: TokenMetadataSingleParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenMetadataSingleResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.metadata_single,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get metadata of multiple tokens\r\n    public async fetchTokenMetadataMulti(\r\n        params: TokenMetadataMultiParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenMetadataMultiResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.metadata_multi,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get market data of single token\r\n    public async fetchTokenMarketData(\r\n        params: TokenMarketDataParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenMarketDataResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.market_data,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get trade data of single token\r\n    public async fetchTokenTradeDataSingle(\r\n        params: TokenTradeDataSingleParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenTradeDataSingleResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.trade_data_single,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get trade data of multiple tokens\r\n    public async fetchTokenTradeDataMultiple(\r\n        params: TokenTradeDataMultiParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenTradeDataMultiResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.trade_data_multi,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get top holder list of the given token\r\n    public async fetchTokenHolders(\r\n        params: TokenHoldersParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenHoldersResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.holders,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get mint/burn transaction list of the given token. Only support solana currently\r\n    public async fetchTokenMintBurn(\r\n        params: MintBurnParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<MintBurnResponse>({\r\n            url: BIRDEYE_ENDPOINTS.token.mint_burn,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * WALLET FETCH FUNCTIONS\r\n     */\r\n    public async fetchWalletSupportedNetworks(\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<DefiNetworksResponse>({\r\n            url: BIRDEYE_ENDPOINTS.defi.networks,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    public async fetchWalletPortfolio(\r\n        params: WalletPortfolioParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<WalletPortfolioResponse>({\r\n            url: BIRDEYE_ENDPOINTS.wallet.portfolio,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @deprecated This endpoint will be decommissioned on Feb 1st, 2025.\r\n     */\r\n    public async fetchWalletPortfolioMultichain(\r\n        params: WalletPortfolioMultichainParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<WalletPortfolioMultichainResponse>({\r\n            url: BIRDEYE_ENDPOINTS.wallet.portfolio_multichain,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    public async fetchWalletTokenBalance(\r\n        params: WalletTokenBalanceParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<WalletTokenBalanceResponse>({\r\n            url: BIRDEYE_ENDPOINTS.wallet.token_balance,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    public async fetchWalletTransactionHistory(\r\n        params: WalletTransactionHistoryParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<WalletTransactionHistoryResponse>({\r\n            url: BIRDEYE_ENDPOINTS.wallet.transaction_history,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @deprecated This endpoint will be decommissioned on Feb 1st, 2025.\r\n     */\r\n    public async fetchWalletTransactionHistoryMultichain(\r\n        params: WalletTransactionHistoryMultichainParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<WalletTransactionHistoryMultichainResponse>(\r\n            {\r\n                url: BIRDEYE_ENDPOINTS.wallet.transaction_history_multichain,\r\n                params,\r\n                headers: options.headers,\r\n            }\r\n        );\r\n    }\r\n\r\n    public async fetchWalletTransactionSimulate_POST(\r\n        params: WalletSimulationParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<WalletSimulationResponse>({\r\n            url: BIRDEYE_ENDPOINTS.wallet.transaction_simulation_POST,\r\n            params,\r\n            headers: options.headers,\r\n            method: \"POST\",\r\n        });\r\n    }\r\n\r\n    /*\r\n     * TRADER FETCH FUNCTIONS\r\n     */\r\n\r\n    // The API provides detailed information top gainers/losers\r\n    public async fetchTraderGainersLosers(\r\n        params: GainersLosersParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<GainersLosersResponse>({\r\n            url: BIRDEYE_ENDPOINTS.trader.gainers_losers,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get list of trades of a trader with time bound option.\r\n    public async fetchTraderTransactionsSeek(\r\n        params: TraderTransactionsSeekParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TraderTransactionsSeekResponse>({\r\n            url: BIRDEYE_ENDPOINTS.trader.trades_seek,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * PAIR FETCH FUNCTIONS\r\n     */\r\n    public async fetchPairOverviewSingle(\r\n        params: PairOverviewSingleParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<PairOverviewSingleResponse>({\r\n            url: BIRDEYE_ENDPOINTS.pair.overview_single,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    // Get overview of multiple pairs\r\n    public async fetchMultiPairOverview(\r\n        params: PairOverviewMultiParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<PairOverviewMultiResponse>({\r\n            url: BIRDEYE_ENDPOINTS.pair.overview_multi,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    public async fetchPairOverviewMultiple(\r\n        params: PairOverviewMultiParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<PairOverviewMultiResponse>({\r\n            url: BIRDEYE_ENDPOINTS.pair.overview_multi,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * SEARCH FETCH FUNCTIONS\r\n     */\r\n    public async fetchSearchTokenMarketData(\r\n        params: TokenMarketSearchParams,\r\n        options: { headers?: Record<string, string> } = {}\r\n    ) {\r\n        return this.fetchWithCacheAndRetry<TokenMarketSearchResponse>({\r\n            url: BIRDEYE_ENDPOINTS.search.token_market,\r\n            params,\r\n            headers: options.headers,\r\n        });\r\n    }\r\n}\r\n","export const DEFAULT_MAX_RETRIES = 3;\r\n\r\nexport const DEFAULT_SUPPORTED_SYMBOLS = {\r\n    SOL: \"So11111111111111111111111111111111111111112\",\r\n    BTC: \"qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL\",\r\n    ETH: \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\r\n    Example: \"2weMjPLLybRMMva1fM3U31goWWrCpF59CHWNhnCJ9Vyh\",\r\n};\r\n\r\nexport const API_BASE_URL = \"https://public-api.birdeye.so\";\r\n\r\nexport const RETRY_DELAY_MS = 2_000;\r\n\r\nexport const BIRDEYE_ENDPOINTS = {\r\n    defi: {\r\n        networks: \"/defi/networks\", // https://docs.birdeye.so/reference/get_defi-networks\r\n        price: \"/defi/price\", // https://docs.birdeye.so/reference/get_defi-price\r\n        price_multi: \"/defi/multi_price\", // https://docs.birdeye.so/reference/get_defi-multi-price\r\n        price_multi_POST: \"/defi/multi_price\", // https://docs.birdeye.so/reference/post_defi-multi-price\r\n        history_price: \"/defi/history_price\", // https://docs.birdeye.so/reference/get_defi-history-price\r\n        historical_price_unix: \"/defi/historical_price_unix\", // https://docs.birdeye.so/reference/get_defi-historical-price-unix\r\n        trades_token: \"/defi/txs/token\", // https://docs.birdeye.so/reference/get_defi-txs-token\r\n        trades_pair: \"/defi/txs/pair\", // https://docs.birdeye.so/reference/get_defi-txs-pair\r\n        trades_token_seek: \"/defi/txs/token/seek_by_time\", // https://docs.birdeye.so/reference/get_defi-txs-token-seek-by-time\r\n        trades_pair_seek: \"/defi/txs/pair/seek_by_time\", // https://docs.birdeye.so/reference/get_defi-txs-pair-seek-by-time\r\n        ohlcv: \"/defi/ohlcv\", // https://docs.birdeye.so/reference/get_defi-ohlcv\r\n        ohlcv_pair: \"/defi/ohlcv/pair\", // https://docs.birdeye.so/reference/get_defi-ohlcv-pair\r\n        ohlcv_base_quote: \"/defi/ohlcv/base_quote\", // https://docs.birdeye.so/reference/get_defi-ohlcv-base-quote\r\n        price_volume: \"/defi/price_volume/single\", // https://docs.birdeye.so/reference/get_defi-price-volume-single\r\n        price_volume_multi: \"/defi/price_volume/multi\", // https://docs.birdeye.so/reference/get_defi-price-volume-multi\r\n        price_volume_multi_POST: \"/defi/price_volume/multi\", // https://docs.birdeye.so/reference/post_defi-price-volume-multi\r\n    },\r\n    token: {\r\n        list_all: \"/defi/tokenlist\", // https://docs.birdeye.so/reference/get_defi-tokenlist\r\n        security: \"/defi/token_security\", // https://docs.birdeye.so/reference/get_defi-token-security\r\n        overview: \"/defi/token_overview\", // https://docs.birdeye.so/reference/get_defi-token-overview\r\n        creation_info: \"/defi/token_creation_info\", // https://docs.birdeye.so/reference/get_defi-token-creation-info\r\n        trending: \"/defi/token_trending\", // https://docs.birdeye.so/reference/get_defi-token-trending\r\n        list_all_v2_POST: \"/defi/v2/tokens/all\", // https://docs.birdeye.so/reference/post_defi-v2-tokens-all\r\n        new_listing: \"/defi/v2/tokens/new_listing\", // https://docs.birdeye.so/reference/get_defi-v2-tokens-new-listing\r\n        top_traders: \"/defi/v2/tokens/top_traders\", // https://docs.birdeye.so/reference/get_defi-v2-tokens-top-traders\r\n        all_markets: \"/defi/v2/markets\", // https://docs.birdeye.so/reference/get_defi-v2-markets\r\n        metadata_single: \"/defi/v3/token/meta-data/single\", // https://docs.birdeye.so/reference/get_defi-v3-token-meta-data-single\r\n        metadata_multi: \"/defi/v3/token/meta-data/multiple\", // https://docs.birdeye.so/reference/get_defi-v3-token-meta-data-multiple\r\n        market_data: \"/defi/v3/token/market-data\", // https://docs.birdeye.so/reference/get_defi-v3-token-market-data\r\n        trade_data_single: \"/defi/v3/token/trade-data/single\", // https://docs.birdeye.so/reference/get_defi-v3-token-trade-data-single\r\n        trade_data_multi: \"/defi/v3/token/trade-data/multiple\", // https://docs.birdeye.so/reference/get_defi-v3-token-trade-data-multiple\r\n        holders: \"/defi/v3/token/holder\", // https://docs.birdeye.so/reference/get_defi-v3-token-holder\r\n        mint_burn: \"/defi/v3/token/mint-burn-txs\", // https://docs.birdeye.so/reference/get_defi-v3-token-mint-burn-txs\r\n    },\r\n    wallet: {\r\n        networks: \"/v1/wallet/list_supported_chain\", // https://docs.birdeye.so/reference/get_v1-wallet-list-supported-chain\r\n        portfolio: \"/v1/wallet/token_list\", // https://docs.birdeye.so/reference/get_v1-wallet-token-list\r\n        portfolio_multichain: \"/v1/wallet/multichain_token_list\", // https://docs.birdeye.so/reference/get_v1-wallet-multichain-token-list\r\n        token_balance: \"/v1/wallet/token_balance\", // https://docs.birdeye.so/reference/get_v1-wallet-token-balance\r\n        transaction_history: \"/v1/wallet/tx_list\", // https://docs.birdeye.so/reference/get_v1-wallet-tx-list\r\n        transaction_history_multichain: \"/v1/wallet/multichain_tx_list\", // https://docs.birdeye.so/reference/get_v1-wallet-multichain-tx-list\r\n        transaction_simulation_POST: \"/v1/wallet/simulate\", // https://docs.birdeye.so/reference/post_v1-wallet-simulate\r\n    },\r\n    trader: {\r\n        gainers_losers: \"/trader/gainers-losers\", // https://docs.birdeye.so/reference/get_trader-gainers-losers\r\n        trades_seek: \"/trader/txs/seek_by_time\", // https://docs.birdeye.so/reference/get_trader-txs-seek-by-time\r\n    },\r\n    pair: {\r\n        overview_multi: \"/defi/v3/pair/overview/multiple\", // https://docs.birdeye.so/reference/get_defi-v3-pair-overview-multiple\r\n        overview_single: \"/defi/v3/pair/overview/single\", // https://docs.birdeye.so/reference/get_defi-v3-pair-overview-single\r\n    },\r\n    search: {\r\n        token_market: \"/defi/v3/search\", // https://docs.birdeye.so/reference/get_defi-v3-search\r\n    },\r\n};\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport type { BirdeyeApiParams } from \"./types/api/common\";\r\nimport type { TokenMarketSearchResponse, TokenResult } from \"./types/api/search\";\r\nimport type { TokenMetadataSingleResponse } from \"./types/api/token\";\r\nimport type { WalletPortfolioResponse } from \"./types/api/wallet\";\r\nimport type { BaseAddress, BirdeyeSupportedChain } from \"./types/shared\";\r\n\r\n// Constants\r\nexport const BASE_URL = \"https://public-api.birdeye.so\";\r\n\r\nexport const BIRDEYE_SUPPORTED_CHAINS = [\r\n    \"solana\",\r\n    \"ethereum\",\r\n    \"arbitrum\",\r\n    \"avalanche\",\r\n    \"bsc\",\r\n    \"optimism\",\r\n    \"polygon\",\r\n    \"base\",\r\n    \"zksync\",\r\n    \"sui\",\r\n    \"solana\",\r\n    \"evm\", // EVM-compatible chains but we don't know the chain\r\n] as const;\r\n\r\n// Chain abbreviations and alternative names mapping\r\nexport const CHAIN_ALIASES: Record<string, BirdeyeSupportedChain> = {\r\n    // Solana\r\n    sol: \"solana\",\r\n\r\n    // Ethereum\r\n    eth: \"ethereum\",\r\n    ether: \"ethereum\",\r\n\r\n    // Arbitrum\r\n    arb: \"arbitrum\",\r\n    arbitrumone: \"arbitrum\",\r\n\r\n    // Avalanche\r\n    avax: \"avalanche\",\r\n\r\n    // BSC\r\n    bnb: \"bsc\",\r\n    binance: \"bsc\",\r\n    \"binance smart chain\": \"bsc\",\r\n\r\n    // Optimism\r\n    op: \"optimism\",\r\n    opti: \"optimism\",\r\n\r\n    // Polygon\r\n    matic: \"polygon\",\r\n    poly: \"polygon\",\r\n\r\n    // Base\r\n    // no common abbreviations\r\n\r\n    // zkSync\r\n    zks: \"zksync\",\r\n    zk: \"zksync\",\r\n\r\n    // Sui\r\n    // no common abbreviations\r\n} as const;\r\n\r\nexport class BirdeyeApiError extends Error {\r\n    constructor(\r\n        public status: number,\r\n        message: string\r\n    ) {\r\n        super(message);\r\n        this.name = \"BirdeyeApiError\";\r\n    }\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n    success: boolean;\r\n    data: T;\r\n    error?: string;\r\n}\r\n\r\n// Time-related types and constants\r\nexport const TIME_UNITS = {\r\n    second: 1,\r\n    minute: 60,\r\n    hour: 3600,\r\n    day: 86400,\r\n    week: 604800,\r\n    month: 2592000,\r\n} as const;\r\n\r\nexport const TIMEFRAME_KEYWORDS = {\r\n    \"1m\": 60,\r\n    \"3m\": 180,\r\n    \"5m\": 300,\r\n    \"15m\": 900,\r\n    \"30m\": 1800,\r\n    \"1h\": 3600,\r\n    \"2h\": 7200,\r\n    \"4h\": 14400,\r\n    \"6h\": 21600,\r\n    \"12h\": 43200,\r\n    \"1d\": 86400,\r\n    \"1w\": 604800,\r\n} as const;\r\n\r\nexport type TimeUnit = keyof typeof TIME_UNITS;\r\nexport type Timeframe = keyof typeof TIMEFRAME_KEYWORDS;\r\n\r\n// Helper functions\r\nexport const extractChain = (text: string): BirdeyeSupportedChain => {\r\n    // Check for SUI address (0x followed by 64 hex chars)\r\n    if (text.match(/0x[a-fA-F0-9]{64}/)) {\r\n        return \"sui\";\r\n    }\r\n    // Check for EVM address (0x followed by 40 hex chars)\r\n    if (text.match(/0x[a-fA-F0-9]{40}/)) {\r\n        return \"ethereum\";\r\n    }\r\n    // Default to solana\r\n    return \"solana\";\r\n};\r\n\r\nexport const extractAddresses = (text: string): BaseAddress[] => {\r\n    const addresses: BaseAddress[] = [];\r\n\r\n    // EVM-compatible chains (Ethereum, Arbitrum, Avalanche, BSC, Optimism, Polygon, Base, zkSync)\r\n    const evmAddresses = text.match(/0x[a-fA-F0-9]{40}/g);\r\n    if (evmAddresses) {\r\n        addresses.push(\r\n            ...evmAddresses.map((address) => ({\r\n                address,\r\n                chain: \"evm\" as BirdeyeSupportedChain, // we don't yet know the chain but can assume it's EVM-compatible\r\n            }))\r\n        );\r\n    }\r\n\r\n    // Solana addresses (base58 strings)\r\n    const solAddresses = text.match(/[1-9A-HJ-NP-Za-km-z]{32,44}/g);\r\n    if (solAddresses) {\r\n        addresses.push(\r\n            ...solAddresses.map((address) => ({\r\n                address,\r\n                chain: \"solana\" as BirdeyeSupportedChain,\r\n            }))\r\n        );\r\n    }\r\n\r\n    // Sui addresses (0x followed by 64 hex chars)\r\n    const suiAddresses = text.match(/0x[a-fA-F0-9]{64}/g);\r\n    if (suiAddresses) {\r\n        addresses.push(\r\n            ...suiAddresses.map((address) => ({\r\n                address,\r\n                chain: \"sui\" as BirdeyeSupportedChain,\r\n            }))\r\n        );\r\n    }\r\n\r\n    return addresses;\r\n};\r\n\r\n// Time extraction and analysis\r\nexport const extractTimeframe = (text: string): Timeframe => {\r\n    // First, check for explicit timeframe mentions\r\n    const timeframe = Object.keys(TIMEFRAME_KEYWORDS).find((tf) =>\r\n        text.toLowerCase().includes(tf.toLowerCase())\r\n    );\r\n    if (timeframe) return timeframe as Timeframe;\r\n\r\n    // Check for semantic timeframe hints\r\n    const semanticMap = {\r\n        \"short term\": \"15m\",\r\n        \"medium term\": \"1h\",\r\n        \"long term\": \"1d\",\r\n        intraday: \"1h\",\r\n        daily: \"1d\",\r\n        weekly: \"1w\",\r\n        detailed: \"5m\",\r\n        quick: \"15m\",\r\n        overview: \"1d\",\r\n    } as const;\r\n\r\n    for (const [hint, tf] of Object.entries(semanticMap)) {\r\n        if (text.toLowerCase().includes(hint)) {\r\n            return tf as Timeframe;\r\n        }\r\n    }\r\n\r\n    // Analyze for time-related words\r\n    if (text.match(/minute|min|minutes/i)) return \"15m\";\r\n    if (text.match(/hour|hourly|hours/i)) return \"1h\";\r\n    if (text.match(/day|daily|24h/i)) return \"1d\";\r\n    if (text.match(/week|weekly/i)) return \"1w\";\r\n\r\n    // Default based on context\r\n    if (text.match(/trade|trades|trading|recent/i)) return \"15m\";\r\n    if (text.match(/trend|analysis|analyze/i)) return \"1h\";\r\n    if (text.match(/history|historical|long|performance/i)) return \"1d\";\r\n\r\n    return \"1h\"; // Default timeframe\r\n};\r\n\r\nexport const extractTimeRange = (\r\n    text: string\r\n): { start: number; end: number } => {\r\n    const now = Math.floor(Date.now() / 1000);\r\n\r\n    // Check for specific date ranges\r\n    const dateRangeMatch = text.match(\r\n        /from\\s+(\\d{4}-\\d{2}-\\d{2})\\s+to\\s+(\\d{4}-\\d{2}-\\d{2})/i\r\n    );\r\n    if (dateRangeMatch) {\r\n        const start = new Date(dateRangeMatch[1]).getTime() / 1000;\r\n        const end = new Date(dateRangeMatch[2]).getTime() / 1000;\r\n        return { start, end };\r\n    }\r\n\r\n    // Check for relative time expressions\r\n    const timeRegex = /(\\d+)\\s*(second|minute|hour|day|week|month)s?\\s*ago/i;\r\n    const match = text.match(timeRegex);\r\n    if (match) {\r\n        const amount = Number.parseInt(match[1]);\r\n        const unit = match[2].toLowerCase() as TimeUnit;\r\n        const start = now - amount * TIME_UNITS[unit];\r\n        return { start, end: now };\r\n    }\r\n\r\n    // Check for semantic time ranges\r\n    const semanticRanges: Record<string, number> = {\r\n        today: TIME_UNITS.day,\r\n        \"this week\": TIME_UNITS.week,\r\n        \"this month\": TIME_UNITS.month,\r\n        recent: TIME_UNITS.hour * 4,\r\n        latest: TIME_UNITS.hour,\r\n        \"last hour\": TIME_UNITS.hour,\r\n        \"last day\": TIME_UNITS.day,\r\n        \"last week\": TIME_UNITS.week,\r\n        \"last month\": TIME_UNITS.month,\r\n    };\r\n\r\n    for (const [range, duration] of Object.entries(semanticRanges)) {\r\n        if (text.toLowerCase().includes(range)) {\r\n            return { start: now - duration, end: now };\r\n        }\r\n    }\r\n\r\n    // Analyze context for appropriate default range\r\n    if (text.match(/trend|analysis|performance/i)) {\r\n        return { start: now - TIME_UNITS.week, end: now }; // 1 week for analysis\r\n    }\r\n    if (text.match(/trade|trades|trading|recent/i)) {\r\n        return { start: now - TIME_UNITS.day, end: now }; // 1 day for trading\r\n    }\r\n    if (text.match(/history|historical|long term/i)) {\r\n        return { start: now - TIME_UNITS.month, end: now }; // 1 month for history\r\n    }\r\n\r\n    // Default to last 24 hours\r\n    return { start: now - TIME_UNITS.day, end: now };\r\n};\r\n\r\nexport const extractLimit = (text: string): number => {\r\n    // Check for explicit limit mentions\r\n    const limitMatch = text.match(\r\n        /\\b(show|display|get|fetch|limit)\\s+(\\d+)\\b/i\r\n    );\r\n    if (limitMatch) {\r\n        const limit = Number.parseInt(limitMatch[2]);\r\n        return Math.min(Math.max(limit, 1), 100); // Clamp between 1 and 100\r\n    }\r\n\r\n    // Check for semantic limit hints\r\n    if (text.match(/\\b(all|everything|full|complete)\\b/i)) return 100;\r\n    if (text.match(/\\b(brief|quick|summary|overview)\\b/i)) return 5;\r\n    if (text.match(/\\b(detailed|comprehensive)\\b/i)) return 50;\r\n\r\n    // Default based on context\r\n    if (text.match(/\\b(trade|trades|trading)\\b/i)) return 10;\r\n    if (text.match(/\\b(analysis|analyze|trend)\\b/i)) return 24;\r\n    if (text.match(/\\b(history|historical)\\b/i)) return 50;\r\n\r\n    return 10; // Default limit\r\n};\r\n\r\n// Formatting helpers\r\nexport const formatValue = (value?: number): string => {\r\n    if (!value) return \"N/A\";\r\n    if (value && value >= 1_000_000_000) {\r\n        return `$${(value / 1_000_000_000).toFixed(2)}B`;\r\n    }\r\n    if (value >= 1_000_000) {\r\n        return `$${(value / 1_000_000).toFixed(2)}M`;\r\n    }\r\n    if (value >= 1_000) {\r\n        return `$${(value / 1_000).toFixed(2)}K`;\r\n    }\r\n    return `$${value.toFixed(2)}`;\r\n};\r\n\r\nexport const formatPercentChange = (change?: number): string => {\r\n    if (change === undefined) return \"N/A\";\r\n    const symbol = change >= 0 ? \"‚Üë\" : \"‚Üì\";\r\n    return `${symbol} ${Math.abs(change).toFixed(2)}%`;\r\n};\r\n\r\nexport const shortenAddress = (address?: string): string => {\r\n    if (!address || address.length <= 12) return address || \"Unknown\";\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n};\r\n\r\nexport const formatTimestamp = (timestamp?: number): string => {\r\n    return timestamp ? new Date(timestamp * 1000).toLocaleString() : \"N/A\";\r\n};\r\n\r\nexport const formatPrice = (price?: number): string => {\r\n    return price\r\n        ? price < 0.01\r\n            ? price.toExponential(2)\r\n            : price.toFixed(2)\r\n        : \"N/A\";\r\n};\r\n\r\n// API helpers\r\nexport async function makeApiRequest<T>(\r\n    url: string,\r\n    options: {\r\n        apiKey: string;\r\n        chain?: BirdeyeSupportedChain;\r\n        method?: \"GET\" | \"POST\";\r\n        body?: any;\r\n    }\r\n): Promise<T> {\r\n    const { apiKey, chain = \"solana\", method = \"GET\", body } = options;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method,\r\n            headers: {\r\n                \"X-API-KEY\": apiKey,\r\n                \"x-chain\": chain,\r\n                ...(body && { \"Content-Type\": \"application/json\" }),\r\n            },\r\n            ...(body && { body: JSON.stringify(body) }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            if (response.status === 404) {\r\n                throw new BirdeyeApiError(404, \"Resource not found\");\r\n            }\r\n            if (response.status === 429) {\r\n                throw new BirdeyeApiError(429, \"Rate limit exceeded\");\r\n            }\r\n            throw new BirdeyeApiError(\r\n                response.status,\r\n                `HTTP error! status: ${response.status}`\r\n            );\r\n        }\r\n\r\n        const responseJson: T = await response.json();\r\n\r\n        return responseJson;\r\n    } catch (error) {\r\n        if (error instanceof BirdeyeApiError) {\r\n            elizaLogger.error(`API Error (${error.status}):`, error.message);\r\n        } else {\r\n            elizaLogger.error(\"Error making API request:\", error);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Formatting helpers\r\nexport const formatTokenInfo = (\r\n    token: TokenResult,\r\n    metadata?: TokenMetadataSingleResponse\r\n): string => {\r\n    const priceFormatted =\r\n        token.price != null\r\n            ? token.price < 0.01\r\n                ? token.price.toExponential(2)\r\n                : token.price.toFixed(2)\r\n            : \"N/A\";\r\n\r\n    const volume =\r\n        token.volume_24h_usd != null\r\n            ? `$${(token.volume_24h_usd / 1_000_000).toFixed(2)}M`\r\n            : \"N/A\";\r\n\r\n    const liquidity =\r\n        token.liquidity != null\r\n            ? `$${(token.liquidity / 1_000_000).toFixed(2)}M`\r\n            : \"N/A\";\r\n\r\n    const fdv =\r\n        token.fdv != null ? `$${(token.fdv / 1_000_000).toFixed(2)}M` : \"N/A\";\r\n\r\n    const priceChange =\r\n        token.price_change_24h_percent != null\r\n            ? `${token.price_change_24h_percent > 0 ? \"+\" : \"\"}${token.price_change_24h_percent.toFixed(2)}%`\r\n            : \"N/A\";\r\n\r\n    const trades = token.trade_24h != null ? token.trade_24h.toString() : \"N/A\";\r\n\r\n    const age = token.creation_time\r\n        ? `${Math.floor((Date.now() - new Date(token.creation_time).getTime()) / (1000 * 60 * 60 * 24))}d`\r\n        : \"N/A\";\r\n\r\n    let output =\r\n        `ü™ô ${token.name} @ ${token.symbol}\\n` +\r\n        `üí∞ USD: $${priceFormatted} (${priceChange})\\n` +\r\n        `üíé FDV: ${fdv}\\n` +\r\n        `üí¶ MCap: ${token.market_cap ? `$${(token.market_cap / 1_000_000).toFixed(2)}M` : \"N/A\"}\\n` +\r\n        `üí¶ Liq: ${liquidity}\\n` +\r\n        `üìä Vol: ${volume}\\n` +\r\n        `üï∞Ô∏è Age: ${age}\\n` +\r\n        `üîÑ Trades: ${trades}\\n` +\r\n        `üîó Address: ${token.address}`;\r\n\r\n    // Add metadata if available\r\n    if (metadata?.success) {\r\n        const { extensions } = metadata.data;\r\n        const links: string[] = [];\r\n\r\n        if (extensions.website)\r\n            links.push(`üåê [Website](${extensions.website})`);\r\n        if (extensions.twitter)\r\n            links.push(`üê¶ [Twitter](${extensions.twitter})`);\r\n        if (extensions.discord)\r\n            links.push(`üí¨ [Discord](${extensions.discord})`);\r\n        if (extensions.medium) links.push(`üìù [Medium](${extensions.medium})`);\r\n        if (extensions.coingecko_id)\r\n            links.push(\r\n                `ü¶é [CoinGecko](https://www.coingecko.com/en/coins/${extensions.coingecko_id})`\r\n            );\r\n\r\n        if (links.length > 0) {\r\n            output += \"\\n\\nüì± Social Links:\\n\" + links.join(\"\\n\");\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\n// Extract symbols from text\r\nexport const extractSymbols = (\r\n    text: string,\r\n    // loose mode will try to extract more symbols but may include false positives\r\n    // strict mode will only extract symbols that are clearly formatted as a symbol using $SOL format\r\n    mode: \"strict\" | \"loose\" = \"loose\"\r\n): string[] => {\r\n    const symbols = new Set<string>();\r\n\r\n    // Match patterns - this may\r\n    const patterns =\r\n        mode === \"strict\"\r\n            ? [\r\n                  // $SYMBOL format\r\n                  /\\$([A-Z0-9]{2,10})\\b/gi,\r\n                  // $SYMBOL format with lowercase\r\n                  /\\$([a-z0-9]{2,10})\\b/gi,\r\n              ]\r\n            : [\r\n                  // $SYMBOL format\r\n                  /\\$([A-Z0-9]{2,10})\\b/gi,\r\n                  // After articles (a/an)\r\n                  /\\b(?:a|an)\\s+([A-Z0-9]{2,10})\\b/gi,\r\n                  // // Standalone caps\r\n                  /\\b[A-Z0-9]{2,10}\\b/g,\r\n                  // // Quoted symbols\r\n                  /[\"']([A-Z0-9]{2,10})[\"']/gi,\r\n                  // // Common price patterns\r\n                  /\\b([A-Z0-9]{2,10})\\/USD\\b/gi,\r\n                  /\\b([A-Z0-9]{2,10})-USD\\b/gi,\r\n              ];\r\n\r\n    // Extract all matches\r\n    patterns.forEach((pattern) => {\r\n        const matches = text.matchAll(pattern);\r\n        for (const match of matches) {\r\n            const symbol = (match[1] || match[0]).toUpperCase();\r\n            symbols.add(symbol);\r\n        }\r\n    });\r\n\r\n    return Array.from(symbols);\r\n};\r\n\r\nexport const formatMetadataResponse = (\r\n    data: TokenMetadataSingleResponse,\r\n    chain: BirdeyeSupportedChain\r\n): string => {\r\n    const tokenData = data.data;\r\n    const chainName = chain.charAt(0).toUpperCase() + chain.slice(1);\r\n    const chainExplorer = (() => {\r\n        switch (chain) {\r\n            case \"solana\":\r\n                return `https://solscan.io/token/${tokenData.address}`;\r\n            case \"ethereum\":\r\n                return `https://etherscan.io/token/${tokenData.address}`;\r\n            case \"arbitrum\":\r\n                return `https://arbiscan.io/token/${tokenData.address}`;\r\n            case \"avalanche\":\r\n                return `https://snowtrace.io/token/${tokenData.address}`;\r\n            case \"bsc\":\r\n                return `https://bscscan.com/token/${tokenData.address}`;\r\n            case \"optimism\":\r\n                return `https://optimistic.etherscan.io/token/${tokenData.address}`;\r\n            case \"polygon\":\r\n                return `https://polygonscan.com/token/${tokenData.address}`;\r\n            case \"base\":\r\n                return `https://basescan.org/token/${tokenData.address}`;\r\n            case \"zksync\":\r\n                return `https://explorer.zksync.io/address/${tokenData.address}`;\r\n            case \"sui\":\r\n                return `https://suiscan.xyz/mainnet/object/${tokenData.address}`;\r\n            default:\r\n                return null;\r\n        }\r\n    })();\r\n\r\n    let response = `Token Metadata for ${tokenData.name} (${tokenData.symbol}) on ${chainName}\\n\\n`;\r\n\r\n    // Basic Information\r\n    response += \"üìù Basic Information\\n\";\r\n    response += `‚Ä¢ Name: ${tokenData.name}\\n`;\r\n    response += `‚Ä¢ Symbol: ${tokenData.symbol}\\n`;\r\n    response += `‚Ä¢ Address: ${tokenData.address}\\n`;\r\n    response += `‚Ä¢ Decimals: ${tokenData.decimals}\\n`;\r\n    if (chainExplorer) {\r\n        response += `‚Ä¢ Explorer: [View on ${chainName} Explorer](${chainExplorer})\\n`;\r\n    }\r\n\r\n    // Social Links\r\n    response += \"\\nüîó Social Links & Extensions\\n\";\r\n    response += formatSocialLinks(tokenData) + \"\\n\";\r\n\r\n    // Logo\r\n    if (tokenData.logo_uri) {\r\n        response += \"\\nüñºÔ∏è Logo\\n\";\r\n        response += tokenData.logo_uri;\r\n    }\r\n\r\n    return response;\r\n};\r\n\r\nconst formatSocialLinks = (\r\n    data: TokenMetadataSingleResponse[\"data\"]\r\n): string => {\r\n    const links: string[] = [];\r\n    const { extensions } = data;\r\n\r\n    if (!extensions) {\r\n        return \"No social links available\";\r\n    }\r\n\r\n    if (extensions.website) {\r\n        links.push(`üåê [Website](${extensions.website})`);\r\n    }\r\n    if (extensions.twitter) {\r\n        links.push(`üê¶ [Twitter](${extensions.twitter})`);\r\n    }\r\n    if (extensions.discord) {\r\n        links.push(`üí¨ [Discord](${extensions.discord})`);\r\n    }\r\n    if (extensions.medium) {\r\n        links.push(`üìù [Medium](${extensions.medium})`);\r\n    }\r\n    if (extensions.coingecko_id) {\r\n        links.push(\r\n            `ü¶é [CoinGecko](https://www.coingecko.com/en/coins/${extensions.coingecko_id})`\r\n        );\r\n    }\r\n\r\n    return links.length > 0 ? links.join(\"\\n\") : \"No social links available\";\r\n};\r\n\r\nexport const waitFor = (ms: number) =>\r\n    new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\nexport const formatPortfolio = (response: WalletPortfolioResponse) => {\r\n    const { items } = response.data;\r\n    if (!items?.length) return \"No tokens found in portfolio\";\r\n\r\n    return items\r\n        .map((item) => {\r\n            const value = item?.priceUsd?.toFixed(2);\r\n            const amount = item?.uiAmount?.toFixed(4);\r\n            return (\r\n                `‚Ä¢ ${item.symbol || \"Unknown Token\"}: ${amount} tokens` +\r\n                `${value !== \"0.00\" ? ` (Value: $${value || \"unknown\"})` : \"\"}`\r\n            );\r\n        })\r\n        .join(\"\\n\");\r\n};\r\n\r\nexport const convertToStringParams = (params: BirdeyeApiParams) => {\r\n    return Object.entries(params || {}).reduce(\r\n        (acc, [key, value]) => ({\r\n            ...acc,\r\n            [key]: value?.toString() || \"\",\r\n        }),\r\n        {} as Record<string, string>\r\n    );\r\n};\r\n\r\nexport const getTokenResultFromSearchResponse = (\r\n    response: TokenMarketSearchResponse\r\n): TokenResult[] | undefined => {\r\n    return response.data.items\r\n        .filter((item) => item.type === \"token\")\r\n        .flatMap((item) => item.result);\r\n};\r\n","import {\r\n    type Action,\r\n    type ActionExample,\r\n    elizaLogger,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { BirdeyeProvider } from \"../birdeye\";\r\nimport type { TokenResult } from \"../types/api/search\";\r\nimport {\r\n    extractSymbols,\r\n    formatPercentChange,\r\n    formatPrice,\r\n    formatValue,\r\n} from \"../utils\";\r\n\r\n// \"strict\" requires a $ prefix and will match $SOL, $ai16z, $BTC, etc.\r\n// \"loose\" will match $SOL, SOL, SOLANA, etc. and does not require a $ prefix but may interpret any other acronyms as symbols to search for\r\nconst SYMBOL_SEARCH_MODE = \"strict\";\r\n\r\nexport const tokenSearchSymbolAction = {\r\n    name: \"TOKEN_SEARCH_SYMBOL\",\r\n    similes: [\r\n        \"SEARCH_TOKEN_SYMBOL\",\r\n        \"FIND_TOKEN_SYMBOL\",\r\n        \"LOOKUP_TOKEN_SYMBOL\",\r\n        \"CHECK_TOKEN_SYMBOL\",\r\n        \"GET_TOKEN_BY_SYMBOL\",\r\n        \"SYMBOL_SEARCH\",\r\n        \"SYMBOL_LOOKUP\",\r\n        \"SYMBOL_CHECK\",\r\n        \"TOKEN_SYMBOL_INFO\",\r\n        \"TOKEN_SYMBOL_DETAILS\",\r\n        \"TOKEN_SYMBOL_LOOKUP\",\r\n        \"TOKEN_SYMBOL_SEARCH\",\r\n        \"TOKEN_SYMBOL_CHECK\",\r\n        \"TOKEN_SYMBOL_QUERY\",\r\n        \"TOKEN_SYMBOL_FIND\",\r\n        \"GET_TOKEN_INFO\",\r\n        \"TOKEN_INFO\",\r\n        \"TOKEN_REPORT\",\r\n        \"TOKEN_ANALYSIS\",\r\n        \"TOKEN_OVERVIEW\",\r\n        \"TOKEN_SUMMARY\",\r\n        \"TOKEN_INSIGHT\",\r\n        \"TOKEN_DATA\",\r\n        \"TOKEN_STATS\",\r\n        \"TOKEN_METRICS\",\r\n        \"TOKEN_PROFILE\",\r\n        \"TOKEN_REVIEW\",\r\n        \"TOKEN_CHECK\",\r\n        \"TOKEN_LOOKUP\",\r\n        \"TOKEN_FIND\",\r\n        \"TOKEN_DISCOVER\",\r\n        \"TOKEN_EXPLORE\",\r\n    ],\r\n    description:\r\n        \"Search for detailed token information including security and trade data by symbol\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        try {\r\n            const provider = new BirdeyeProvider(runtime.cacheManager);\r\n\r\n            // get all symbols from the message that match (i.e. $SOL, $ETH, $BTC, etc.). If you want to match more loosely, use \"loose\" instead of \"strict\" and it will match $SOL, SOL, SOLANA, etc.\r\n            const symbols = extractSymbols(\r\n                message.content.text,\r\n                SYMBOL_SEARCH_MODE\r\n            );\r\n\r\n            elizaLogger.info(\r\n                `Searching Birdeye provider for ${symbols.length} symbols`\r\n            );\r\n\r\n            // for each symbol, do a search in Birdeye. This will return a list of token results that may be amatch to the token symbol.\r\n            const results = await Promise.all(\r\n                symbols.map((symbol) =>\r\n                    provider.fetchSearchTokenMarketData({\r\n                        keyword: symbol,\r\n                        sort_by: \"volume_24h_usd\",\r\n                        sort_type: \"desc\",\r\n                        chain: \"all\",\r\n                        limit: 5,\r\n                    })\r\n                )\r\n            );\r\n\r\n            // get filter the results to only include the token results and then filter the results to only include the ones that match the symbol\r\n            const validResults = results.map((r, i) =>\r\n                r.data.items\r\n                    .filter((item) => item.type === \"token\" && item.result)\r\n                    .flatMap((item) =>\r\n                        (item.result as TokenResult[]).filter(\r\n                            (r) =>\r\n                                r.symbol?.toLowerCase() ===\r\n                                symbols[i].toLowerCase()\r\n                        )\r\n                    )\r\n            ) as TokenResult[][];\r\n\r\n            if (validResults.length === 0) {\r\n                return true;\r\n            }\r\n\r\n            const completeResults = `I performed a search for the token symbols you requested and found the following results (for more details search by contract address):\\n\\n${validResults\r\n                .map(\r\n                    (result, i) =>\r\n                        `${formatTokenSummary(symbols[i], i, result)}`\r\n                )\r\n                .join(\"\\n\")}`;\r\n\r\n            callback?.({ text: completeResults });\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error in searchTokens handler:\", error.message);\r\n            callback?.({ text: `Error: ${error.message}` });\r\n            return false;\r\n        }\r\n    },\r\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\r\n        const symbols = extractSymbols(\r\n            message.content.text,\r\n            SYMBOL_SEARCH_MODE\r\n        );\r\n        return symbols.length > 0;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Search for $SOL and $ETH\",\r\n                    action: \"SEARCH_TOKENS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Find information about $BTC\",\r\n                    action: \"TOKEN_SEARCH\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Look up $WETH token\",\r\n                    action: \"LOOKUP_TOKENS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Tell me about SOL\",\r\n                    action: \"CHECK_TOKEN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Give me details on $ADA\",\r\n                    action: \"TOKEN_DETAILS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What can you tell me about $DOGE?\",\r\n                    action: \"TOKEN_INFO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"I need a report on $XRP\",\r\n                    action: \"TOKEN_REPORT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Analyze $BNB for me\",\r\n                    action: \"TOKEN_ANALYSIS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Overview of $LTC\",\r\n                    action: \"TOKEN_OVERVIEW\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n\r\nconst formatTokenSummary = (\r\n    symbol: string,\r\n    _index: number,\r\n    tokens: TokenResult[]\r\n) => {\r\n    return tokens\r\n        .map((token, i) => {\r\n            let output = \"\";\r\n            if (i === 0) {\r\n                output += `Search Results for ${symbol}:\\n\\n`;\r\n            }\r\n            output += `Search Result #${tokens.length > 0 ? i + 1 : \"\"}:\\n`;\r\n            output += `üîñ Symbol: $${token.symbol.toUpperCase()}\\n`;\r\n            output += `üîó Address: ${token.address}\\n`;\r\n            output += `üåê Network: ${token.network.toUpperCase()}\\n`;\r\n            output += `üíµ Price: ${formatPrice(token.price)} (${formatPercentChange(token.price_change_24h_percent)})\\n`;\r\n            output += `üí∏ Volume (24h USD): ${formatValue(token.volume_24h_usd)}\\n`;\r\n            output += token.market_cap\r\n                ? `üí∞ Market Cap: ${formatValue(token.market_cap)}\\n`\r\n                : \"\";\r\n            output += token.fdv ? `üåä FDV: ${formatValue(token.fdv)}\\n` : \"\";\r\n            return output;\r\n        })\r\n        .join(\"\\n\");\r\n};\r\n","import {\r\n    type Action,\r\n    type ActionExample,\r\n    elizaLogger,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { BirdeyeProvider } from \"../birdeye\";\r\nimport type { WalletPortfolioResponse } from \"../types/api/wallet\";\r\nimport type { BaseAddress } from \"../types/shared\";\r\nimport { extractAddresses } from \"../utils\";\r\n\r\nexport const walletSearchAddressAction = {\r\n    name: \"WALLET_SEARCH_ADDRESS\",\r\n    similes: [\r\n        \"SEARCH_WALLET_ADDRESS\",\r\n        \"FIND_WALLET_ADDRESS\",\r\n        \"LOOKUP_WALLET_ADDRESS\",\r\n        \"CHECK_WALLET_ADDRESS\",\r\n        \"GET_WALLET_BY_ADDRESS\",\r\n        \"WALLET_ADDRESS_INFO\",\r\n        \"WALLET_ADDRESS_LOOKUP\",\r\n        \"WALLET_ADDRESS_SEARCH\",\r\n        \"WALLET_ADDRESS_CHECK\",\r\n        \"WALLET_ADDRESS_DETAILS\",\r\n        \"WALLET_CONTRACT_SEARCH\",\r\n        \"WALLET_CONTRACT_LOOKUP\",\r\n        \"WALLET_CONTRACT_INFO\",\r\n        \"WALLET_CONTRACT_CHECK\",\r\n        \"VERIFY_WALLET_ADDRESS\",\r\n        \"VALIDATE_WALLET_ADDRESS\",\r\n        \"GET_WALLET_INFO\",\r\n        \"WALLET_INFO\",\r\n        \"WALLET_REPORT\",\r\n        \"WALLET_ANALYSIS\",\r\n        \"WALLET_OVERVIEW\",\r\n        \"WALLET_SUMMARY\",\r\n        \"WALLET_INSIGHT\",\r\n        \"WALLET_DATA\",\r\n        \"WALLET_STATS\",\r\n        \"WALLET_METRICS\",\r\n        \"WALLET_PROFILE\",\r\n        \"WALLET_REVIEW\",\r\n        \"WALLET_CHECK\",\r\n        \"WALLET_LOOKUP\",\r\n        \"WALLET_FIND\",\r\n        \"WALLET_DISCOVER\",\r\n        \"WALLET_EXPLORE\",\r\n    ],\r\n    description:\r\n        \"Search for detailed wallet information including portfolio and transaction data by address\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        try {\r\n            const provider = new BirdeyeProvider(runtime.cacheManager);\r\n\r\n            // get all wallet addresses from the message\r\n            const addresses = extractAddresses(message.content.text);\r\n\r\n            elizaLogger.info(\r\n                `Searching Birdeye provider for ${addresses.length} addresses`\r\n            );\r\n\r\n            // for each symbol, do a search in Birdeye. This will return a list of token results that may be amatch to the token symbol.\r\n            const results: WalletPortfolioResponse[] = await Promise.all(\r\n                addresses.map(async ({ address, chain: addressChain }) => {\r\n                    // address detection can't distinguish between evm chains, so we currently only do address search on ETH for EVM addresses. Future support will be added for other chains if the user requests it.\r\n                    const chain =\r\n                        addressChain === \"evm\" ? \"ethereum\" : addressChain;\r\n                    return provider.fetchWalletPortfolio(\r\n                        {\r\n                            wallet: address,\r\n                        },\r\n                        {\r\n                            headers: {\r\n                                chain: chain,\r\n                            },\r\n                        }\r\n                    );\r\n                })\r\n            );\r\n\r\n            console.log(results);\r\n\r\n            const completeResults = `I performed a search for the wallet addresses you requested and found the following results:\\n\\n${results\r\n                .map(\r\n                    (result, i) =>\r\n                        `${formatWalletReport(addresses[i], results.length, i, result)}`\r\n                )\r\n                .join(\"\\n\\n\")}`;\r\n\r\n            callback?.({ text: completeResults });\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error in searchTokens handler:\", error.message);\r\n            callback?.({ text: `Error: ${error.message}` });\r\n            return false;\r\n        }\r\n    },\r\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\r\n        const addresses = extractAddresses(message.content.text);\r\n        return addresses.length > 0;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Search wallet 0x1234567890abcdef1234567890abcdef12345678\",\r\n                    action: \"WALLET_SEARCH_ADDRESS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Look up wallet address HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH\",\r\n                    action: \"WALLET_ADDRESS_LOOKUP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Check this address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\r\n                    action: \"CHECK_WALLET_ADDRESS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Get wallet info for 5yBYpGQRHPz4i5FkVnP9h9VTJBMnwgHRe5L5gw2bwp9q\",\r\n                    action: \"WALLET_INFO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Show me portfolio for 0x3cD751E6b0078Be393132286c442345e5DC49699\",\r\n                    action: \"WALLET_OVERVIEW\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n\r\n// take all the details of the results and present to the user\r\nconst formatWalletReport = (\r\n    address: BaseAddress,\r\n    totalResults: number,\r\n    index: number,\r\n    result: WalletPortfolioResponse\r\n) => {\r\n    const tokens = result.data.items.slice(0, 10) || [];\r\n    const totalValue = tokens.reduce(\r\n        (sum, token) => sum + (token.valueUsd || 0),\r\n        0\r\n    );\r\n\r\n    let header = `Wallet Result ${totalResults > 1 ? `#${index + 1}` : \"\"}\\n`;\r\n    header += `üëõ Address ${address.address}*\\n`;\r\n    header += `üí∞ Total Value: $${totalValue.toLocaleString()}\\n`;\r\n    header += \"üîñ Top Holdings:\";\r\n    const tokenList = tokens\r\n        .map(\r\n            (token) =>\r\n                `‚Ä¢ $${token.symbol.toUpperCase()}: $${token.valueUsd?.toLocaleString()} (${token.uiAmount?.toFixed(4)} tokens)`\r\n        )\r\n        .join(\"\\n\");\r\n\r\n    return `${header}\\n${tokenList}`;\r\n};\r\n","import type { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\r\nimport { BirdeyeProvider } from \"../birdeye\";\r\nimport { extractChain, formatPortfolio } from \"../utils\";\r\n\r\n/**\r\n * Agent portfolio data provider that queries Birdeye API for the agent's wallet address.\r\n * When a wallet address is set, this provider fetches portfolio data to give the agent\r\n * context about the agent's holdings when responding to queries.\r\n *\r\n * The provider:\r\n * - Validates the agent's wallet address\r\n * - Fetches current portfolio data from Birdeye including token balances and metadata\r\n * - Makes this portfolio context available to the agent for responding to user queries\r\n * about their holdings, token values, etc.\r\n */\r\nexport const agentPortfolioProvider: Provider = {\r\n    get: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string> => {\r\n        try {\r\n            const provider = new BirdeyeProvider(runtime.cacheManager);\r\n            const walletAddr = \"52nRysJ2ijCtF2dgvCazEds3NS7F1MS33NCFyyHfwSWG\"; // Hardcoded wallet address\r\n\r\n            if (!walletAddr) {\r\n                console.warn(\"No Birdeye wallet was specified\");\r\n                return \"\";\r\n            }\r\n\r\n            const chain = extractChain(walletAddr);\r\n\r\n            const resp = await provider.fetchWalletPortfolio(\r\n                {\r\n                    wallet: walletAddr,\r\n                },\r\n                {\r\n                    headers: {\r\n                        chain,\r\n                    },\r\n                }\r\n            );\r\n\r\n            const portfolioText = formatPortfolio(resp);\r\n\r\n            return `This is your wallet address: ${walletAddr}\\n\\nThis is your portfolio: [${portfolioText}]`;\r\n        } catch (error) {\r\n            console.error(\"Error fetching token data:\", error);\r\n            return \"Unable to fetch token information. Please try again later.\";\r\n        }\r\n    },\r\n};\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { tokenSearchAddressAction } from \"./actions/token-search-address\";\r\nimport { tokenSearchSymbolAction } from \"./actions/token-search-symbol\";\r\nimport { walletSearchAddressAction } from \"./actions/wallet-search-address\";\r\nimport { agentPortfolioProvider } from \"./providers/agent-portfolio-provider\";\r\n\r\nexport const birdeyePlugin: Plugin = {\r\n    name: \"birdeye\",\r\n    description: \"Birdeye Plugin for token data and analytics\",\r\n    actions: [\r\n        tokenSearchSymbolAction,\r\n        tokenSearchAddressAction,\r\n        walletSearchAddressAction,\r\n        // testAllEndpointsAction, // this action can be used to optionally test all endpoints\r\n    ],\r\n    evaluators: [],\r\n    providers: [agentPortfolioProvider],\r\n};\r\n\r\nexport default birdeyePlugin;\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger","r","elizaLogger","elizaLogger"]}