{"version":3,"sources":["../src/actions/trikon.ts","../src/providers/wallet.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    type ActionExample,\r\n    type Content,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\n\r\nclass TransferValidationError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'TransferValidationError';\r\n    }\r\n}\r\n\r\nclass InsufficientBalanceError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'InsufficientBalanceError';\r\n    }\r\n}\r\n\r\nexport interface TransferContent extends Content {\r\n    recipient: string;\r\n    amount: string | number;\r\n}\r\n\r\nfunction isTransferContent(content: any): content is TransferContent {\r\n    return (\r\n        typeof content.recipient === \"string\" &&\r\n        /^0x[a-fA-F0-9]{64}$/.test(content.recipient) &&\r\n        (typeof content.amount === \"string\" ||\r\n            typeof content.amount === \"number\") &&\r\n        Number(content.amount) > 0\r\n    );\r\n}\r\n\r\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"recipient\": \"0x2badda48c062e861ef17a96a806c451fd296a49f45b272dee17f85b0e32663fd\",\r\n    \"amount\": \"1000\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Recipient wallet address\r\n- Amount to transfer\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"SEND_TOKEN\",\r\n    similes: [\r\n        \"TRANSFER_TOKEN\",\r\n        \"TRANSFER_TOKENS\",\r\n        \"SEND_TOKENS\",\r\n        \"SEND_TRK\",\r\n        \"PAY\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating trikon transfer from user:\", message.userId);\r\n        try {\r\n            // Add actual validation logic here\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Validation error:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    description: \"Transfer tokens from the agent's wallet to another address\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\r\n\r\n        try {\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const transferContext = composeContext({\r\n                state,\r\n                template: transferTemplate,\r\n            });\r\n\r\n            const content = await generateObjectDeprecated({\r\n                runtime,\r\n                context: transferContext,\r\n                modelClass: ModelClass.SMALL,\r\n            });\r\n\r\n            if (!isTransferContent(content)) {\r\n                throw new TransferValidationError(\"Invalid transfer content provided\");\r\n            }\r\n\r\n            // TODO: Implement actual transfer logic here\r\n            elizaLogger.log(\r\n                `Would transfer ${content.amount} tokens to ${content.recipient}`\r\n            );\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Transfer simulation successful for ${content.amount} TRK to ${content.recipient}`,\r\n                    content: {\r\n                        success: true,\r\n                        amount: content.amount,\r\n                        recipient: content.recipient,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            if (error instanceof TransferValidationError) {\r\n                elizaLogger.error(\"Transfer validation error:\", error);\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Invalid transfer request: ${error.message}`,\r\n                        content: { error: error.message },\r\n                    });\r\n                }\r\n            } else if (error instanceof InsufficientBalanceError) {\r\n                elizaLogger.error(\"Insufficient balance:\", error);\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Insufficient balance: ${error.message}`,\r\n                        content: { error: error.message },\r\n                    });\r\n                }\r\n            } else {\r\n                elizaLogger.error(\"Unexpected error during token transfer:\", error);\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error transferring tokens: ${error.message}`,\r\n                        content: { error: error.message },\r\n                    });\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send 100 TRK tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll send 100 TRK tokens now...\",\r\n                    action: \"SEND_TOKEN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully sent 100 TRK tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\r\n                },\r\n            },\r\n        ],\r\n        // Added example for failed transfer\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send 1000000 TRK tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Unable to send tokens - insufficient balance\",\r\n                    action: \"SEND_TOKEN\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { elizaLogger, type Provider } from \"@elizaos/core\";\r\n\r\nfunction validateAddress(address: string | undefined): string {\r\n    if (!address) {\r\n        throw new Error('TRIKON_WALLET_ADDRESS environment variable is required');\r\n    }\r\n    if (!/^0x[a-fA-F0-9]{64}$/.test(address)) {\r\n        throw new Error('Invalid wallet address format');\r\n    }\r\n    return address;\r\n}\r\n\r\nfunction validateBalance(balance: string | undefined): string {\r\n    if (!balance) return \"0\";\r\n    if (!/^\\d+$/.test(balance)) {\r\n        throw new Error('Invalid balance format');\r\n    }\r\n    return balance;\r\n}\r\n\r\nexport interface WalletProvider {\r\n    address: string;\r\n    balance: string;\r\n    getBalance(): Promise<string>;\r\n    getAddress(): Promise<string>;\r\n}\r\n\r\nexport const walletProvider: Provider = {\r\n    get: async () => {\r\n        elizaLogger.log(\"Getting Trikon wallet provider...\");\r\n        return {\r\n            address: validateAddress(process.env.TRIKON_WALLET_ADDRESS),\r\n            balance: validateBalance(process.env.TRIKON_INITIAL_BALANCE),\r\n            getBalance: async () => validateBalance(process.env.TRIKON_INITIAL_BALANCE),\r\n            getAddress: async () => validateAddress(process.env.TRIKON_WALLET_ADDRESS)\r\n        };\r\n    }\r\n};\r\n\r\nexport default walletProvider;","import type { Plugin } from \"@elizaos/core\";\r\nimport transferAction from \"./actions/trikon\";\r\nimport { walletProvider } from \"./providers/wallet\";\r\n\r\nexport const trikonPlugin: Plugin = {\r\n    name: \"trikon\",\r\n    description: \"Trikon Plugin for Eliza - POC for token transfer functionality\",\r\n    actions: [transferAction],\r\n    evaluators: [], // No evaluators needed for POC\r\n    providers: [walletProvider],\r\n    services: [], // No services needed for POC\r\n    clients: [], // No clients needed for POC\r\n};\r\n\r\n// Export types and utilities\r\nexport * from \"./providers/wallet\";\r\nexport { transferAction as TransferTrikonToken };\r\nexport default trikonPlugin;"],"mappings":"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","names":["elizaLogger"]}