{"version":3,"sources":["../src/actions/createToken.ts","../src/client.ts","../src/keypairUtils.ts","../src/actions/swap.ts","../src/actions/lend.ts","../src/actions/stake.ts","../src/actions/transfer.ts","../src/actions/getTokenInfo.ts","../src/actions/gibwork.ts","../src/index.ts"],"sourcesContent":["import {\r\n    type ActionExample,\r\n    composeContext,\r\n    type Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { getSAK } from \"../client\";\r\nexport interface CreateTokenContent extends Content {\r\n    name: string;\r\n    uri: string;\r\n    symbol: string;\r\n    decimals: number;\r\n    initialSupply: number;\r\n}\r\n\r\nfunction isCreateTokenContent(content: any): content is CreateTokenContent {\r\n    elizaLogger.log(\"Content for createToken\", content);\r\n    return (\r\n        typeof content.name === \"string\" &&\r\n        typeof content.uri === \"string\" &&\r\n        typeof content.symbol === \"string\" &&\r\n        typeof content.decimals === \"number\" &&\r\n        typeof content.initialSupply === \"number\"\r\n    );\r\n}\r\n\r\nconst createTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"name\": \"Example Token\",\r\n    \"symbol\": \"EXMPL\",\r\n    \"uri\": \"https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png\",\r\n    \"decimals\": 18,\r\n    \"initialSupply\": 1000000,\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Token name\r\n- Token symbol\r\n- Token uri\r\n- Token decimals\r\n- Token initialSupply\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"CREATE_TOKEN\",\r\n    similes: [\"DEPLOY_TOKEN\"],\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => true,\r\n    description: \"Create tokens\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting CREATE_TOKEN handler...\");\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state,\r\n            template: createTemplate,\r\n        });\r\n\r\n        // Generate transfer content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate transfer content\r\n        if (!isCreateTokenContent(content)) {\r\n            elizaLogger.error(\"Invalid content for CREATE_TOKEN action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process create token request. Invalid content provided.\",\r\n                    content: { error: \"Invalid create token content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        elizaLogger.log(\"Init solana agent kit...\");\r\n        const solanaAgentKit = await getSAK(runtime);\r\n        try {\r\n            const deployedAddress = await solanaAgentKit.deployToken(\r\n                content.name,\r\n                content.uri,\r\n                content.symbol,\r\n                content.decimals\r\n                // content.initialSupply comment out this cause the sdk has some issue with this parameter\r\n            );\r\n            elizaLogger.log(\"Create successful: \", deployedAddress);\r\n            elizaLogger.log(deployedAddress);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully create token ${content.name}`,\r\n                    content: {\r\n                        success: true,\r\n                        deployedAddress,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                elizaLogger.error(\"Error during create token: \", error);\r\n                callback({\r\n                    text: `Error creating token: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create token, name is Example Token, symbol is EXMPL, uri is https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png, decimals is 9, initialSupply is 100000000000\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll create token now...\",\r\n                    action: \"CREATE_TOKEN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully create token 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { SolanaAgentKit } from \"solana-agent-kit\";\r\nimport type { IAgentRuntime } from \"@elizaos/core\";\r\nimport { getWalletKey } from \"./keypairUtils\";\r\nimport bs58 from \"bs58\";\r\n\r\nexport async function getSAK(runtime: IAgentRuntime) {\r\n    const {publicKey} = await getWalletKey(runtime, false);\r\n    const {keypair} = await getWalletKey(runtime, true);\r\n\r\n    if (keypair.publicKey.toBase58() !== publicKey.toBase58()) {\r\n        throw new Error(\r\n            \"Generated public key doesn't match expected public key\"\r\n        );\r\n    }\r\n\r\n    return new SolanaAgentKit(\r\n        bs58.encode(keypair.secretKey),\r\n        runtime.getSetting(\"SOLANA_RPC_URL\"),\r\n        {\r\n            OPENAI_API_KEY: runtime.getSetting(\"OPENAI_API_KEY\"),\r\n        }\r\n    );\r\n}","import { Keypair, PublicKey } from \"@solana/web3.js\";\r\nimport { DeriveKeyProvider, TEEMode } from \"@elizaos/plugin-tee\";\r\nimport bs58 from \"bs58\";\r\nimport { type IAgentRuntime, elizaLogger } from \"@elizaos/core\";\r\n\r\nexport interface KeypairResult {\r\n    keypair?: Keypair;\r\n    publicKey?: PublicKey;\r\n}\r\n\r\n/**\r\n * Gets either a keypair or public key based on TEE mode and runtime settings\r\n * @param runtime The agent runtime\r\n * @param requirePrivateKey Whether to return a full keypair (true) or just public key (false)\r\n * @returns KeypairResult containing either keypair or public key\r\n */\r\nexport async function getWalletKey(\r\n    runtime: IAgentRuntime,\r\n    requirePrivateKey = true\r\n): Promise<KeypairResult> {\r\n    const teeMode = runtime.getSetting(\"TEE_MODE\") || TEEMode.OFF;\r\n\r\n    if (teeMode !== TEEMode.OFF) {\r\n        const walletSecretSalt = runtime.getSetting(\"WALLET_SECRET_SALT\");\r\n        if (!walletSecretSalt) {\r\n            throw new Error(\r\n                \"WALLET_SECRET_SALT required when TEE_MODE is enabled\"\r\n            );\r\n        }\r\n\r\n        const deriveKeyProvider = new DeriveKeyProvider(teeMode);\r\n        const deriveKeyResult = await deriveKeyProvider.deriveEd25519Keypair(\r\n            \"/\",\r\n            walletSecretSalt,\r\n            runtime.agentId\r\n        );\r\n\r\n        return requirePrivateKey\r\n            ? { keypair: deriveKeyResult.keypair }\r\n            : { publicKey: deriveKeyResult.keypair.publicKey };\r\n    }\r\n\r\n    // TEE mode is OFF\r\n    if (requirePrivateKey) {\r\n        const privateKeyString =\r\n            runtime.getSetting(\"SOLANA_PRIVATE_KEY\") ??\r\n            runtime.getSetting(\"WALLET_PRIVATE_KEY\");\r\n\r\n        if (!privateKeyString) {\r\n            throw new Error(\"Private key not found in settings\");\r\n        }\r\n\r\n        try {\r\n            // First try base58\r\n            const secretKey = bs58.decode(privateKeyString);\r\n            return { keypair: Keypair.fromSecretKey(secretKey) };\r\n        } catch (e) {\r\n            elizaLogger.log(\"Error decoding base58 private key:\", e);\r\n            try {\r\n                // Then try base64\r\n                elizaLogger.log(\"Try decoding base64 instead\");\r\n                const secretKey = Uint8Array.from(\r\n                    Buffer.from(privateKeyString, \"base64\")\r\n                );\r\n                return { keypair: Keypair.fromSecretKey(secretKey) };\r\n            } catch (e2) {\r\n                elizaLogger.error(\"Error decoding private key: \", e2);\r\n                throw new Error(\"Invalid private key format\");\r\n            }\r\n        }\r\n    } else {\r\n        const publicKeyString =\r\n            runtime.getSetting(\"SOLANA_PUBLIC_KEY\") ??\r\n            runtime.getSetting(\"WALLET_PUBLIC_KEY\");\r\n\r\n        if (!publicKeyString) {\r\n            throw new Error(\"Public key not found in settings\");\r\n        }\r\n\r\n        return { publicKey: new PublicKey(publicKeyString) };\r\n    }\r\n}\r\n","import {\r\n    type ActionExample,\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    settings,\r\n    type State,\r\n    type Action,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ACTIONS } from \"solana-agent-kit\";\r\nimport { getSAK } from \"../client\";\r\n\r\nconst TRADE_ACTION = ACTIONS.TRADE_ACTION;\r\n\r\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"inputTokenSymbol\": \"SOL\",\r\n    \"outputTokenSymbol\": \"USDC\",\r\n    \"inputTokenCA\": \"So11111111111111111111111111111111111111112\",\r\n    \"outputTokenCA\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\r\n    \"amount\": 1.5\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages and wallet information below:\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested token swap:\r\n- Input token symbol (the token being sold)\r\n- Output token symbol (the token being bought)\r\n- Input token contract address if provided\r\n- Output token contract address if provided\r\n- Amount to swap\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\r\n\\`\\`\\`json\r\n{\r\n    \"inputTokenSymbol\": string | null,\r\n    \"outputTokenSymbol\": string | null,\r\n    \"inputTokenCA\": string | null,\r\n    \"outputTokenCA\": string | null,\r\n    \"amount\": number | string | null\r\n}\r\n\\`\\`\\``;\r\n\r\n// if we get the token symbol but not the CA, check walet for matching token, and if we have, get the CA for it\r\n\r\nexport default {\r\n    name: TRADE_ACTION.name,\r\n    similes: TRADE_ACTION.similes,\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        // Check if the necessary parameters are provided in the message\r\n        elizaLogger.log(\"Message:\", message);\r\n        return true;\r\n    },\r\n    description: TRADE_ACTION.description,\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        const sak = await getSAK(runtime);\r\n        // composeState\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const swapContext = composeContext({\r\n            state,\r\n            template: swapTemplate,\r\n        });\r\n\r\n        const response = await generateObjectDeprecated({\r\n            runtime,\r\n            context: swapContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        elizaLogger.log(\"Response:\", response);\r\n        // const type = response.inputTokenSymbol?.toUpperCase() === \"SOL\" ? \"buy\" : \"sell\";\r\n\r\n        // Add SOL handling logic\r\n        if (response.inputTokenSymbol?.toUpperCase() === \"SOL\") {\r\n            response.inputTokenCA = settings.SOL_ADDRESS;\r\n        }\r\n        if (response.outputTokenSymbol?.toUpperCase() === \"SOL\") {\r\n            response.outputTokenCA = settings.SOL_ADDRESS;\r\n        }\r\n\r\n        if (!response.amount) {\r\n            elizaLogger.log(\"No amount provided, skipping swap\");\r\n            const responseMsg = {\r\n                text: \"I need the amount to perform the swap\",\r\n            };\r\n            callback?.(responseMsg);\r\n            return true;\r\n        }\r\n\r\n        // TODO: if response amount is half, all, etc, semantically retrieve amount and return as number\r\n        if (!response.amount) {\r\n            elizaLogger.log(\"Amount is not a number, skipping swap\");\r\n            const responseMsg = {\r\n                text: \"The amount must be a number\",\r\n            };\r\n            callback?.(responseMsg);\r\n            return true;\r\n        }\r\n        try {\r\n            const connection = new Connection(\r\n                \"https://api.mainnet-beta.solana.com\"\r\n            );\r\n\r\n            // const provider = new WalletProvider(connection, walletPublicKey);\r\n\r\n            console.log(\"Wallet Public Key:\", sak.wallet_address.toString());\r\n            console.log(\"inputTokenSymbol:\", response.inputTokenCA);\r\n            console.log(\"outputTokenSymbol:\", response.outputTokenCA);\r\n            console.log(\"amount:\", response.amount);\r\n\r\n            const txid = await sak.trade(\r\n                new PublicKey(response.outputTokenCA),\r\n                response.amount,\r\n                new PublicKey(response.inputTokenCA),\r\n            );\r\n\r\n            const latestBlockhash = await connection.getLatestBlockhash();\r\n\r\n            const confirmation = await connection.confirmTransaction(\r\n                {\r\n                    signature: txid,\r\n                    blockhash: latestBlockhash.blockhash,\r\n                    lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\r\n                },\r\n                \"confirmed\"\r\n            );\r\n\r\n            if (confirmation.value.err) {\r\n                throw new Error(\r\n                    `Transaction failed: ${confirmation.value.err}`\r\n                );\r\n            }\r\n\r\n            if (confirmation.value.err) {\r\n                throw new Error(\r\n                    `Transaction failed: ${confirmation.value.err}`\r\n                );\r\n            }\r\n\r\n            elizaLogger.log(\"Swap completed successfully!\");\r\n            elizaLogger.log(`Transaction ID: ${txid}`);\r\n\r\n            const responseMsg = {\r\n                text: `Swap completed successfully! Transaction ID: ${txid}`,\r\n            };\r\n\r\n            callback?.(responseMsg);\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token swap:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    inputTokenSymbol: \"SOL\",\r\n                    outputTokenSymbol: \"USDC\",\r\n                    amount: 0.1,\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Swapping 0.1 SOL for USDC...\",\r\n                    action: \"TOKEN_SWAP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Swap completed successfully! Transaction ID: ...\",\r\n                },\r\n            },\r\n        ],\r\n        // Add more examples as needed\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    type ActionExample,\r\n    type Content,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\nimport { ACTIONS } from \"solana-agent-kit\";\r\nimport { getSAK } from \"../client\";\r\n\r\nconst LEND_ASSET_ACTION = ACTIONS.LEND_ASSET_ACTION;\r\n\r\nexport interface LendAssetContent extends Content {\r\n    amount: number;\r\n}\r\n\r\nfunction isLendAssetContent(\r\n    runtime: IAgentRuntime,\r\n    content: any\r\n): content is LendAssetContent {\r\n    elizaLogger.log(\"Content for lend\", content);\r\n    return (\r\n        typeof content.amount === \"number\"\r\n    );\r\n}\r\n\r\nconst lendTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"amount\": \"100\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the lending request:\r\n- Amount of USDC to lend\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: LEND_ASSET_ACTION.name,\r\n    similes: LEND_ASSET_ACTION.similes,\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating lend asset from user:\", message.userId);\r\n        return false;\r\n    },\r\n    description: LEND_ASSET_ACTION.description,\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting LEND_ASSET handler...\");\r\n        const sak = await getSAK(runtime);\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose lend context\r\n        const lendContext = composeContext({\r\n            state,\r\n            template: lendTemplate,\r\n        });\r\n\r\n        // Generate lend content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: lendContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate lend content\r\n        if (!isLendAssetContent(runtime, content)) {\r\n            elizaLogger.error(\"Invalid content for LEND_ASSET action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process lending request. Invalid content provided.\",\r\n                    content: { error: \"Invalid lend content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const lendResult = await sak.lendAssets(\r\n\r\n                content.amount\r\n            );\r\n\r\n            console.log(\"Lend result:\", lendResult);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully lent ${content.amount} USDC`,\r\n                    content: {\r\n                        success: true,\r\n                        lendResult: lendResult,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during lending:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error lending asset: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I want to lend 100 USDC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Lend 100 USDC\",\r\n                    action: \"LEND_ASSET\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully lent 100 USDC\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;","import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    type ActionExample,\r\n    type Content,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\nimport { ACTIONS } from \"solana-agent-kit\";\r\nimport { getSAK } from \"../client\";\r\n\r\nconst STAKE_ACTION = ACTIONS.STAKE_WITH_JUP_ACTION;\r\n\r\nexport interface StakeContent extends Content {\r\n    amount: number;\r\n}\r\n\r\nfunction isStakeContent(\r\n    runtime: IAgentRuntime,\r\n    content: any\r\n): content is StakeContent {\r\n    elizaLogger.log(\"Content for stake\", content);\r\n    return (\r\n        typeof content.amount === \"number\"\r\n    );\r\n}\r\n\r\nconst stakeTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"amount\": \"100\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the staking request:\r\n- Amount to stake\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: STAKE_ACTION.name,\r\n    similes: STAKE_ACTION.similes,\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating stake from user:\", message.userId);\r\n        return false;\r\n    },\r\n    description: STAKE_ACTION.description,\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting STAKE handler...\");\r\n        const sak = await getSAK(runtime);\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose stake context\r\n        const stakeContext = composeContext({\r\n            state,\r\n            template: stakeTemplate,\r\n        });\r\n\r\n        // Generate stake content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: stakeContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate stake content\r\n        if (!isStakeContent(runtime, content)) {\r\n            elizaLogger.error(\"Invalid content for STAKE action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process staking request. Invalid content provided.\",\r\n                    content: { error: \"Invalid stake content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const stakeResult = await sak.stake(\r\n                content.amount\r\n            );\r\n\r\n            console.log(\"Stake result:\", stakeResult);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully staked ${content.amount} tokens`,\r\n                    content: {\r\n                        success: true,\r\n                        tx: stakeResult,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during staking:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error staking: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I want to stake 100 tokens\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Stake 100 tokens\",\r\n                    action: \"STAKE_WITH_JUP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully staked 100 tokens\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;","\r\nimport { elizaLogger,  } from \"@elizaos/core\";\r\n\r\nimport {\r\n    PublicKey,\r\n\r\n} from \"@solana/web3.js\";\r\n\r\nimport {\r\n    type ActionExample,\r\n    type Content,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\nimport { ACTIONS } from \"solana-agent-kit\";\r\nimport { getSAK } from \"../client\";\r\n\r\nconst TRANSFER_ACTION = ACTIONS.TRANSFER_ACTION;\r\n\r\nexport interface TransferContent extends Content {\r\n    tokenAddress: string;\r\n    recipient: string;\r\n    amount: string | number;\r\n}\r\n\r\nfunction isTransferContent(\r\n    runtime: IAgentRuntime,\r\n    content: any\r\n): content is TransferContent {\r\n    elizaLogger.log(\"Content for transfer\", content);\r\n    return (\r\n        typeof content.tokenAddress === \"string\" &&\r\n        typeof content.recipient === \"string\" &&\r\n        (typeof content.amount === \"string\" ||\r\n            typeof content.amount === \"number\")\r\n    );\r\n}\r\n\r\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"tokenAddress\": \"BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump\",\r\n    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\r\n    \"amount\": \"1000\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Token contract address\r\n- Recipient wallet address\r\n- Amount to transfer\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: TRANSFER_ACTION.name,\r\n    similes: TRANSFER_ACTION.similes,\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating transfer from user:\", message.userId);\r\n        //add custom validate logic here\r\n        /*\r\n            const adminIds = runtime.getSetting(\"ADMIN_USER_IDS\")?.split(\",\") || [];\r\n            //elizaLogger.log(\"Admin IDs from settings:\", adminIds);\r\n\r\n            const isAdmin = adminIds.includes(message.userId);\r\n\r\n            if (isAdmin) {\r\n                //elizaLogger.log(`Authorized transfer from user: ${message.userId}`);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                //elizaLogger.log(`Unauthorized transfer attempt from user: ${message.userId}`);\r\n                return false;\r\n            }\r\n            */\r\n        return false;\r\n    },\r\n    description: TRANSFER_ACTION.description,\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\r\n        const sak = await getSAK(runtime);\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state,\r\n            template: transferTemplate,\r\n        });\r\n\r\n        // Generate transfer content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate transfer content\r\n        if (!isTransferContent(runtime, content)) {\r\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process transfer request. Invalid content provided.\",\r\n                    content: { error: \"Invalid transfer content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n\r\n            const mintPubkey = new PublicKey(content.tokenAddress);\r\n            const recipientPubkey = new PublicKey(content.recipient);\r\n\r\n\r\n            const txId = await sak.transfer(recipientPubkey, Number(content.amount), mintPubkey)\r\n\r\n            console.log(\"Transfer successful:\", txId);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully transferred ${content.amount} tokens to ${content.recipient}\\nTransaction: ${txId}`,\r\n                    content: {\r\n                        success: true,\r\n                        signature : txId,\r\n                        amount: content.amount,\r\n                        recipient: content.recipient,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token transfer:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send 69 EZSIS BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll send 69 EZSIS tokens now...\",\r\n                    action: \"SEND_TOKEN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully sent 69 EZSIS tokens to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\\nTransaction: 5KtPn3DXXzHkb7VAVHZGwXJQqww39ASnrf7YkyJoF2qAGEpBEEGvRHLnnTG8ZVwKqNHMqSckWVGnsQAgfH5pbxEb\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","\r\nimport { elizaLogger,  } from \"@elizaos/core\";\r\nimport {\r\n    type ActionExample,\r\n    type Content,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\nimport { ACTIONS } from \"solana-agent-kit\";\r\nimport { getSAK } from \"../client\";\r\n\r\nconst GET_TOKEN_INFO_ACTION = ACTIONS.GET_TOKEN_DATA_ACTION;\r\n\r\nexport interface GetTokenInfoContent extends Content {\r\n    tokenAddress: string;\r\n}\r\n\r\nfunction isGetTokenInfoContent(\r\n    runtime: IAgentRuntime,\r\n    content: any\r\n): content is GetTokenInfoContent {\r\n    elizaLogger.log(\"Content for transfer\", content);\r\n    return (\r\n        typeof content.tokenAddress === \"string\"\r\n    );\r\n}\r\n\r\nconst getTokenInfoTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"tokenAddress\": \"SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token:\r\n- Token contract address\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: GET_TOKEN_INFO_ACTION.name,\r\n    similes: GET_TOKEN_INFO_ACTION.similes,\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating get token info from user:\", message.userId);\r\n\r\n        return false;\r\n    },\r\n    description: GET_TOKEN_INFO_ACTION.description,\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting GET_TOKEN_INFO handler...\");\r\n        const sak = await getSAK(runtime);\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose get token info context\r\n        const getTokenInfoContext = composeContext({\r\n            state,\r\n            template: getTokenInfoTemplate,\r\n        });\r\n\r\n        // Generate get token info content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: getTokenInfoContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate get token info content\r\n        if (!isGetTokenInfoContent(runtime, content)) {\r\n            elizaLogger.error(\"Invalid content for GET_TOKEN_INFO action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process get token info request. Invalid content provided.\",\r\n                    content: { error: \"Invalid get token info content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n\r\n            const tokenData = await sak.getTokenDataByAddress(content.tokenAddress)\r\n\r\n            console.log(\"Token data:\", tokenData);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully retrieved token data for ${content.tokenAddress}`,\r\n                    content: {\r\n                        success: true,\r\n                        tokenData: tokenData,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during get token info:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error getting token info: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get token info for SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Get token info for SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\r\n                    action: \"GET_TOKEN_INFO\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully retrieved token info for SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    type ActionExample,\r\n    type Content,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\nimport { ACTIONS } from \"solana-agent-kit\";\r\nimport { getSAK } from \"../client\";\r\n\r\nconst GIBWORK_ACTION = ACTIONS.CREATE_GIBWORK_TASK_ACTION;\r\n\r\nexport interface GibWorkContent extends Content {\r\n    title: string;\r\n    content: string;\r\n    requirements: string;\r\n    tags: string[];\r\n    tokenMintAddress: string;\r\n    tokenAmount: number;\r\n}\r\n\r\nfunction isGibWorkContent(\r\n    runtime: IAgentRuntime,\r\n    content: any\r\n): content is GibWorkContent {\r\n    elizaLogger.log(\"Content for gibwork\", content);\r\n    return (\r\n        typeof content.title === \"string\" &&\r\n        typeof content.content === \"string\" &&\r\n        typeof content.requirements === \"string\" &&\r\n        Array.isArray(content.tags) &&\r\n        typeof content.tokenMintAddress === \"string\" &&\r\n        typeof content.tokenAmount === \"number\"\r\n    );\r\n}\r\n\r\nconst gibworkTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"title\": \"Build a Solana dApp\",\r\n    \"content\": \"Create a simple Solana dApp with React frontend\",\r\n    \"requirements\": \"Experience with Rust and React\",\r\n    \"tags\": [\"solana\", \"rust\", \"react\"],\r\n    \"tokenMintAddress\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\r\n    \"tokenAmount\": 100\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the GibWork task:\r\n- Title of the task\r\n- Content/description of the task\r\n- Requirements for the task\r\n- Tags related to the task\r\n- Token mint address for payment\r\n- Token amount for payment\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: GIBWORK_ACTION.name,\r\n    similes: GIBWORK_ACTION.similes,\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating gibwork task from user:\", message.userId);\r\n        return false;\r\n    },\r\n    description: GIBWORK_ACTION.description,\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting CREATE_GIBWORK_TASK handler...\");\r\n        const sak = await getSAK(runtime);\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose gibwork context\r\n        const gibworkContext = composeContext({\r\n            state,\r\n            template: gibworkTemplate,\r\n        });\r\n\r\n        // Generate gibwork content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: gibworkContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate gibwork content\r\n        if (!isGibWorkContent(runtime, content)) {\r\n            elizaLogger.error(\"Invalid content for CREATE_GIBWORK_TASK action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process GibWork task creation. Invalid content provided.\",\r\n                    content: { error: \"Invalid gibwork content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const gibworkResult = await sak.createGibworkTask(\r\n                content.title,\r\n                content.content,\r\n                content.requirements,\r\n                content.tags,\r\n                content.tokenMintAddress,\r\n                content.tokenAmount\r\n            );\r\n\r\n            console.log(\"GibWork task creation result:\", gibworkResult);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully created GibWork task: ${content.title}`,\r\n                    content: {\r\n                        success: true,\r\n                        gibworkResult: gibworkResult,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during GibWork task creation:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error creating GibWork task: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create a GibWork task for building a Solana dApp, offering 100 USDC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Creating GibWork task\",\r\n                    action: \"CREATE_GIBWORK_TASK\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully created GibWork task: Build a Solana dApp\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;","import type { Plugin } from \"@elizaos/core\";\r\nimport createToken from \"./actions/createToken.ts\";\r\nimport swap from \"./actions/swap.ts\";\r\nimport lend from \"./actions/lend.ts\";\r\nimport stake from \"./actions/stake.ts\";\r\nimport transfer from \"./actions/transfer.ts\";\r\nimport getTokenInfo from \"./actions/getTokenInfo.ts\";\r\nimport gibwork from \"./actions/gibwork.ts\";\r\n\r\nexport const solanaAgentkitPlugin: Plugin = {\r\n    name: \"solana\",\r\n    description: \"Solana Plugin with solana agent kit for Eliza\",\r\n    actions: [createToken, swap, lend, stake, transfer, getTokenInfo, gibwork],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default solanaAgentkitPlugin;\r\n"],"mappings":"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","names":["elizaLogger","bs58","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","PublicKey","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","PublicKey","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","PublicKey","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","PublicKey","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","ModelClass","composeContext","generateObjectDeprecated","ACTIONS","ACTIONS","elizaLogger","composeContext","generateObjectDeprecated","ModelClass"]}