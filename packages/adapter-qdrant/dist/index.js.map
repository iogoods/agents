{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { v4,v5 } from \"uuid\";\r\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\r\nimport {\r\n    Account,\r\n    Actor,\r\n    GoalStatus,\r\n    IDatabaseCacheAdapter,\r\n    UUID,\r\n    elizaLogger,\r\n    RAGKnowledgeItem,\r\n    DatabaseAdapter,\r\n    Participant,\r\n    type Memory,\r\n    type Goal,\r\n    type Relationship,\r\n} from \"@elizaos/core\";\r\n\r\n\r\nexport class QdrantDatabaseAdapter  extends DatabaseAdapter<QdrantClient>  implements IDatabaseCacheAdapter {\r\n    db: QdrantClient;\r\n    collectionName: string = 'collection';\r\n    qdrantV5UUIDNamespace: string = \"00000000-0000-0000-0000-000000000000\";\r\n    cacheM: Map<string, string> = new Map<string, string>();\r\n    vectorSize: number;\r\n    constructor(url: string, apiKey: string, port: number, vectorSize: number) {\r\n        super();\r\n        elizaLogger.info(\"new Qdrant client...\");\r\n        this.db = new QdrantClient({\r\n                url: url,\r\n                apiKey:apiKey,\r\n                port: port,\r\n        });\r\n       this.vectorSize = vectorSize;\r\n    }\r\n\r\n    private preprocess(content: string): string {\r\n        if (!content || typeof content !== \"string\") {\r\n            elizaLogger.warn(\"Invalid input for preprocessing\");\r\n            return \"\";\r\n        }\r\n       const processedContent =  content\r\n        .replace(/```[\\s\\S]*?```/g, \"\")\r\n        .replace(/`.*?`/g, \"\")\r\n        .replace(/#{1,6}\\s*(.*)/g, \"$1\")\r\n        .replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\r\n        .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\r\n        .replace(/(https?:\\/\\/)?(www\\.)?([^\\s]+\\.[^\\s]+)/g, \"$3\")\r\n        .replace(/<@[!&]?\\d+>/g, \"\")\r\n        .replace(/<[^>]*>/g, \"\")\r\n        .replace(/^\\s*[-*_]{3,}\\s*$/gm, \"\")\r\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\")\r\n        .replace(/\\/\\/.*/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .replace(/\\n{3,}/g, \"\\n\\n\")\r\n        .replace(/[^a-zA-Z0-9\\s\\-_./:?=&]/g, \"\")\r\n        .trim()\r\n        return processedContent\r\n    }\r\n\r\n    async init () {\r\n        const response = await this.db.getCollections();\r\n        const collectionNames = response.collections.map((collection) => collection.name);\r\n        if (collectionNames.includes(this.collectionName)) {\r\n            elizaLogger.info(\"Collection already exists.\");\r\n        } else {\r\n            elizaLogger.info(\"create collection...\");\r\n            await this.db.createCollection(this.collectionName, {\r\n                vectors: {\r\n                    size: this.vectorSize,\r\n                    distance: 'Cosine',\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    async createKnowledge(knowledge: RAGKnowledgeItem): Promise<void> {\r\n        const metadata = knowledge.content.metadata || {}\r\n        elizaLogger.info(\"Qdrant adapter createKnowledge id:\", knowledge.id);\r\n        await this.db.upsert(this.collectionName, {\r\n            wait: true,\r\n            points: [\r\n                {\r\n                    id: this.buildQdrantID(knowledge.id), // the qdrant id must be a standard uuid\r\n                    vector: knowledge.embedding ? Array.from(knowledge.embedding) : [],\r\n                    payload:{\r\n                        agentId:  metadata.isShared ? null : knowledge.agentId,\r\n                        content: {\r\n                           text: knowledge.content.text,\r\n                           metadata: metadata\r\n                        },\r\n                        createdAt: knowledge.createdAt || Date.now(),\r\n                        isMain:  metadata.isMain || false,\r\n                        originalId: metadata.originalId || null,\r\n                        chunkIndex: metadata.chunkIndex || null,\r\n                        isShared : metadata.isShared || false\r\n                    }\r\n                }\r\n            ],\r\n        })\r\n    }\r\n\r\n    async getKnowledge(params: {\r\n        query?: string;\r\n        id?: UUID;\r\n        conversationContext?: string;\r\n        limit?: number;\r\n        agentId?: UUID;\r\n    }): Promise<RAGKnowledgeItem[]> {\r\n        elizaLogger.info(\"Qdrant adapter getKnowledge...\", params.id);\r\n        const rows = await this.db.retrieve(this.collectionName, {\r\n            ids: params.id ? [params.id.toString()] : [],\r\n        });\r\n        const results: RAGKnowledgeItem[] = rows.map((row) => {\r\n            const contentObj = typeof row.payload?.content === \"string\"\r\n            ? JSON.parse(row.payload.content)\r\n            : row.payload?.content;\r\n            return {\r\n                id: row.id.toString() as UUID,\r\n                agentId: (row.payload?.agentId || \"\") as UUID,\r\n                content: {\r\n                    text: String(contentObj.text || \"\"),\r\n                    metadata: contentObj.metadata as { [key: string]: unknown }\r\n                },\r\n                embedding: row.vector ? Float32Array.from(row.vector as number[]) : undefined,\r\n                createdAt: row.payload?.createdAt as number\r\n            };\r\n        });\r\n        return results;\r\n    }\r\n\r\n    async processFile(file: { path: string; content: string; type: \"pdf\" | \"md\" | \"txt\"; isShared: boolean }): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async removeKnowledge(id: UUID): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async searchKnowledge(params: {\r\n        agentId: UUID;\r\n        embedding: Float32Array | number[];\r\n        match_threshold?: number;\r\n        match_count?: number;\r\n        searchText?: string\r\n    }): Promise<RAGKnowledgeItem[]> {\r\n        const cacheKey = `${params.agentId}:${params.embedding.toString()}`;\r\n            const cachedResult = await this.getCache({\r\n                key: cacheKey,\r\n                agentId: params.agentId\r\n            });\r\n\r\n            if (cachedResult) {\r\n                return JSON.parse(cachedResult);\r\n            }\r\n        const rows = await this.db.search(this.collectionName, {\r\n            vector:  Array.from(params.embedding),\r\n            with_vector: true\r\n        });\r\n\r\n        const results: RAGKnowledgeItem[] = rows.map((row) => {\r\n            const contentObj = typeof row.payload?.content === \"string\"\r\n            ? JSON.parse(row.payload.content)\r\n            : row.payload?.content;\r\n            elizaLogger.info(\"Qdrant adapter searchKnowledge  id:\", row.id.toString() as UUID);\r\n            return {\r\n                id: row.id.toString() as UUID,\r\n                agentId: (row.payload?.agentId || \"\") as UUID,\r\n                content: {\r\n                    text: String(contentObj.text || \"\"),\r\n                    metadata: contentObj.metadata as { [key: string]: unknown }\r\n                },\r\n                embedding: row.vector ? Float32Array.from(row.vector as number[]) : undefined,\r\n                createdAt: row.payload?.createdAt as number,\r\n                similarity: row.score || 0\r\n            };\r\n        });\r\n        elizaLogger.debug(\"Qdrant adapter searchKnowledge results:\", results);\r\n        await this.setCache({\r\n            key: cacheKey,\r\n            agentId: params.agentId,\r\n            value: JSON.stringify(results)\r\n        });\r\n        return results;\r\n    }\r\n\r\n    async addParticipant(userId: UUID, roomId: UUID): Promise<boolean> {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    async clearKnowledge(agentId: UUID, shared?: boolean): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async close(): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async countMemories(roomId: UUID, unique?: boolean, tableName?: string): Promise<number> {\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    async createAccount(account: Account): Promise<boolean> {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    async createGoal(goal: Goal): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async createMemory(memory: Memory, tableName: string, unique?: boolean): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async createRelationship(params: { userA: UUID; userB: UUID }): Promise<boolean> {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    async createRoom(roomId?: UUID): Promise<UUID> {\r\n        const newRoomId = roomId || v4();\r\n        return newRoomId as UUID;\r\n    }\r\n\r\n    async getAccountById(userId: UUID): Promise<Account | null> {\r\n        return null;\r\n    }\r\n\r\n    async getActorDetails(params: { roomId: UUID }): Promise<Actor[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getCachedEmbeddings(params: {\r\n        query_table_name: string;\r\n        query_threshold: number;\r\n        query_input: string;\r\n        query_field_name: string;\r\n        query_field_sub_name: string;\r\n        query_match_count: number\r\n    }): Promise<{ embedding: number[]; levenshtein_score: number }[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getGoals(params: {\r\n        agentId: UUID;\r\n        roomId: UUID;\r\n        userId?: UUID | null;\r\n        onlyInProgress?: boolean;\r\n        count?: number\r\n    }): Promise<Goal[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getMemories(params: {\r\n        roomId: UUID;\r\n        count?: number;\r\n        unique?: boolean;\r\n        tableName: string;\r\n        agentId: UUID;\r\n        start?: number;\r\n        end?: number\r\n    }): Promise<Memory[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getMemoriesByRoomIds(params: { tableName: string; agentId: UUID; roomIds: UUID[] }): Promise<Memory[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getMemoryById(id: UUID): Promise<Memory | null> {\r\n        return null;\r\n    }\r\n\r\n    async getParticipantUserState(roomId: UUID, userId: UUID): Promise<\"FOLLOWED\" | \"MUTED\" | null> {\r\n        return null;\r\n    }\r\n\r\n    async getParticipantsForAccount(userId: UUID): Promise<Participant[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getParticipantsForRoom(roomId: UUID): Promise<UUID[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async  getRelationship(params: { userA: UUID; userB: UUID }): Promise<Relationship | null> {\r\n        return null;\r\n    }\r\n\r\n    async getRelationships(params: { userId: UUID }): Promise<Relationship[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getRoom(roomId: UUID): Promise<UUID | null> {\r\n        return null;\r\n    }\r\n\r\n    async getRoomsForParticipant(userId: UUID): Promise<UUID[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async getRoomsForParticipants(userIds: UUID[]): Promise<UUID[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async log(params: { body: { [p: string]: unknown }; userId: UUID; roomId: UUID; type: string }): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async removeAllGoals(roomId: UUID): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async removeAllMemories(roomId: UUID, tableName: string): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async removeGoal(goalId: UUID): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async removeMemory(memoryId: UUID, tableName: string): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async removeParticipant(userId: UUID, roomId: UUID): Promise<boolean> {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    async removeRoom(roomId: UUID): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async searchMemories(params: {\r\n        tableName: string;\r\n        agentId: UUID;\r\n        roomId: UUID;\r\n        embedding: number[];\r\n        match_threshold: number;\r\n        match_count: number;\r\n        unique: boolean\r\n    }): Promise<Memory[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async searchMemoriesByEmbedding(embedding: number[], params: {\r\n        match_threshold?: number;\r\n        count?: number;\r\n        roomId?: UUID;\r\n        agentId?: UUID;\r\n        unique?: boolean;\r\n        tableName: string\r\n    }): Promise<Memory[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    async setParticipantUserState(roomId: UUID, userId: UUID, state: \"FOLLOWED\" | \"MUTED\" | null): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async updateGoal(goal: Goal): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async updateGoalStatus(params: { goalId: UUID; status: GoalStatus }): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    getMemoriesByIds(memoryIds: UUID[], tableName?: string): Promise<Memory[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    async getCache(params: {\r\n        key: string;\r\n        agentId: UUID;\r\n    }): Promise<string | undefined> {\r\n        let key = this.buildKey(params.agentId, params.key);\r\n        let result = this.cacheM.get(key);\r\n        return result;\r\n    }\r\n\r\n    async setCache(params: {\r\n        key: string;\r\n        agentId: UUID;\r\n        value: string;\r\n    }): Promise<boolean> {\r\n        this.cacheM.set(this.buildKey(params.agentId, params.key),params.value)\r\n        return true;\r\n    }\r\n\r\n    async deleteCache(params: {\r\n        key: string;\r\n        agentId: UUID;\r\n    }): Promise<boolean> {\r\n        const key = this.buildKey(params.agentId, params.key);\r\n        return this.cacheM.delete(key);\r\n    }\r\n\r\n    private buildKey(agentId: UUID, key: string): string {\r\n        return `${agentId}:${key}`;\r\n    }\r\n\r\n    private buildQdrantID(id: string): string{\r\n       return v5(id,this.qdrantV5UUIDNamespace);\r\n    }\r\n}\r\n\r\nexport default QdrantDatabaseAdapter;\r\n"],"mappings":"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","names":[]}