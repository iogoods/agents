{"version":3,"sources":["../src/functions/bringIQData.ts","../src/types/iq.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\n\r\n// Types\r\ninterface TransactionInfo {\r\n    argData?: {\r\n        type_field?: string;\r\n        offset?: string;\r\n        tail_tx?: string;\r\n    };\r\n}\r\n\r\ninterface TransactionData {\r\n    method: string;\r\n    code: string;\r\n    decode_break: number;\r\n    before_tx: string;\r\n}\r\n\r\ninterface TransactionDataResponse {\r\n    code: string;\r\n    method: string;\r\n    decode_break: number;\r\n}\r\n\r\ninterface CodeResult {\r\n    json_data: string;\r\n    commit_message: string;\r\n}\r\n\r\n// Constants\r\nconst NETWORK = process.env.IQSOlRPC || \"https://api.mainnet-beta.solana.com\";\r\nconst WALLET_ADDRESS = process.env.IQ_WALLET_ADDRESS;\r\nconst IQ_HOST = \"https://solanacontractapi.uc.r.appspot.com\";\r\nconst GENESIS_TX = \"Genesis\";\r\nconst ERROR_RESULT: CodeResult = {\r\n    json_data: \"false\",\r\n    commit_message: \"false\",\r\n};\r\n\r\n// Initialize connection\r\nconst connection = new Connection(NETWORK, \"confirmed\");\r\n\r\nasync function convertTextToEmoji(text: string): Promise<string> {\r\n    return text.replace(/\\/u([0-9A-Fa-f]{4,6})/g, (_, code) =>\r\n        String.fromCodePoint(Number.parseInt(code, 16))\r\n    );\r\n}\r\n\r\nasync function fetchTransactionInfo(\r\n    txId: string\r\n): Promise<TransactionInfo[\"argData\"] | null> {\r\n    try {\r\n        const response = await fetch(`${IQ_HOST}/get_transaction_info/${txId}`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.argData || null;\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error fetching transaction info:\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function fetchDBPDA(): Promise<string | null> {\r\n    if (!WALLET_ADDRESS) {\r\n        elizaLogger.error(\"Wallet address not provided\");\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        elizaLogger.info(\"Connecting to Solana...(IQ6900)\");\r\n        elizaLogger.info(`Your Address: ${WALLET_ADDRESS}`);\r\n\r\n        const response = await fetch(`${IQ_HOST}/getDBPDA/${WALLET_ADDRESS}`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.DBPDA || null;\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error fetching PDA:\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function getTransactionData(transactionData: TransactionData): Promise<{\r\n    data: TransactionDataResponse | \"fail\";\r\n    before_tx: string;\r\n}> {\r\n    if (!transactionData || !(\"code\" in transactionData)) {\r\n        return {\r\n            data: \"fail\",\r\n            before_tx: \"fail\",\r\n        };\r\n    }\r\n\r\n    return {\r\n        data: {\r\n            code: transactionData.code,\r\n            method: transactionData.method,\r\n            decode_break: transactionData.decode_break,\r\n        },\r\n        before_tx: transactionData.before_tx,\r\n    };\r\n}\r\n\r\nasync function extractCommitMessage(dataTxid: string): Promise<string | null> {\r\n    const txInfo = await fetchTransactionInfo(dataTxid);\r\n    if (!txInfo) return null;\r\n\r\n    const type_field = txInfo.type_field || null;\r\n    if (type_field === \"json\" && txInfo.offset) {\r\n        const [, commitMessage] = txInfo.offset.split(\"commit: \");\r\n        return commitMessage || null;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction isTransactionDataResponse(data: TransactionDataResponse | \"fail\"): data is TransactionDataResponse {\r\n    return data !== \"fail\" && typeof data === \"object\" && \"code\" in data;\r\n}\r\n\r\nasync function bringCode(dataTxid: string): Promise<CodeResult> {\r\n    const txInfo = await fetchTransactionInfo(dataTxid);\r\n    if (!txInfo || !txInfo.tail_tx) return ERROR_RESULT;\r\n\r\n    const chunks: string[] = [];\r\n    let before_tx = txInfo.tail_tx;\r\n\r\n    if (before_tx === null) return ERROR_RESULT;\r\n\r\n    try {\r\n        while (before_tx !== GENESIS_TX) {\r\n            if (!before_tx) {\r\n                elizaLogger.error(\"Before transaction undefined\");\r\n                return ERROR_RESULT;\r\n            }\r\n\r\n            elizaLogger.info(`Chunks: ${before_tx}`);\r\n            const chunk = await fetchTransactionInfo(before_tx);\r\n\r\n            if (!chunk) {\r\n                elizaLogger.error(\"No chunk found\");\r\n                return ERROR_RESULT;\r\n            }\r\n\r\n            const chunkData = await getTransactionData(\r\n                chunk as TransactionData\r\n            );\r\n            if (!chunkData.data || !isTransactionDataResponse(chunkData.data)) {\r\n                elizaLogger.error(\"Chunk data undefined or invalid\");\r\n                return ERROR_RESULT;\r\n            }\r\n\r\n            chunks.push(chunkData.data.code);\r\n            before_tx = chunkData.before_tx;\r\n        }\r\n\r\n        const textData = chunks.reverse().join(\"\");\r\n        return {\r\n            json_data: await convertTextToEmoji(textData),\r\n            commit_message: txInfo.offset || \"false\",\r\n        };\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error in bringCode:\", error);\r\n        return ERROR_RESULT;\r\n    }\r\n}\r\n\r\nasync function fetchSignaturesForAddress(\r\n    dbAddress: PublicKey\r\n): Promise<string[]> {\r\n    try {\r\n        elizaLogger.info(\"Find Your Signature...(IQ6900)\");\r\n        const signatures = await connection.getSignaturesForAddress(dbAddress, {\r\n            limit: 20,\r\n        });\r\n        return signatures.map((sig) => sig.signature);\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error fetching signatures:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nasync function findRecentJsonSignature(): Promise<string | null> {\r\n    const dbAddress = await fetchDBPDA();\r\n    if (!dbAddress) {\r\n        elizaLogger.error(\"Failed to fetch DBPDA\");\r\n        return null;\r\n    }\r\n\r\n    const signatures = await fetchSignaturesForAddress(\r\n        new PublicKey(dbAddress)\r\n    );\r\n    if (signatures.length === 0) {\r\n        elizaLogger.error(\"No signatures found\");\r\n        return null;\r\n    }\r\n\r\n    for (const signature of signatures) {\r\n        const commit = await extractCommitMessage(signature);\r\n        if (commit) return signature;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport async function bringAgentWithWalletAddress(): Promise<string | null> {\r\n    const recent = await findRecentJsonSignature();\r\n    if (!recent) {\r\n        elizaLogger.error(\"Cannot found onchain data in this wallet.\");\r\n        return null;\r\n    }\r\n\r\n    const result = await bringCode(recent);\r\n    return result.json_data === \"false\" ? null : result.json_data;\r\n}\r\n","import { bringAgentWithWalletAddress } from \"../functions/bringIQData.ts\";\r\n\r\nconst onchainJson = await (async () => {\r\n    return await bringAgentWithWalletAddress();\r\n})();\r\n\r\n\r\nexport { onchainJson };","import type { Plugin } from \"@elizaos/core\";\r\nexport { onchainJson } from \"./types/iq.ts\";\r\n\r\nexport const elizaCodeinPlugin: Plugin = {\r\n    name: \"eliza-codein\",\r\n    description: \"Plugin that interacts with the on-chain inscription method 'Code-In'\",\r\n    actions: [\r\n    ],\r\n    providers: [\r\n        /* custom providers */\r\n    ],\r\n    evaluators: [\r\n         /* custom evaluators */\r\n    ],\r\n    services: [],\r\n    clients: [],\r\n\r\n};\r\n"],"mappings":"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","names":[]}