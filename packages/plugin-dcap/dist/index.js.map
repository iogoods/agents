{"version":3,"sources":["../src/dcap.ts","../src/quote.ts","../src/utils.ts","../src/actions/on-chain.ts","../src/index.ts"],"sourcesContent":["import type { TransactionResponse } from \"ethers\";\r\nimport { Contract, JsonRpcProvider, Wallet } from \"ethers\";\r\n\r\nexport namespace Chain {\r\n    export enum Testnet {\r\n        AUTOMATA = \"automata_testnet\",\r\n    }\r\n\r\n    export enum Mainnet {}\r\n\r\n    export const Config: Record<Chain, { rpcUrl: string; address: string }> = {\r\n        [Testnet.AUTOMATA]: {\r\n            rpcUrl: \"https://1rpc.io/ata/testnet\",\r\n            address: \"0x6D67Ae70d99A4CcE500De44628BCB4DaCfc1A145\",\r\n        },\r\n    };\r\n}\r\nexport type Chain = Chain.Testnet | Chain.Mainnet;\r\n\r\nexport async function verifyAndAttestOnChain(\r\n    privateKey: string,\r\n    rawQuote: string,\r\n    chain: Chain = Chain.Testnet.AUTOMATA\r\n) {\r\n    const { rpcUrl, address } = Chain.Config[chain];\r\n    const provider = new JsonRpcProvider(rpcUrl);\r\n    const wallet = new Wallet(privateKey, provider);\r\n    const contract = new Contract(\r\n        address,\r\n        [\r\n            \"function getBp() public view returns (uint16)\",\r\n            \"function verifyAndAttestOnChain(bytes calldata rawQuote) external payable returns (bool success, bytes memory output)\",\r\n        ],\r\n        wallet\r\n    );\r\n    const estimateGas = async (value: bigint) =>\r\n        await contract.verifyAndAttestOnChain.estimateGas(rawQuote, { value });\r\n\r\n    const $bp = contract.getBp();\r\n    const $fee = provider.getFeeData();\r\n    const gas = await estimateGas(await provider.getBalance(wallet));\r\n    const bp = await $bp;\r\n    const { gasPrice, maxFeePerGas } = await $fee;\r\n    const tx = await contract.verifyAndAttestOnChain(rawQuote, {\r\n        value: (gas * (gasPrice ?? maxFeePerGas ?? 0n) * bp * 105n) / 1000000n,\r\n    });\r\n    return await (tx as TransactionResponse).wait();\r\n}\r\n","import { elizaLogger } from \"@elizaos/core\";\r\nimport { SgxAttestationProvider } from \"@elizaos/plugin-sgx\";\r\nimport { RemoteAttestationProvider, type TEEMode } from \"@elizaos/plugin-tee\";\r\nimport { DCAPMode } from \"./types\";\r\n\r\nexport const DEFAULT_QUOTE =\r\n    \"r\n\r\nasync function tryQuote(promise: Promise<any>, type: string) {\r\n    try {\r\n        const { quote } = await promise;\r\n        return quote as string;\r\n    } catch (e) {\r\n        elizaLogger.error(`Error getting ${type} quote`, e);\r\n    }\r\n}\r\n\r\nexport async function getQuote(\r\n    message: string,\r\n    dcapMode?: DCAPMode,\r\n    teeMode?: TEEMode\r\n) {\r\n    switch (dcapMode) {\r\n        case DCAPMode.PLUGIN_SGX:\r\n            return await tryQuote(\r\n                new SgxAttestationProvider().generateAttestation(message),\r\n                \"SGX\"\r\n            );\r\n        case DCAPMode.PLUGIN_TEE:\r\n            return await tryQuote(\r\n                new RemoteAttestationProvider(teeMode).generateAttestation(\r\n                    message\r\n                ),\r\n                \"TDX\"\r\n            );\r\n    }\r\n    return DEFAULT_QUOTE;\r\n}\r\n","import type { IAgentRuntime } from \"@elizaos/core\";\r\nimport { TEEMode } from \"@elizaos/plugin-tee\";\r\nimport { DCAPMode } from \"./types\";\r\n\r\nexport const is0xString = (s: string) =>\r\n    typeof s === \"string\" && s.startsWith(\"0x\");\r\n\r\nexport function hasPrivateKey(runtime: IAgentRuntime) {\r\n    try {\r\n        return is0xString(runtime.getSetting(\"EVM_PRIVATE_KEY\"));\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getDCAPMode(runtime: IAgentRuntime) {\r\n    try {\r\n        const mode = runtime.getSetting(\"DCAP_MODE\");\r\n        if (!mode) return;\r\n        switch (mode.toUpperCase()) {\r\n            case DCAPMode.PLUGIN_SGX:\r\n                return DCAPMode.PLUGIN_SGX;\r\n            case DCAPMode.PLUGIN_TEE:\r\n                return DCAPMode.PLUGIN_TEE;\r\n            case DCAPMode.MOCK:\r\n                return DCAPMode.MOCK;\r\n        }\r\n    } catch {}\r\n}\r\n\r\nexport const getTEEMode = (runtime: IAgentRuntime) =>\r\n    runtime.getSetting(\"TEE_MODE\") as TEEMode;\r\n\r\nexport function hasTEEMode(runtime: IAgentRuntime) {\r\n    try {\r\n        const mode = getTEEMode(runtime);\r\n        return mode && mode !== TEEMode.OFF;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n","import type { Action } from \"@elizaos/core\";\r\nimport { verifyAndAttestOnChain } from \"../dcap.js\";\r\nimport { getQuote } from \"../quote.js\";\r\nimport { DCAPMode } from \"../types.js\";\r\nimport {\r\n    getDCAPMode,\r\n    getTEEMode,\r\n    hasPrivateKey,\r\n    hasTEEMode,\r\n} from \"../utils.js\";\r\n\r\nexport const dcapOnChainVerifyAction: Action = {\r\n    name: \"DCAP_ON_CHAIN\",\r\n    description:\r\n        \"This plugin is used to generate DCAP attestation and verify it on-chain. The user can also use the keyword DCAP_ON_CHAIN to trigger this action.\",\r\n    similes: [\r\n        \"DCAP\",\r\n        \"DCAP_ATTESTATION\",\r\n        \"DCAP_TEE\",\r\n        \"DCAP_SGX\",\r\n        \"DCAP_TDX\",\r\n        \"VERIFY_ATTESTATION\",\r\n        \"VERIFY_DCAP\",\r\n        \"DCAP_VERIFICATION\",\r\n        \"ATTESTATION\",\r\n        \"GENERATE_ATTESTATION\",\r\n    ],\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Generate a DCAP attestation and verify it on-chain\",\r\n                    action: \"DCAP_ON_CHAIN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Of course, hanlding it now...\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { \r\n                    text: \"Verify the DCAP attestation on-chain\",\r\n                    action: \"DCAP_ON_CHAIN\"\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Of course, hanlding it now...\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { \r\n                    text: \"DCAP_ON_CHAIN\",\r\n                    action: \"DCAP_ON_CHAIN\"\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Of course, hanlding it now...\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    async validate(runtime, _message) {\r\n        if (!hasPrivateKey(runtime)) return false;\r\n        const mode = getDCAPMode(runtime);\r\n        if (!mode) return false;\r\n        if (mode === DCAPMode.PLUGIN_TEE) return hasTEEMode(runtime);\r\n        return true;\r\n    },\r\n    async handler(runtime, message, _state, _options, callback) {\r\n        const { agentId } = runtime;\r\n        const { userId, roomId, content } = message;\r\n        const quote = await getQuote(\r\n            // Attestation will be generated based on the message info\r\n            JSON.stringify({\r\n                agentId,\r\n                timestamp: Date.now(),\r\n                message: { userId, roomId, content: content.text },\r\n            }),\r\n            getDCAPMode(runtime),\r\n            getTEEMode(runtime)\r\n        );\r\n\r\n        const reply = (text: string) =>\r\n            callback({\r\n                text,\r\n                // source: quote,\r\n                action: \"DCAP_ON_CHAIN\",\r\n            });\r\n        try {\r\n            const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\r\n            if (!privateKey) {\r\n                throw new Error(\"EVM_PRIVATE_KEY not set\");\r\n            }\r\n            const tx = await verifyAndAttestOnChain(privateKey, quote);\r\n            reply(`Verified! Transaction hash: ${tx.hash}`);\r\n            return true;\r\n        } catch (e) {\r\n            reply(e instanceof Error ? e.message : \"Attestation failed\");\r\n            return false;\r\n        }\r\n    },\r\n    suppressInitialMessage: true,\r\n};\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { dcapOnChainVerifyAction } from \"./actions/on-chain\";\r\n\r\nexport const dcapPlugin: Plugin = {\r\n    name: \"dcap\",\r\n    description: \"Basic DCAP attestation plugin\",\r\n    actions: [dcapOnChainVerifyAction],\r\n};\r\n"],"mappings":"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","names":["Chain","Testnet","Mainnet"]}