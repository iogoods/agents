{"version":3,"sources":["../src/actions.ts","../src/wallet.ts","../src/index.ts"],"sourcesContent":["import { getOnChainTools } from \"@goat-sdk/adapter-vercel-ai\";\r\nimport { MODE, USDC, erc20 } from \"@goat-sdk/plugin-erc20\";\r\nimport { kim } from \"@goat-sdk/plugin-kim\";\r\nimport { sendETH } from \"@goat-sdk/wallet-evm\";\r\nimport { WalletClientBase } from \"@goat-sdk/core\";\r\nimport { zilliqa } from \"@goat-sdk/plugin-zilliqa\";\r\n\r\nimport {\r\n    generateText,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    composeContext,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { Zilliqa } from \"@zilliqa-js/zilliqa\";\r\n\r\nexport async function getOnChainActions(\r\n    evmWallet: WalletClientBase,\r\n    zilliqaWallet: WalletClientBase\r\n) {\r\n    const actionsWithoutHandler = [\r\n        {\r\n            name: \"GET_BALANCE\",\r\n            description:\r\n                \"Retrieve the balance of a zilliqa account using the GET_ZILLIQA_ADDRESS_BALANCE tool or an evm account using the GET_BALANCE tool. Addresses may be expressed as a hex or bech32 address\",\r\n            similes: [],\r\n            validate: async () => true,\r\n            examples: [\r\n                [\r\n                    {\r\n                        user: \"{{user1}}\",\r\n                        content: {\r\n                            text: \"Tell me the balance of account 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e\",\r\n                            action: \"GET_BALANCE\",\r\n                        },\r\n                    },\r\n                    {\r\n                        user: \"{{agentName}}\",\r\n                        content: {\r\n                            text: \"The balance of account 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e is 2.01 zil\",\r\n                            action: \"GET_BALANCE\",\r\n                        },\r\n                    },\r\n                ],\r\n                [\r\n                    {\r\n                        user: \"{{user1}}\",\r\n                        content: {\r\n                            text: \"Tell me the balance of the account zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g\",\r\n                        },\r\n                    },\r\n                    {\r\n                        user: \"{{agentName}}\",\r\n                        content: {\r\n                            text: \"The balance of account zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g is 18.05 zil\",\r\n                            action: \"GET_BALANCE\",\r\n                        },\r\n                    },\r\n                ],\r\n            ],\r\n        },\r\n        {\r\n            name: \"CONVERT\",\r\n            description:\r\n                \"Convert address formats from bech32 to hex using the CONVERT_FROM_BECH32 tool or from hex to bech32 using the CONVERT_TO_BECH32 tool. The addresses to be converted may be either evm or zilliqa\",\r\n            similes: [],\r\n            validate: async () => true,\r\n            examples: [\r\n                [\r\n                    {\r\n                        user: \"{{user1}}\",\r\n                        content: {\r\n                            text: \"Convert 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e to bech32\",\r\n                        },\r\n                    },\r\n                    {\r\n                        user: \"{{agentName}}\",\r\n                        content: {\r\n                            text: \"The bech32 address for 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e is zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g\",\r\n                            action: \"CONVERT\",\r\n                        },\r\n                    },\r\n                ],\r\n                [\r\n                    {\r\n                        user: \"{{user1}}\",\r\n                        content: {\r\n                            text: \"Convert zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g to hex\",\r\n                        },\r\n                    },\r\n                    {\r\n                        user: \"{{agentName}}\",\r\n                        content: {\r\n                            text: \"The hex address for zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g is 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e\",\r\n                            action: \"CONVERT\",\r\n                        },\r\n                    },\r\n                ],\r\n            ],\r\n        },\r\n        {\r\n            name: \"TRANSFER\",\r\n            description:\r\n                \"Transfer funds from a Zilliqa address using TRANSFER_FROM_ZILLIQA_ADDRESS or from an EVM address using TRANSFER_FROM_EVM_ADDRESS. Addresses may be in either bech32 or hex format. Both kinds of transfer return the transaction id in hex.\",\r\n            similes: [],\r\n            validate: async () => true,\r\n            examples: [\r\n                [\r\n                    {\r\n                        user: \"{{user1}}\",\r\n                        content: {\r\n                            text: \"Transfer 2 ZIL from the EVM address zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g to 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e\",\r\n                            action: \"TRANSFER\",\r\n                        },\r\n                    },\r\n                ],\r\n                [\r\n                    {\r\n                        user: \"{{user1}}\",\r\n                        content: {\r\n                            text: \"Transfer 2 ZIL from the Zilliqa address zil17r9jftrxhfeht0umn386j83q3k0240fwn7g70g to 0xf0cb24ac66ba7375bf9b9c4fa91e208d9eaabd2e\",\r\n                            action: \"TRANSFER\",\r\n                        },\r\n                    },\r\n                ],\r\n            ],\r\n        },\r\n        // 1. Add your actions here\r\n    ];\r\n\r\n    const tools = await getOnChainTools({\r\n        wallet: evmWallet,\r\n        // 2. Configure the plugins you need to perform those actions\r\n        plugins: [sendETH()],\r\n    });\r\n\r\n    const zilTools = await getOnChainTools({\r\n        wallet: zilliqaWallet,\r\n        plugins: [zilliqa()],\r\n    });\r\n\r\n    const allTools = { ...zilTools, ...tools };\r\n    // 3. Let GOAT handle all the actions\r\n    return actionsWithoutHandler.map((action) => ({\r\n        ...action,\r\n        handler: getActionHandler(action.name, action.description, allTools),\r\n    }));\r\n}\r\n\r\nfunction getActionHandler(\r\n    actionName: string,\r\n    actionDescription: string,\r\n    tools\r\n) {\r\n    return async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State | undefined,\r\n        options?: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        let currentState = state ?? (await runtime.composeState(message));\r\n        currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n        try {\r\n            // 1. Call the tools needed\r\n            const context = composeActionContext(\r\n                actionName,\r\n                actionDescription,\r\n                currentState\r\n            );\r\n            const result = await generateText({\r\n                runtime,\r\n                context,\r\n                tools,\r\n                maxSteps: 10,\r\n                // Uncomment to see the log each tool call when debugging\r\n                onStepFinish: (step) => {\r\n                    console.log(step.toolResults);\r\n                },\r\n                modelClass: ModelClass.LARGE,\r\n            });\r\n\r\n            // 2. Compose the response\r\n            const response = composeResponseContext(result, currentState);\r\n            const responseText = await generateResponse(runtime, response);\r\n\r\n            callback?.({\r\n                text: responseText,\r\n                content: {},\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            const errorMessage =\r\n                error instanceof Error ? error.message : String(error);\r\n\r\n            // 3. Compose the error response\r\n            const errorResponse = composeErrorResponseContext(\r\n                errorMessage,\r\n                currentState\r\n            );\r\n            const errorResponseText = await generateResponse(\r\n                runtime,\r\n                errorResponse\r\n            );\r\n\r\n            callback?.({\r\n                text: errorResponseText,\r\n                content: { error: errorMessage },\r\n            });\r\n            return false;\r\n        }\r\n    };\r\n}\r\n\r\nfunction composeActionContext(\r\n    actionName: string,\r\n    actionDescription: string,\r\n    state: State\r\n): string {\r\n    const actionTemplate = `\r\n# Knowledge\r\n{{knowledge}}\r\n\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n\r\n# Action: ${actionName}\r\n${actionDescription}\r\n\r\n{{recentMessages}}\r\n\r\nBased on the action chosen and the previous messages, execute the action and respond to the user using the tools you were given.\r\n`;\r\n    return composeContext({ state, template: actionTemplate });\r\n}\r\n\r\nfunction composeResponseContext(result: unknown, state: State): string {\r\n    const responseTemplate = `\r\n    # Action Examples\r\n{{actionExamples}}\r\n(Action examples are for reference only. Do not use the information from them in your response.)\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\nHere is the result:\r\n${JSON.stringify(result)}\r\n\r\n{{actions}}\r\n\r\nRespond to the message knowing that the action was successful and these were the previous messages:\r\n{{recentMessages}}\r\n  `;\r\n    return composeContext({ state, template: responseTemplate });\r\n}\r\n\r\nfunction composeErrorResponseContext(\r\n    errorMessage: string,\r\n    state: State\r\n): string {\r\n    const errorResponseTemplate = `\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\n{{actions}}\r\n\r\nRespond to the message knowing that the action failed.\r\nThe error was:\r\n${errorMessage}\r\n\r\nThese were the previous messages:\r\n{{recentMessages}}\r\n    `;\r\n    return composeContext({ state, template: errorResponseTemplate });\r\n}\r\n\r\nasync function generateResponse(\r\n    runtime: IAgentRuntime,\r\n    context: string\r\n): Promise<string> {\r\n    return generateText({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n}\r\n","import { WalletClientBase } from \"@goat-sdk/core\";\r\nimport { viem, type Chain } from \"@goat-sdk/wallet-viem\";\r\nimport { createWalletClient, http } from \"viem\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport { mode } from \"viem/chains\";\r\nimport {\r\n    zilliqaChainId,\r\n    zilliqaJSViemWalletClient,\r\n    ZilliqaWalletClient\r\n} from \"@goat-sdk/wallet-zilliqa\";\r\nimport { Account } from \"@zilliqa-js/zilliqa\";\r\n\r\n// Add the chain you want to use, remember to update also\r\n// the ZILLIQA_PROVIDER_URL to the correct one for the chain\r\nexport const chain = mode;\r\n\r\nfunction getViemChain(provider: string, id: number, decimals: number): Chain {\r\n    return {\r\n        id: id | 0x8000,\r\n        name: \"zilliqa\",\r\n        nativeCurrency: {\r\n            decimals: decimals,\r\n            name: \"Zil\",\r\n            symbol: \"ZIL\",\r\n        },\r\n        rpcUrls: {\r\n            default: {\r\n                https: [provider],\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nexport async function getZilliqaWalletClient(\r\n    getSetting: (key: string) => string | undefined\r\n) {\r\n    const privateKey = getSetting(\"ZILLIQA_PRIVATE_KEY\");\r\n    if (!privateKey) return null;\r\n\r\n    const provider = getSetting(\"ZILLIQA_PROVIDER_URL\");\r\n    if (!provider) throw new Error(\"ZILLIQA_PROVIDER_URL not configured\");\r\n\r\n    const chainId = await zilliqaChainId(provider);\r\n    const account = new Account(privateKey);\r\n    const viemChain = getViemChain(provider, chainId, 18);\r\n    const viemWallet = createWalletClient({\r\n        account: privateKeyToAccount(privateKey as `0x${string}`),\r\n        chain: viemChain,\r\n        transport: http(provider),\r\n    });\r\n\r\n    return zilliqaJSViemWalletClient(viemWallet, provider, account, chainId);\r\n}\r\n\r\nexport function getWalletProviders(\r\n    walletClient: WalletClientBase,\r\n    zilliqa: ZilliqaWalletClient\r\n) {\r\n    return [\r\n        {\r\n            async get(): Promise<string | null> {\r\n                try {\r\n                    const address = walletClient.getAddress();\r\n                    const balance = await walletClient.balanceOf(address);\r\n                    return `EVM Wallet Address: ${address}\\nBalance: ${balance} ZIL`;\r\n                } catch (error) {\r\n                    console.error(\"Error in EVM wallet provider:\", error);\r\n                    return null;\r\n                }\r\n            },\r\n        },\r\n        {\r\n            async get(): Promise<string | null> {\r\n                try {\r\n                    const address =\r\n                        zilliqa.getZilliqa().wallet.defaultAccount?.address;\r\n                    return `Zilliqa wallet address: ${address}\\n`;\r\n                } catch (error) {\r\n                    console.error(\"Error in zilliqa wallet provider:\", error);\r\n                    return null;\r\n                }\r\n            },\r\n        },\r\n    ];\r\n}\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { getOnChainActions } from \"./actions\";\r\nimport { getZilliqaWalletClient, getWalletProviders } from \"./wallet\";\r\n\r\nexport async function zilliqaPlugin(\r\n    getSetting: (key: string) => string | undefined\r\n): Promise<Plugin> {\r\n    const zilliqaWalletClient = await getZilliqaWalletClient(getSetting);\r\n    if (!zilliqaWalletClient) {\r\n      throw new Error(\"Zilliqa wallet client initialization failed. Ensure that ZILLIQA_PRIVATE_KEY and ZILLIQA_PROVIDER_URL are configured.\");\r\n    }\r\n    const walletClient = zilliqaWalletClient!.getEVM();\r\n    const actions = await getOnChainActions(walletClient, zilliqaWalletClient!);\r\n\r\n    return {\r\n        name: \"[ZILLIQA] Onchain Actions\",\r\n        description: \"Zilliqa integration plugin\",\r\n        providers: getWalletProviders(walletClient, zilliqaWalletClient),\r\n        evaluators: [],\r\n        services: [],\r\n        actions: actions,\r\n    };\r\n}\r\n\r\nexport default zilliqaPlugin;\r\n"],"mappings":"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","names":["zilliqa"]}