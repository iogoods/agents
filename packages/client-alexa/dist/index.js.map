{"version":3,"sources":["../src/index.ts","../src/alexa-client.ts","../../../node_modules/uuid/dist/esm-node/rng.js","../../../node_modules/uuid/dist/esm-node/regex.js","../../../node_modules/uuid/dist/esm-node/validate.js","../../../node_modules/uuid/dist/esm-node/stringify.js","../../../node_modules/uuid/dist/esm-node/v4.js"],"sourcesContent":["import { Client, IAgentRuntime, elizaLogger } from \"@elizaos/core\";\r\nimport { AlexaClient } from \"./alexa-client\";\r\n\r\nexport const AlexaClientInterface: Client = {\r\n    start: async (runtime: IAgentRuntime) => {\r\n        const alexaClient = new AlexaClient(runtime);\r\n\r\n        await alexaClient.start();\r\n\r\n        elizaLogger.success(\r\n            `‚úÖ Alexa client successfully started for character ${runtime.character.name}`\r\n        );\r\n        return alexaClient;\r\n    },\r\n    stop: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            // stop it\r\n            elizaLogger.log(\"Stopping alexa client\", runtime.agentId);\r\n            await runtime.clients.alexa.stop();\r\n        } catch (e) {\r\n            elizaLogger.error(\"client-alexa interface stop error\", e);\r\n        }\r\n    },\r\n};\r\n\r\nexport default AlexaClientInterface;\r\n","import { elizaLogger, IAgentRuntime } from \"@elizaos/core\";\r\nimport { DefaultApiClient } from \"ask-sdk-core\";\r\nimport { services } from \"ask-sdk-model\";\r\nimport axios from \"axios\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport class AlexaClient {\r\n    // private bot: services.proactiveEvents.ProactiveEventsServiceClient; Use for conversations\r\n    private LwaServiceClient: services.LwaServiceClient;\r\n    private apiConfiguration: any;\r\n    private runtime: IAgentRuntime;\r\n    private skillId: string;\r\n    private clientId: string;\r\n    private clientSecret: string;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        elizaLogger.log(\"üì± Constructing new AlexaClient...\");\r\n        this.runtime = runtime;\r\n        this.apiConfiguration = {\r\n            apiClient: new DefaultApiClient(),\r\n            apiEndpoint: \"https://api.amazonalexa.com\",\r\n        };\r\n        this.skillId = runtime.getSetting(\"ALEXA_SKILL_ID\");\r\n        this.clientId = runtime.getSetting(\"ALEXA_CLIENT_ID\");\r\n        this.clientSecret = runtime.getSetting(\"ALEXA_CLIENT_SECRET\");\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        elizaLogger.log(\"üöÄ Starting Alexa bot...\");\r\n        try {\r\n            await this.initializeBot();\r\n        } catch (error) {\r\n            elizaLogger.error(\"‚ùå Failed to launch Alexa bot:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async initializeBot(): Promise<void> {\r\n        const authenticationConfiguration = {\r\n            clientId: this.clientId,\r\n            clientSecret: this.clientSecret,\r\n        };\r\n        this.LwaServiceClient = new services.LwaServiceClient({\r\n            apiConfiguration: this.apiConfiguration,\r\n            authenticationConfiguration,\r\n        });\r\n\r\n        elizaLogger.log(\"‚ú® Alexa bot successfully launched and is running!\");\r\n        const access_token = await this.LwaServiceClient.getAccessTokenForScope(\r\n            \"alexa::proactive_events\"\r\n        );\r\n\r\n        await this.sendProactiveEvent(access_token);\r\n    }\r\n\r\n    async sendProactiveEvent(access_token: string): Promise<void> {\r\n        const event = {\r\n            timestamp: new Date().toISOString(),\r\n            referenceId: v4(),\r\n            expiryTime: new Date(Date.now() + 10 * 60000).toISOString(),\r\n            event: {\r\n                name: \"AMAZON.MessageAlert.Activated\",\r\n                payload: {\r\n                    state: {\r\n                        status: \"UNREAD\",\r\n                        freshness: \"NEW\",\r\n                    },\r\n                    messageGroup: {\r\n                        creator: {\r\n                            name: \"Eliza\",\r\n                        },\r\n                        count: 1,\r\n                    },\r\n                },\r\n            },\r\n            localizedAttributes: [\r\n                {\r\n                    locale: \"en-US\",\r\n                    source: \"localizedattribute:source\",\r\n                },\r\n            ],\r\n            relevantAudience: {\r\n                type: \"Multicast\",\r\n                payload: {},\r\n            },\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.amazonalexa.com/v1/proactiveEvents/stages/development\",\r\n                event,\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${access_token}`,\r\n                    },\r\n                }\r\n            );\r\n            switch (response.status) {\r\n                case 202:\r\n                    elizaLogger.log(\"‚úÖ Proactive event sent successfully.\");\r\n                    break;\r\n                case 400:\r\n                    elizaLogger.error(\r\n                        `${response.data.code} - ${response.data.message}}`\r\n                    );\r\n                    break;\r\n                case 401:\r\n                    elizaLogger.error(\"Unauthorized\");\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error\", error);\r\n        }\r\n    }\r\n}\r\n","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"mappings":"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","names":["elizaLogger","elizaLogger"]}