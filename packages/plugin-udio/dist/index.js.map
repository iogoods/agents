{"version":3,"sources":["../src/index.ts","../src/providers/udio.ts","../src/actions/generate.ts","../src/actions/extend.ts"],"sourcesContent":["import type { Plugin, Provider } from \"@elizaos/core\";\r\nimport generateMusic from \"./actions/generate\";\r\nimport extendMusic from \"./actions/extend\";\r\nimport { UdioProvider } from \"./providers/udio\";\r\n\r\nexport {\r\n    UdioProvider,\r\n    generateMusic as GenerateMusic,\r\n    extendMusic as ExtendMusic\r\n};\r\n\r\nconst udioProvider: Provider = {\r\n    get: async (runtime, message, state) => {\r\n        const provider = await UdioProvider.get(runtime, message, state);\r\n        return provider;\r\n    }\r\n};\r\n\r\nexport const udioPlugin: Plugin = {\r\n    name: \"udio\",\r\n    description: \"Udio AI Music Generation Plugin for Eliza\",\r\n    actions: [generateMusic, extendMusic],\r\n    evaluators: [],\r\n    providers: [udioProvider],\r\n};\r\n\r\nexport default udioPlugin;","import { IAgentRuntime, Memory, State, type Provider } from \"@elizaos/core\";\r\nimport type { UdioGenerateResponse, UdioSamplerOptions, UdioSong } from \"../types\";\r\n\r\nconst API_BASE_URL = \"https://www.udio.com/api\";\r\n\r\nexport interface UdioConfig {\r\n    authToken: string;\r\n    baseUrl?: string;\r\n}\r\n\r\nexport class UdioProvider implements Provider {\r\n    private authToken: string;\r\n    private baseUrl: string;\r\n\r\n    static async get(runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<UdioProvider> {\r\n        const authToken = runtime.getSetting(\"UDIO_AUTH_TOKEN\");\r\n        if (!authToken) {\r\n            throw new Error(\"UDIO_AUTH_TOKEN is required\");\r\n        }\r\n        return new UdioProvider({ authToken });\r\n    }\r\n\r\n    constructor(config: UdioConfig) {\r\n        this.authToken = config.authToken;\r\n        this.baseUrl = config.baseUrl || API_BASE_URL;\r\n    }\r\n\r\n    async get(_runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<UdioProvider> {\r\n        return this;\r\n    }\r\n\r\n    async makeRequest(url: string, method: string, data?: Record<string, unknown>) {\r\n        const headers = {\r\n            \"Accept\": method === 'GET' ? \"application/json, text/plain, */*\" : \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Cookie\": `sb-api-auth-token=${this.authToken}`,\r\n            \"Origin\": \"https://www.udio.com\",\r\n            \"Referer\": \"https://www.udio.com/my-creations\",\r\n        };\r\n\r\n        const options: RequestInit = {\r\n            method,\r\n            headers,\r\n            body: data ? JSON.stringify(data) : undefined,\r\n        };\r\n\r\n        const response = await fetch(url, options);\r\n        if (!response.ok) {\r\n            throw new Error(`UDIO_API_ERROR: ${response.status}`);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    async generateSong(prompt: string, samplerOptions: UdioSamplerOptions, customLyrics?: string): Promise<UdioGenerateResponse> {\r\n        const url = `${this.baseUrl}/generate-proxy`;\r\n        const data = {\r\n            prompt,\r\n            samplerOptions,\r\n            ...(customLyrics && { lyricInput: customLyrics }),\r\n        };\r\n        return this.makeRequest(url, 'POST', data);\r\n    }\r\n\r\n    async checkSongStatus(songIds: string[]): Promise<{songs: UdioSong[]}> {\r\n        const url = `${this.baseUrl}/songs?songIds=${songIds.join(',')}`;\r\n        return this.makeRequest(url, 'GET');\r\n    }\r\n}","import type { Action, IAgentRuntime, Memory, State, HandlerCallback } from \"@elizaos/core\";\r\nimport { UdioProvider } from \"../providers/udio\";\r\nimport type { UdioGenerateOptions } from \"../types\";\r\n\r\nconst generateMusic: Action = {\r\n    name: \"generate\",\r\n    description: \"Generate music using Udio AI\",\r\n    similes: [\r\n        \"CREATE_MUSIC\",\r\n        \"MAKE_MUSIC\",\r\n        \"COMPOSE_MUSIC\",\r\n        \"GENERATE_AUDIO\",\r\n        \"CREATE_SONG\",\r\n        \"MAKE_SONG\"\r\n    ],\r\n\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        return !!runtime.getSetting(\"UDIO_AUTH_TOKEN\");\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        try {\r\n            const provider = await UdioProvider.get(runtime, message, state);\r\n            const content = message.content as unknown as UdioGenerateOptions;\r\n\r\n            if (!content.prompt) {\r\n                throw new Error(\"Missing required parameter: prompt\");\r\n            }\r\n\r\n            const generateResult = await provider.generateSong(\r\n                content.prompt,\r\n                { seed: content.seed || -1 },\r\n                content.customLyrics\r\n            );\r\n\r\n            // Wait for processing to complete\r\n            while (true) {\r\n                const status = await provider.checkSongStatus(generateResult.track_ids);\r\n                if (status.songs.every(song => song.finished)) {\r\n                    if (callback) {\r\n                        callback({\r\n                            text: 'Successfully generated music based on your prompt',\r\n                            content: status\r\n                        });\r\n                    }\r\n                    return true;\r\n                }\r\n                await new Promise(resolve => setTimeout(resolve, 5000));\r\n            }\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Failed to generate music: ${(error as Error).message}`,\r\n                    error: error\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create a happy and energetic song\",\r\n                    prompt: \"A cheerful and energetic melody with upbeat rhythm\",\r\n                    seed: 12345\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll generate a happy and energetic song for you.\",\r\n                    action: \"generate\"\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Successfully generated your upbeat and energetic song.\"\r\n                }\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Generate a song with custom lyrics\",\r\n                    prompt: \"A pop song with vocals\",\r\n                    seed: 54321,\r\n                    customLyrics: \"Verse 1: This is my custom song...\"\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll create a pop song with your custom lyrics.\",\r\n                    action: \"generate\"\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Successfully generated your song with custom lyrics.\"\r\n                }\r\n            }\r\n        ]\r\n    ]\r\n};\r\n\r\nexport default generateMusic;","import type { Action, IAgentRuntime, Memory, State, HandlerCallback } from \"@elizaos/core\";\r\nimport { UdioProvider } from \"../providers/udio\";\r\nimport type { UdioExtendOptions } from \"../types\";\r\n\r\nconst extendMusic: Action = {\r\n    name: \"extend\",\r\n    description: \"Extend an existing music piece using Udio AI\",\r\n    similes: [\r\n        \"CONTINUE_MUSIC\",\r\n        \"EXTEND_SONG\",\r\n        \"LENGTHEN_MUSIC\",\r\n        \"CONTINUE_SONG\",\r\n        \"EXTEND_AUDIO\",\r\n        \"CONTINUE_AUDIO\"\r\n    ],\r\n\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        return !!runtime.getSetting(\"UDIO_AUTH_TOKEN\");\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        try {\r\n            const provider = await UdioProvider.get(runtime, message, state);\r\n            const content = message.content as unknown as UdioExtendOptions;\r\n\r\n            if (!content.prompt || !content.audioConditioningPath || !content.audioConditioningSongId) {\r\n                throw new Error(\"Missing required parameters: prompt, audioConditioningPath, or audioConditioningSongId\");\r\n            }\r\n\r\n            const generateResult = await provider.generateSong(\r\n                content.prompt,\r\n                {\r\n                    seed: content.seed || -1,\r\n                    audio_conditioning_path: content.audioConditioningPath,\r\n                    audio_conditioning_song_id: content.audioConditioningSongId,\r\n                    audio_conditioning_type: \"continuation\",\r\n                    ...(content.cropStartTime !== undefined && { crop_start_time: content.cropStartTime })\r\n                },\r\n                content.customLyrics\r\n            );\r\n\r\n            // Wait for processing to complete\r\n            while (true) {\r\n                const status = await provider.checkSongStatus(generateResult.track_ids);\r\n                if (status.songs.every(song => song.finished)) {\r\n                    if (callback) {\r\n                        callback({\r\n                            text: 'Successfully extended the music based on your prompt',\r\n                            content: status\r\n                        });\r\n                    }\r\n                    return true;\r\n                }\r\n                await new Promise(resolve => setTimeout(resolve, 5000));\r\n            }\r\n        } catch (error) {\r\n            if (callback) {\r\n                callback({\r\n                    text: `Failed to extend music: ${(error as Error).message}`,\r\n                    error: error\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Extend this song with a similar style\",\r\n                    prompt: \"Continue with the same energy and mood\",\r\n                    audioConditioningPath: \"/path/to/original.mp3\",\r\n                    audioConditioningSongId: \"original-123\",\r\n                    cropStartTime: 60\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll extend your song maintaining its style.\",\r\n                    action: \"extend\"\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Successfully extended your song.\"\r\n                }\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Continue this track with custom lyrics\",\r\n                    prompt: \"Continue the melody and add vocals\",\r\n                    audioConditioningPath: \"/path/to/song.mp3\",\r\n                    audioConditioningSongId: \"song-456\",\r\n                    seed: 54321,\r\n                    customLyrics: \"Verse 2: Continuing the story...\"\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll extend your track with the new lyrics.\",\r\n                    action: \"extend\"\r\n                }\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Successfully extended your track with the new lyrics.\"\r\n                }\r\n            }\r\n        ]\r\n    ]\r\n};\r\n\r\nexport default extendMusic;"],"mappings":"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","names":[]}